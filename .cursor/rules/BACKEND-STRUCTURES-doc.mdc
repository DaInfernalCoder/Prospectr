---
description: 
globs: 
alwaysApply: false
---
# Prospectr Backend Structure Document

**Last Updated:** 2024-04-04

**Note**: This document reflects the current implementation status based on the actual database schema and codebase structure. Update it whenever necessary

## Database Overview

The Prospectr database is implemented in Supabase with the following schemas:

- **auth** (1624 kB): Contains 16 tables for Supabase authentication
- **public** (296 kB): Contains 8 tables for application data
- **realtime** (136 kB): Contains 8 tables for Supabase realtime features
- **storage** (144 kB): Contains 5 tables for file storage
- **supabase_functions** (64 kB): Contains 2 tables for edge functions
- **net** (48 kB): Contains 2 tables for networking features
- **vault** (24 kB): Contains 1 table for secure storage
- **extensions**, **graphql**, **graphql_public**: Empty schemas (0 bytes)

## Public Schema Tables

### `profiles`
Primary user profile table linking Supabase Auth with application data.

**Columns:**
- `id` uuid PRIMARY KEY (auto-generated)
- `created_at` timestamptz NOT NULL DEFAULT now()
- `user_id` uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id)
- `linkedin_token` text
- `linkedin_status` boolean DEFAULT false
- `message_quota` integer DEFAULT 50 (Daily message limit)
- `stripe_customer_id` text
- `subscription_tier` enum DEFAULT 'FREE'
- `oauth_state` text
- `unipile_account_id` text
- `reconnect_token` text
- `reconnect_expires_at` date
- `customer_id` text
- `price_id` text
- `has_access` boolean DEFAULT false
- `subscription_id` text
- `subscription_status` text
- `trial_ends_at` timestamptz
- `cancel_at_period_end` timestamptz
- `subscription_created_at` timestamptz
- `last_payment_at` timestamptz
- `canceled_at` timestamptz
- `payment_failed` boolean DEFAULT false

### `invitation_jobs`
Tracks bulk LinkedIn invitation campaigns.

**Columns:**
- `job_id` text PRIMARY KEY DEFAULT ''
- `created_at` timestamptz NOT NULL DEFAULT now()
- `user_id` uuid REFERENCES auth.users(id)
- `status` text NOT NULL
- `total_invitations` integer
- `invitations_sent` integer DEFAULT 0
- `invitations_failed` integer DEFAULT 0
- `started_at` timestamptz
- `last_updated` timestamptz
- `completed_at` timestamptz
- `error_message` text
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `template_id` uuid REFERENCES invitation_templates(id)
- `message` text
- `name` text

### `invitation_users`
Tracks individual LinkedIn connection requests within campaigns.

**Columns:**
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `created_at` timestamptz NOT NULL DEFAULT now()
- `linkedin_user_id` text
- `linkedin_profile_url` text
- `invitation_status` text DEFAULT 'pending'
- `invitation_sent_at` timestamptz DEFAULT now()
- `invitation_accepted_at` timestamptz
- `follow_up_sent_at` timestamptz
- `updated_at` timestamptz DEFAULT now()
- `job_id` text NOT NULL REFERENCES invitation_jobs(job_id)
- `has_responded` boolean DEFAULT false
- `first_response_at` timestamptz

### `invitation_templates`
Stores message templates for connection requests and follow-ups.

**Columns:**
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `created_at` timestamptz NOT NULL DEFAULT now()
- `user_id` uuid REFERENCES auth.users(id)
- `name` text NOT NULL
- `follow_up_message` text NOT NULL
- `updated_at` timestamptz DEFAULT now()

### `linkedin_status_updates`
Logs LinkedIn connection status changes.

**Columns:**
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `user_id` uuid NOT NULL REFERENCES auth.users(id)
- `connection_id` uuid NOT NULL
- `status` text NOT NULL
- `account_id` text
- `timestamp` timestamptz DEFAULT now()
- `metadata` jsonb DEFAULT '{}'

### `saved_profiles`
Stores saved LinkedIn profiles for future reference.

**Columns:**
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `created_at` timestamptz NOT NULL DEFAULT now()
- `profile_data` jsonb NOT NULL
- `tags` text[]
- `notes` text
- `profile_id` text NOT NULL
- `user_id` uuid REFERENCES auth.users(id)

### `linkedin_connections`
Tracks LinkedIn connections (appears to be legacy/unused).

**Columns:**
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `created_at` timestamptz NOT NULL DEFAULT now()
- `user_id` uuid REFERENCES auth.users(id)
- `profile_id` text
- `name` text
- `headline` text
- `status` enum

### `leads`
Simple table for capturing lead information.

**Columns:**
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `email` text
- `created_at` timestamptz NOT NULL DEFAULT timezone('utc'::text, now())

## Table Relationships

### Foreign Key Relationships
- `profiles.user_id` → `auth.users.id`
- `invitation_jobs.user_id` → `auth.users.id`
- `invitation_jobs.template_id` → `invitation_templates.id`
- `invitation_templates.user_id` → `auth.users.id`
- `invitation_users.job_id` → `invitation_jobs.job_id`
- `linkedin_status_updates.user_id` → `auth.users.id`
- `saved_profiles.user_id` → `auth.users.id`
- `linkedin_connections.user_id` → `auth.users.id`

### Custom Types
- `subscription_tier`: Enum type (FREE, PRO, PREMIUM)
- Status enum for linkedin_connections table

## Table Usage Statistics

Based on current data:
- `invitation_jobs`: 4 rows, 81920 bytes
- `profiles`: 8 rows, 65536 bytes
- `invitation_templates`: 3 rows, 32768 bytes
- `invitation_users`: 6 rows, 32768 bytes
- Other tables: 0 rows currently

## Security and Access Control

### Row Level Security (RLS)
RLS policies should be implemented for:
- `profiles`: Restrict access to user's own profile
- `invitation_jobs`: Restrict access to user's own jobs
- `invitation_users`: Restrict access based on job ownership
- `invitation_templates`: Restrict access to user's own templates
- `linkedin_status_updates`: Restrict access to user's own updates
- `saved_profiles`: Restrict access to user's own saved profiles
- `linkedin_connections`: Restrict access to user's own connections
- `leads`: Allow public insertion, restrict reading

### Authentication Flow
- Uses Supabase Auth with email/password and potentially OAuth providers
- Session management via `@supabase/ssr`
- Profile creation triggered on user signup
- LinkedIn connection managed separately via Unipile

## API Routes

The following API routes interact with the database:

### Authentication
- `/api/auth/*`: Supabase authentication endpoints
- `/api/auths/linkedin/connect`: LinkedIn connection via Unipile
- `/api/auths/linkedin/status`: Check LinkedIn connection status
- `/api/auths/linkedin/reconnect`: Initiate LinkedIn reconnection

### Campaign Management
- `/api/linkedin/invitations/send`: Create new invitation campaigns
- `/api/linkedin/invitations/status/[jobId]`: Check campaign status
- `/api/linkedin/search`: Search LinkedIn profiles
- `/api/linkedin/saved_profile`: Save/manage LinkedIn profiles

### Subscription Management
- `/api/stripe/create-checkout`: Create Stripe checkout session
- `/api/stripe/create-portal`: Access Stripe customer portal
- `/api/webhook/stripe`: Handle Stripe webhook events

### Background Jobs
- `/api/cron/check-invitations`: Update invitation statuses
- `/api/cron/check-responses`: Check for LinkedIn responses

## Conclusion

This document reflects the current state of the Prospectr backend based on the actual Supabase database schema. The structure supports the core features of LinkedIn prospecting, campaign management, and subscription handling, with appropriate security measures and monitoring capabilities.