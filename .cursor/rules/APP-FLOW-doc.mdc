---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
**Update this rule if user requested changes to the project requirement, etc.**

# Prospectr App Flow Document

**Last Updated:** 2025-04-04

**Note**: This document should be updated whenever there are changes to the project's application flow or requirements to ensure it remains accurate and useful.

This document outlines the primary user flows within the Prospectr application based on the current codebase.

## Onboarding and Sign-In/Sign-Up

When users first visit the Prospectr web application, they land on the home page located at `app/page.js`. This page serves as the entry point with a clean, professional design featuring a hero section (`components/Hero.js`) that explains Prospectr as an AI-powered LinkedIn prospecting tool for finding and connecting with leads. The color scheme uses the "black" DaisyUI theme defined in `config.js`, ensuring a sleek and modern look. The home page includes clear calls-to-action: a "Sign In" button (`components/ButtonSignin.js`) directing users to `app/signin/page.js` and a "Sign Up" button leading to `app/signup/page.js`. Additional sections highlight features (`components/FeaturesAccordion.js`), pricing (`components/Pricing.js` linking to `#pricing`), testimonials (`components/Testimonials3.js`, `components/Testimonials1.js`), FAQ (`components/FAQ.js`), and contact info (`components/ContactSection.js`). Users can also navigate to informational pages via the footer (`components/Footer.js`): Blog at `app/blog/page.js`, Privacy Policy at `app/privacy-policy/page.js`, and Terms of Service at `app/tos/page.js`.

The sign-up page at `app/signup/page.js` utilizes the `app/signup/SignupForm.js` component, offering a straightforward registration process using Supabase Auth. Users enter their email and password or sign up via Google OAuth, triggered by `utils/action.js` with `signInWithGoogle`. Upon successful registration, a confirmation email is sent (if `auth.email.enable_confirmations = true` in `supabase/config.toml`), and users are typically redirected to the dashboard at `app/dashboard/page.js` via the `/auth/callback` route (`app/auth/callback/route.js`). If registration fails due to an invalid email or password, an error message appears via `react-hot-toast`, keeping users on the sign-up page.

The sign-in page at `app/signin/page.js` allows users to log in with their email and password or Google OAuth. After entering credentials, Supabase Auth verifies them, and upon success, users are redirected to the dashboard at `app/dashboard/page.js` via the `/auth/callback` route. If authentication fails, an error message displays via `react-hot-toast`, and users remain on the sign-in page. The middleware at `middleware.js` ensures session persistence using `@supabase/ssr`, refreshing tokens if expired, and redirects unauthenticated users from protected routes (like `/dashboard/*`) to `/signin`.

## Main Dashboard

After signing in, users arrive at the dashboard at `app/dashboard/page.js`, the central hub for all activities. The dashboard features a modern, responsive layout using `components/dashboard/DashboardShell.js`, styled with Tailwind CSS and DaisyUI. A sidebar or top navigation menu provides access to key sections: Campaigns at `app/dashboard/campaigns/page.js`, Analytics at `app/dashboard/analytics/page.js`, and Settings at `app/dashboard/settings/page.js`. The main content area displays an overview, including recent campaigns, key metrics like total connections and response rates (fetched via `useAnalytics` context), and notifications such as LinkedIn connection status or subscription reminders. Users can navigate to any section by clicking the respective menu item, instantly transitioning to the chosen page.

## Campaigns Section

The campaigns page at `app/dashboard/campaigns/page.js` lists all user campaigns fetched via the `useAnalytics` context. Each campaign shows its name (or Job ID), status (processing, completed, pending), and metrics like total invitations and accepted connections. A "New Campaign" button takes users to `app/dashboard/campaigns/new/leads/page.js` (via the redirect in `app/dashboard/campaigns/new/page.js`). Clicking a campaign row (or potentially a details button, though not explicitly shown) directs users to its details page at `app/dashboard/campaigns/[id]/page.js`.

The new campaign flow starts at `app/dashboard/campaigns/new/leads/page.js`. Users search LinkedIn profiles using a search interface powered by `app/api/linkedin/search/route.js`. The search utilizes `@tanstack/react-query` for data fetching and state management. Users select profiles by checking boxes next to search results, storing selections in the `useCampaignStore` (Zustand). They then proceed to the sequence setup at `app/dashboard/campaigns/new/sequence/page.js`. Here, they craft an optional connection message (max 300 chars) and an optional follow-up message (max 1000 chars) using textareas, with variable support (`{{name}}`, `{{company}}`, `{{position}}`). They also provide a template name for reference. A review step at `app/dashboard/campaigns/new/review/page.js` lets users confirm the number of leads, template name, and message content before launching. Upon submission, the campaign is created via `app/api/linkedin/invitations/send/route.js` using the Unipile API. This API queues the job and returns a `jobId`. The frontend (`review/page.js`) shows a success message and options to start a new campaign or go to the dashboard. Campaign progress can be monitored via `/api/linkedin/invitations/status/[jobId]/route.js`.

The campaign details page at `app/dashboard/campaigns/[id]/page.js` displays information about a specific campaign (currently using mock data). It shows the campaign name, status, start date, prospect count, progress, replies, and reply rate. Action buttons allow users to pause, resume, or delete the campaign (Note: API endpoints for these actions are not explicitly defined in the provided code, but status tracking exists). Users can return to the campaigns list by clicking the "Back to Campaigns" button.

## Settings and Account Management

The settings page at `app/dashboard/settings/page.js` lets users manage their account. It includes:
*   **Subscription Management:** Displays the current plan (fetched via `/api/users`), connection limits (from `config.js`), and provides a button (`components/ButtonCheckout.js`) to subscribe to the Pro plan or a "Manage Billing" button (using `/api/stripe/create-portal/route.js`) if already subscribed.
*   **LinkedIn Integration:** Shows the connection status using the `useLinkedIn` context (`components/contexts/LinkedInContext.js`) and provides a button (`components/ButtonLinkedin.js`) to connect (`/api/auths/linkedin/connect/route.js`) or reconnect (`/api/auths/linkedin/reconnect/route.js`) their LinkedIn account via Unipile.
*   **Account Settings:** Currently indicates that settings are managed via the authentication provider.

## Analytics

The analytics page at `app/dashboard/analytics/page.js` provides detailed insights into prospecting activities. It displays overall performance metrics (Connection Rate, Total Connections, Total Invitations, Active Campaigns) and campaign-specific data using the `useAnalytics` context (`components/contexts/AnalyticsContext.js`), which fetches data from `app/api/linkedin/analytics/route.js`. Visualizations include progress bars for campaigns and a table for campaign performance. Users can refresh data and filter by timeframe (though filtering logic isn't fully implemented in the provided code). Users can return to the dashboard via the navigation menu in `DashboardShell.js`.

## Upgrade / Pricing

Users view subscription plans defined in `config.js` (currently one Pro plan at $15/month) on the main landing page (`app/page.js` using `components/Pricing.js`) and within the settings page (`app/dashboard/settings/page.js`). The `components/ButtonCheckout.js` component handles the checkout process:
1.  If the user is not logged in, it redirects them to `/signup?checkout=pending`, storing the plan ID in localStorage.
2.  If the user is logged in, it calls `/api/stripe/create-checkout/route.js` to get a Stripe session URL and redirects the user.
After successful payment through Stripe, users are redirected to `/dashboard?checkout=success`. Subscription status (`has_access`, `subscription_tier`, etc.) is updated in the `profiles` table via webhooks handled by `/api/webhook/stripe/route.js`. Subscription management (canceling, updating payment methods) is handled via the Stripe Customer Portal accessed through `/api/stripe/create-portal/route.js` from the settings page.

## Blog and Informational Pages

The blog page at `app/blog/page.js` lists articles defined in `app/blog/_assets/content.js`, rendered using components like `CardArticle.js`. Each article links to its page at `app/blog/[articleId]/page.js`, displaying full content with author info (`Avatar.js`) and category badges (`BadgeCategory.js`). Navigation includes links to author pages (`app/blog/author/[authorId]/page.js`) and category pages (`app/blog/category/[categoryId]/page.js`). The layout uses `app/blog/layout.js` with a dedicated header (`HeaderBlog.js`). The privacy policy at `app/privacy-policy/page.js` and terms of service at `app/tos/page.js` are static pages accessible from the footer, providing legal information.

## Survey and Thank You Pages

The survey page at `app/survey/page.js` is currently a placeholder. If implemented, it would collect user feedback, potentially using components like `app/survey/_assets/components/SurveyTable.js`. After submission, users are redirected to the thank you page at `app/thankyou/page.js`, acknowledging their input with a return link to the dashboard.

## Error States and Alternate Paths

The app handles errors with custom pages: `app/error.js` for general client-side errors and `app/not-found.js` for 404s. If users access a protected route (like `/dashboard/*`) without authentication, the middleware (`middleware.js`) redirects them to `/signin`. Failed API calls display error messages using `react-hot-toast`. Subscription checks via `utils/check-subscription.js` redirect non-subscribers to `#pricing` or initiate a checkout session via `/api/stripe/create-checkout`, ensuring access control based on the `profiles.has_access` field. LinkedIn connection errors are handled within components (e.g., disabling search if not connected).

## Conclusion and Overall App Journey

The journey through Prospectr starts with a professional home page guiding users to sign up or sign in. After authentication via Supabase (Email/Password or Google), the dashboard (`DashboardShell.js`) provides a central hub for managing campaigns, viewing analytics (powered by `AnalyticsContext`), and adjusting settings. The campaign creation flow guides users through lead selection (LinkedIn search via Unipile), message sequencing, and review before launching automated outreach jobs tracked via Supabase tables. Settings allow users to connect their LinkedIn account (via Unipile) and manage their Stripe subscription. The blog provides resources, while static pages cover legal information. Navigation is seamless, and error handling/access control ensures a smooth user experience.