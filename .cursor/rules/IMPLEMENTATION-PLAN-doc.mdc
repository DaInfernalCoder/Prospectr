---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
**Update this rule if user requested changes to the project requirement, etc.**

# Prospectr Implementation Status & Plan

**Last Updated:** 2024-04-04

**Note**: This document reflects the current implementation status based on the codebase and outlines potential next steps or areas matching the original plan.

## 1. Authentication Flow

*   **Supabase Config:** `.env.local` contains `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY`. **Status: Implemented.**
*   **Email Confirmations:** `supabase/config.toml` has `auth.email.enable_confirmations = false`. **Status: Configured (Disabled).** *Plan Mismatch: Original plan intended to enable this.*
*   **Resend Setup:** `RESEND_API_KEY` exists in `.env.local`. `utils/email/reconnectionEmail.js` uses Resend. **Status: Implemented.**
*   **Email Templates:** No custom templates found in `supabase/templates/`. **Status: Not Implemented.**
*   **Sign-Up Flow:** `app/signup/SignupForm.js` handles email/password signup via Supabase client. Confirmation depends on Supabase config. **Status: Implemented.**
*   **Session Persistence:** `middleware.js` uses `@supabase/ssr` with a 7-day `maxAge`. **Status: Implemented.**
*   **Session Refresh Logic:** `middleware.js` includes logic to attempt session refresh if `user` is null but `session` exists. **Status: Implemented.**
*   **Error Logging:** Basic `console.error` exists in various auth-related files. **Status: Partially Implemented.**

## 2. Google Auth and Simple Sign-In

*   **Google OAuth Setup:** No `GOOGLE_CLIENT_ID` or `GOOGLE_CLIENT_SECRET` in `.env.local`. Supabase config doesn't explicitly enable Google. **Status: Not Implemented.** *Plan Mismatch: Google Auth was planned.*
*   **Sign-In Page:** `app/signin/page.js` includes a "Sign in with Google" button calling `signInWithGoogle` from `utils/action.js`. **Status: Frontend Implemented, Backend Config Missing.**
*   **Callback Handling:** `app/auth/callback/route.js` handles the Supabase code exchange. It needs configuration to handle Google specifically if required beyond Supabase's default handling. **Status: Implemented (Generic).**
*   **Simple Sign-In:** `app/signin/page.js` supports email/password login. **Status: Implemented.**
*   **Auth Page Styling:** Tailwind/DaisyUI used in `signin` and `signup` pages. **Status: Implemented.**
*   **Auth Flow Documentation:** `docs/` directory does not contain `auth-flow.md`. **Status: Not Implemented.**

## 3. LinkedIn Sign-In (via Unipile)

*   **Unipile Config:** `UNIPILE_API_URL`, `UNIPILE_API_TOKEN`, `UNIPILE_REDIRECT_URI` exist in `.env.local`. `utils/unipileClient.js` initializes the client. **Status: Implemented.**
*   **Connect Flow:** `/api/auths/linkedin/connect/route.js` generates Unipile hosted auth link. `/api/unipile/webhooks/route.js` handles callbacks to update `profiles`. **Status: Implemented.**
*   **Token Expiry Handling:** `/api/auths/linkedin/status/route.js` checks status and updates `linkedin_status` if connection fails. Reconnection flow initiated via `/api/auths/linkedin/reconnect/route.js` using `utils/email/reconnectionEmail.js`. **Status: Implemented.**
*   **Reconnection Logic:** `/api/auths/linkedin/reconnect` generates token, sends email. `/api/reconnect` handles the link click and redirects to Unipile reconnect flow. **Status: Implemented.**
*   **Error Logging:** `console.error` used in API routes and `unipileClient.js`. **Status: Partially Implemented.**
*   **Status Check:** `/api/auths/linkedin/status/route.js` fetches status from Unipile and updates Supabase if needed. **Status: Implemented.**
*   **Settings UI:** `app/dashboard/settings/page.js` uses `useLinkedIn` context and `ButtonLinkedin.js` to display status and trigger connect/reconnect. **Status: Implemented.**

## 4. LinkedIn URL Handling

*   **URL Parsing Logic:** No specific `parseLinkedInUrl` function found in `utils/linkedin/`. Search (`/api/linkedin/search/route.js`) and invitation sending (`/lib/invitation-service.js`) seem to rely on `identifier` or `provider_id` from Unipile results or passed data. **Status: Not Implemented as planned.**
*   **Search Endpoint:** `/api/linkedin/search/route.js` accepts various parameters (keywords, IDs, names) and passes them to Unipile. **Status: Implemented (using Unipile parameters).**
*   **Invitation Sending:** `lib/invitation-service.js` uses `provider_id` or fetches profile via `identifier` before sending. **Status: Implemented (using Unipile IDs).**
*   **Rate Limiting:** `lib/invitation-service.js` implements a random delay between 2-5 minutes between invitation sends within a job. **Status: Implemented.**
*   **Data Storage:** `invitation_users` stores `linkedin_user_id` (provider_id) and `linkedin_profile_url`. `saved_profiles` stores `profile_id`. **Status: Implemented.**

## 5. Stripe Integration

*   **Plan Definition:** Only one plan (Pro) defined in `config.js` with `priceId` from `.env.local`. **Status: Partially Implemented (One Plan).** *Plan Mismatch: Original plan specified two plans.*
*   **Checkout Route:** `/api/stripe/create-checkout/route.js` exists, accepts `priceId`, handles logged-in/out users, adds trial period based on `config.js`. **Status: Implemented.**
*   **Pricing Page:** `components/Pricing.js` displays the plan from `config.js`. Used on `app/page.js`. **Status: Implemented.**
*   **Webhooks:** `/api/webhook/stripe/route.js` handles various events (`checkout.session.completed`, `customer.subscription.*`, `invoice.*`) to update `profiles` table (`has_access`, `subscription_status`, `customer_id`, etc.). **Status: Implemented.**
*   **Feature Restriction:** `utils/check-subscription.js` checks `profiles.has_access` and can initiate checkout if needed. Used in various API routes (`connect`, `search`, `invitations/send`). **Status: Implemented.**
*   **Customer Portal:** `/api/stripe/create-portal/route.js` creates Stripe Billing Portal session. Accessed from `app/dashboard/settings/page.js`. **Status: Implemented.**
*   **Stripe Plans Documentation:** `docs/` directory does not contain `stripe-plans.md`. **Status: Not Implemented.**

## 6. Additional Enhancements

*   **Campaign Analytics:** `/api/linkedin/analytics/route.js` calculates summary stats, campaign performance, and monthly trends from `invitation_jobs` and `invitation_users`. Data provided via `AnalyticsContext`. **Status: Implemented.**
*   **UI Optimization:** DaisyUI and shadcn/ui components are used throughout the dashboard. **Status: Implemented.**
*   **Route Security:** `middleware.js` protects `/dashboard/*` routes, redirecting unauthenticated users to `/signin`. **Status: Implemented.**

## Summary of Status vs. Original Plan

*   **Implemented:** Basic Auth (Email/Pass), Unipile/LinkedIn Integration (Connect, Status, Reconnect), Stripe Integration (Single Pro Plan, Checkout, Portal, Webhooks), Feature Restriction, Campaign Creation Flow (Search, Sequence, Review, Send), Basic Analytics, Core UI/Dashboard Structure.
*   **Partially Implemented/Mismatch:** Email confirmation (configured off), Google Auth (frontend exists, backend config missing), Only one Stripe plan implemented, Detailed error logging could be improved.
*   **Not Implemented:** Custom email templates, Specific LinkedIn URL parser function, Documentation files (`auth-flow.md`, `stripe-plans.md`).