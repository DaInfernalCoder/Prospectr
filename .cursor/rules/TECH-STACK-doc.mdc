---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
**Update this rule if user requested changes to the project requirement, etc.**

# Prospectr Tech Stack Document

**Last Updated:** 2025-04-04

**Note**: This document should be updated whenever there are changes to the project's tech stack or requirements to ensure it remains accurate and useful.

This document outlines the technology choices behind Prospectr, a lead finder web application that leverages AI to automate LinkedIn outreach campaigns. The goal is to provide a clear understanding of how each component contributes to the application's functionality and user experience, making it a valuable resource for developers and stakeholders. Below, we break down the tech stack into key areas with specific details, including version numbers, configurations, and links to official documentation.

---

## Frontend Technologies

The frontend of Prospectr is designed to deliver a responsive, intuitive, and visually appealing user interface using modern web technologies.

- **Next.js (v15.2.2)**  
  A React framework enabling server-side rendering (SSR), static site generation (SSG), and API routes for optimal performance and SEO. Prospectr uses Next.js with the App Router (`app/` directory).
  - **Configuration**: Uses App Router, Turbopack for development (`next dev --turbopack`), custom headers for Open Graph images, and excludes Supabase functions from webpack compilation (see `next.config.js`).
  - [Next.js Documentation](https://nextjs.org/docs)

- **React (v18.2.0)**  
  A JavaScript library for building user interfaces with a component-based architecture. Manages the component lifecycle and state in Prospectr.
  - [React Documentation](https://react.dev)

- **Tailwind CSS (v3.4.3)**  
  A utility-first CSS framework for rapid UI development, focusing on customization and responsiveness. Provides Prospectr’s styling foundation.
  - **Configuration**: Extended with custom animations (shimmer, rainbow, gradient), gradients, and DaisyUI integration (see `tailwind.config.js`). Defines custom CSS variables for colors in `app/globals.css`.
  - [Tailwind CSS Documentation](https://tailwindcss.com/docs)

- **DaisyUI (v4.12.23)**  
  A component library built on Tailwind CSS, offering pre-designed UI components for consistency and ease of development. Used for base styling and components.
  - **Configuration**: Theme set to "black" (see `config.js` and `tailwind.config.js`).
  - [DaisyUI Documentation](https://daisyui.com/docs)

- **shadcn/ui & Radix UI**  
  Provides accessible, customizable UI primitives and styled components (`components/ui/`). Includes:
    - `Button`, `Input`, `Select`, `Tabs`, `Table` (built on Radix UI primitives like `@radix-ui/react-select` v2.1.5, `@radix-ui/react-slot` v1.1.1, `@radix-ui/react-tabs` v1.1.3).
    - Configured via `components.json`.
  - [shadcn/ui Documentation](https://ui.shadcn.com/)
  - [Radix UI Documentation](https://www.radix-ui.com/docs)

- **Lucide React (v0.473.0)**  
  An icon library for React offering customizable icons. Used throughout Prospectr for visual elements. Configured via `components.json`.
  - [Lucide Documentation](https://lucide.dev/docs)

- **State Management**
    - **React Context API:** Used for global state like LinkedIn connection status (`components/contexts/LinkedInContext.js`) and analytics data (`components/contexts/AnalyticsContext.js`).
    - **Zustand (v5.0.3):** Used for managing complex state across the multi-step campaign creation flow (`app/store/campaignStore.js`), including persistence.
    - **@tanstack/react-query (v5.68.0):** Used for server state management, caching, and background updates, particularly for LinkedIn search (`app/dashboard/campaigns/new/leads/page.js`). Requires `QueryClientProvider` setup (`components/LayoutClient.js`).

- **Other Frontend Libraries:**
    - `framer-motion` (v12.5.0): For animations.
    - `react-hot-toast` (v2.4.1): For displaying notifications.
    - `react-tooltip` (v5.26.3): For tooltips.
    - `react-type-animation` (v3.2.0): For typing animations (e.g., in Hero).
    - `nextjs-toploader` (v1.6.11): Displays a loading bar during navigation.
    - `@splinetool/react-spline` (v4.0.0): For embedding Spline 3D scenes.

These technologies ensure a seamless user experience, with Next.js handling routing/rendering, React for UI logic, Tailwind/DaisyUI/shadcn for styling, and various libraries for state management and specific UI features.

---

## Backend Technologies

Prospectr’s backend leverages serverless functions (Next.js API Routes) and third-party services for data storage, authentication, payments, and LinkedIn integrations.

- **Supabase (JS v2.49.1, SSR v0.5.2)**  
  An open-source Firebase alternative providing a Postgres database, authentication, and real-time subscriptions. Prospectr uses Supabase for user authentication (Email/Password, Google via server actions), data persistence (`profiles`, `invitation_jobs`, etc.), and RLS (partially configured).
  - **Configuration**: Uses `@supabase/ssr` for server-side auth handling (`utils/supabase/client.js`, `server.js`, `middleware.js`). Connection details in `.env.local`. Schema defined partly in `schema.txt` and migrations (though migrations folder is gitignored). `supabase/config.toml` defines project settings.
  - [Supabase Documentation](https://supabase.com/docs)

- **Stripe (v13.11.0)**  
  A payment processing platform for handling subscriptions. Integrated for Prospectr’s Pro plan monetization.
  - **Configuration**: Uses `STRIPE_SECRET_KEY` and `NEXT_PUBLIC_STRIPE_PRICE_ID` from `.env.local`. Plan details in `config.js`. API interactions via `libs/stripe.js` and API routes (`/api/stripe/*`, `/api/webhook/stripe`).
  - [Stripe Documentation](https://stripe.com/docs)

- **Unipile (v1.9.2 via `unipile-node-sdk`)**  
  An API for LinkedIn integrations, enabling profile search, connection requests, and status checks.
  - **Configuration**: Uses `UNIPILE_API_URL` and `UNIPILE_API_TOKEN` from `.env.local`. Client initialized in `utils/unipileClient.js`. Used in `/api/auths/linkedin/*`, `/api/linkedin/*`, and `lib/invitation-service.js`.
  - [Unipile Documentation](https://docs.unipile.com)

- **Node.js (v20.x implied via Next.js)**  
  The runtime environment for executing JavaScript in Next.js API routes for server-side logic.
  - [Node.js Documentation](https://nodejs.org/en/docs)

These backend technologies ensure secure data management, authentication, payment processing, and efficient LinkedIn API interactions via serverless functions.

---

## Infrastructure and Deployment

Prospectr is designed for scalability and ease of deployment using modern cloud platforms.

- **Vercel**  
  A platform optimized for Next.js applications, providing hosting, domain management, automatic deployments, and serverless functions (including Cron Jobs). Prospectr is deployed on Vercel.
  - **Configuration**: Defined in `vercel.json` with cron job schedules (`/api/cron/*`) and function settings (memory/duration for Stripe webhook). Uses Vercel Analytics (`@vercel/analytics`) and Speed Insights (`@vercel/speed-insights`).
  - [Vercel Documentation](https://vercel.com/docs)

- **GitHub**  
  Used for version control and potentially CI/CD pipelines integrated with Vercel.
  - [GitHub Documentation](https://docs.github.com)

This setup supports rapid development cycles and reliable, scalable hosting.

---

## Third-Party Integrations

Prospectr integrates external services to enhance functionality beyond core features.

- **Resend (v4.1.2)**  
  An email API for sending transactional emails, specifically used for LinkedIn reconnection prompts.
  - **Configuration**: Uses `RESEND_API_KEY` from `.env.local`. Implemented in `utils/email/reconnectionEmail.js`.
  - [Resend Documentation](https://resend.com/docs)

- **Crisp (v1.0.25 via `crisp-sdk-web`)**  
  A customer support chat platform integrated for user assistance.
  - **Configuration**: Crisp ID set in `config.js`. Initialized in `components/LayoutClient.js` via the `CrispChat` component. Visibility controlled based on routes defined in `config.js`.
  - [Crisp Documentation](https://docs.crisp.chat)

- **Trackdesk**
    - An affiliate tracking and partner management platform.
    - **Configuration**: Scripts included directly in `app/layout.js` and managed via `components/TrackdeskScriptWrapper.js` to handle click tracking and potentially client reference IDs for Stripe.
    - [Trackdesk Documentation](https://trackdesk.com/docs) (Assumed URL)

These integrations improve user communication, support, and potentially affiliate tracking.

---

## Security and Performance Considerations

- **Authentication:** Handled by Supabase Auth using `@supabase/ssr` for secure server-side session management and token refreshing (`utils/supabase/middleware.js`).
- **Authorization:** RLS policies in Supabase (partially implemented/enabled) and application-level checks (`utils/check-subscription.js`) control access to data and features.
- **API Security:** Sensitive keys stored in `.env.local`. Stripe webhook signature verification implemented in `/api/webhook/stripe`.
- **Performance Optimizations:**
    - Next.js features: App Router, Server Components, Route Handlers, Turbopack (dev).
    - Image optimization via `next/image`.
    - Client component optimization: Minimal `use client`, Suspense boundaries for components with client hooks.
    - Loading states implemented for data fetching.
    - Caching via React Query.

---

## Dependencies

(List derived from `package.json` - See `package.json` file for exact versions)

- **Core Framework:** `next`, `react`, `react-dom`
- **Styling:** `tailwindcss`, `daisyui`, `autoprefixer`, `postcss`, `clsx`, `tailwind-merge`, `tailwindcss-animate`
- **UI Components/Primitives:** `@headlessui/react`, `@radix-ui/*`, `class-variance-authority`, `lucide-react` (Icons)
- **State Management:** `zustand`, `@tanstack/react-query`
- **Backend/DB:** `@supabase/ssr`, `@supabase/supabase-js`
- **APIs/Integrations:** `axios`, `stripe`, `unipile-node-sdk`, `resend`, `crisp-sdk-web`, `mailgun.js` (present but usage unclear), `nodemailer` (present but usage unclear)
- **Utilities:** `nextjs-toploader`, `react-hot-toast`, `react-tooltip`, `react-type-animation`, `@splinetool/react-spline`
- **Dev/Build:** `eslint`, `eslint-config-next`, `next-sitemap`
- **Analytics/Monitoring:** `@vercel/analytics`, `@vercel/speed-insights`, `next-plausible`

---

## Conclusion

Prospectr’s tech stack leverages modern JavaScript technologies, focusing on Next.js for the full-stack framework, Supabase for backend services, and Unipile/Stripe for key integrations. The frontend utilizes Tailwind CSS with DaisyUI and shadcn/ui for a consistent and responsive UI, while state management is handled contextually with React Context, Zustand, and React Query. Deployment is streamlined via Vercel.