---
description: this rule is useful when editing frontend
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---
**Update this rule if user requested changes to the project requirement, etc.**

# Prospectr Frontend Guidelines

**Last Updated:** 2024-04-04

**Note**: This document should be updated whenever there are changes to the project's frontend guidelines or requirements to ensure it remains accurate and useful.

## Introduction
These frontend guidelines ensure consistency, maintainability, and a high-quality user experience across the Prospectr application. They provide detailed rules and best practices for developers working on the frontend, aligning with the projectâ€™s technical stack and design philosophy.
*   **Purpose:** Maintain a cohesive design language, ensure accessibility/performance/scalability, and provide a clear reference for developers.
*   **How to Use:** Consult when developing or updating features. Adhere to the design system and best practices.

## Design System

### a. Fonts
*   **Primary Font Family:** Default sans-serif stack via Tailwind CSS (`sans` in `tailwind.config.js`). Currently uses `Inter` via `app/layout.js`.
*   **Font Sizes and Weights:** Standard Tailwind utility classes are used (e.g., `text-4xl`, `font-bold`). Refer to `app/globals.css` and component implementations for specific usage (e.g., `h1` often uses `text-4xl font-bold`).
*   **Line Heights:** Default Tailwind line heights (e.g., `leading-normal`, `leading-tight`).

### b. Color Palette
*   **Theme:** DaisyUI "black" theme configured in `tailwind.config.js`.
*   **CSS Variables:** Custom variables defined in `app/globals.css` under `:root` provide core colors (e.g., `--background`, `--foreground`, `--primary`, `--destructive`, `--border`, `--input`, `--ring`). These map to HSL values.
*   **Usage:**
    *   Use DaisyUI component classes (`btn-primary`, `alert-error`) or Tailwind utility classes (`bg-primary`, `text-destructive-foreground`).
    *   Utilize the CSS variables for consistency (e.g., `bg-background`, `text-foreground`).
    *   Ensure WCAG AA contrast ratios.
*   **Customization:** Modify CSS variables in `app/globals.css` or update the DaisyUI theme in `tailwind.config.js`. The primary color seems to be a red/purple gradient in many places (`components/Hero.js`, `components/Problem.js`, `components/CTA.js`).

### c. Spacing and Layout
*   **Spacing Scale:** Standard Tailwind spacing scale (multiples of 4px). Use utility classes like `p-4`, `m-2`, `gap-6`.
*   **Layout Conventions:**
    *   **Containers:** Use `container mx-auto px-4` (or similar padding) for centered, max-width content (e.g., `max-w-7xl`).
    *   **Flexbox & Grid:** Use `flex`, `grid`, and related utilities (`gap-x`, `items-center`, `grid-cols-x`) for layout.
*   **Padding/Margins:** Apply consistent spacing using Tailwind utilities (e.g., `py-12` for section vertical padding, `p-6` for card padding).
*   **Breakpoints:** Mobile-first approach using Tailwind prefixes (`sm:`, `md:`, `lg:`, `xl:`, `2xl:`).

### d. UI Components
*   **Primary Libraries:**
    *   **DaisyUI:** Configured in `tailwind.config.js`. Used for base components like `btn`, `card`, `input`, `modal`, `alert`.
    *   **shadcn/ui:** Components like `Button`, `Input`, `Select`, `Tabs`, `Table` are present in `components/ui/` and configured via `components.json`. These are built on Radix UI primitives.
*   **Custom Components:** Located in `components/`. Follow PascalCase naming (e.g., `ButtonLead.js`, `FeaturesAccordion.js`).
*   **Guidelines for New Components:**
    *   **Structure:** Follow existing patterns. Export the main component.
    *   **Styling:** Use Tailwind CSS utility classes. Leverage `clsx` and `tailwind-merge` (via `lib/utils.js`) for conditional/merged classes, especially in shadcn/ui components.
    *   **Accessibility:** Use semantic HTML, ARIA attributes, and ensure focus states (often handled by shadcn/ui components).
    *   **Props:** Accept standard HTML attributes and necessary custom props.

### e. Icons
*   **Icon Library:** Lucide React (`lucide-react`), specified in `components.json` and `package.json`.
*   **Usage:**
    *   Import specific icons: `import { User, Search } from "lucide-react";`
    *   Render with Tailwind classes for size/color: `<Search className="h-5 w-5 text-muted-foreground" />`
    *   Standard sizes: `h-4 w-4` (16px), `h-5 w-5` (20px), `h-6 w-6` (24px).
    *   Add `aria-hidden="true"` for decorative icons.

## Best Practices

*   **Accessibility (A11y):**
    *   Use semantic HTML (`<nav>`, `<main>`, `<button>`).
    *   Ensure keyboard navigation and visible focus states (Tailwind `focus:ring`, shadcn/ui defaults).
    *   Provide `alt` text for images (`next/image`).
    *   Use ARIA attributes where necessary.
    *   Check color contrast.
*   **Performance:**
    *   **Images:** Use `next/image` for optimization (automatic format, sizes, lazy loading).
    *   **Components:** Minimize `'use client'` directive. Prefer Server Components where possible. Fetch data server-side when feasible (e.g., in page components).
    *   **Client Hooks:** Wrap components using client hooks (`useSearchParams`, `usePathname`, `useState`, `useEffect`) in `<Suspense>` with a fallback (as seen in `app/layout.js`, `app/dashboard/page.js`, etc.).
    *   **Dynamic Imports:** Use `next/dynamic` for large/non-critical components: `const HeavyComponent = dynamic(() => import('./HeavyComponent'), { ssr: false });` (Example: `Spline` component in `components/ui/splite.jsx`).
    *   **Loading States:** Provide visual feedback during data fetching (e.g., spinners in `app/dashboard/analytics/page.js`).
*   **State Management:**
    *   Use `useState` and `useEffect` for local component state.
    *   Use React Context API (`components/contexts/`) for global state like LinkedIn status (`LinkedInContext`) and analytics data (`AnalyticsContext`).
    *   Use Zustand (`app/store/campaignStore.js`) for managing complex state across the campaign creation flow, with persistence.
    *   Use `@tanstack/react-query` for server state management, caching, and background updates (as seen in `app/dashboard/campaigns/new/leads/page.js`). Wrap the app in `QueryClientProvider` (`components/LayoutClient.js`).
*   **Responsive Design:**
    *   Employ Tailwind's mobile-first approach (`md:`, `lg:` prefixes).
    *   Test layouts across standard breakpoints.
*   **Error Handling:**
    *   Use `try...catch` blocks for API calls.
    *   Display user-friendly error messages using `react-hot-toast` (configured in `LayoutClient.js`).
    *   Utilize `app/error.js` for catching rendering errors.

## Updating the Guidelines
*   **Process:** Propose changes via PRs. Discuss significant changes in team reviews.
*   **Documentation:** Keep this document updated with any new patterns, libraries, or decisions.

This document provides a framework for building the Prospectr frontend, ensuring consistency and quality using Next.js, React, Tailwind CSS, DaisyUI, shadcn/ui, Lucide Icons, Zustand, and React Query.