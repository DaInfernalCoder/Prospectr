---
description: Implementation for Campaign Message Editor Component
globs: ["components/dashboard/CampaignEditor*", "app/dashboard/campaigns/**"]
alwaysApply: false
---

# Campaign Message Editor

## Component Overview
The Campaign Message Editor is a critical component that allows users to create personalized connection request messages and follow-up messages for LinkedIn campaigns.

## UI Implementation

```mermaid
flowchart TD
    A[CampaignEditor] --> B[TemplateSelector]
    A --> C[MessageEditor]
    A --> D[VariableButtons]
    A --> E[CharacterCounter]
    A --> F[FollowUpToggle]
    F -->|Enabled| G[FollowUpEditor]
    A --> H[SchedulingOptions]
    A --> I[SaveButton]
```

## Key Features

### Template Selection
- Predefined message templates
- Custom template creation
- Template categorization (cold outreach, warm intro, etc.)
- Template preview

### Message Editor
- Rich text editing capabilities
- Variable insertion at cursor position
- Character limit enforcement (300 chars)
- Real-time validation
- Formatting options (limited by LinkedIn)

### Variable System
- Standard variables:
  - `{{firstName}}` - Recipient's first name
  - `{{lastName}}` - Recipient's last name
  - `{{company}}` - Recipient's company
  - `{{position}}` - Recipient's job title
  - `{{industry}}` - Recipient's industry
  - `{{location}}` - Recipient's location
  - `{{mutual}}` - Number of mutual connections
- Custom variables based on search parameters
- Variable preview with sample data

### Follow-Up Message
- Toggle to enable/disable
- Separate editor for follow-up message
- Delay configuration (days/hours)
- Character limit enforcement
- Variable support matching main message

### Scheduling Options
- Start date/time picker
- End date option
- Daily sending window
- Maximum connections per day
- Account tier-based limits

## Technical Implementation

### State Management
```javascript
const [message, setMessage] = useState('');
const [followUp, setFollowUp] = useState({
  enabled: false,
  message: '',
  delay: 86400 // 24 hours in seconds
});
const [template, setTemplate] = useState(null);
const [scheduling, setScheduling] = useState({
  startDate: new Date(),
  endDate: null,
  dailyWindow: {
    start: '9:00',
    end: '17:00'
  },
  maxPerDay: 20
});
```

### Character Counter
```javascript
const calculateRemainingChars = (text) => {
  // Process variables to count them correctly
  const processedText = text.replace(/\{\{[^}]+\}\}/g, 'X');
  return 300 - processedText.length;
};
```

### Variable Insertion
```javascript
const insertVariable = (variable) => {
  const cursorPosition = editorRef.current.selectionStart;
  const textBefore = message.substring(0, cursorPosition);
  const textAfter = message.substring(cursorPosition);
  setMessage(`${textBefore}{{${variable}}}${textAfter}`);
};
```

### Template Application
```javascript
const applyTemplate = (templateId) => {
  const selectedTemplate = templates.find(t => t.id === templateId);
  if (selectedTemplate) {
    setMessage(selectedTemplate.content);
    if (selectedTemplate.followUp) {
      setFollowUp({
        enabled: true,
        message: selectedTemplate.followUp.content,
        delay: selectedTemplate.followUp.delay || 86400
      });
    }
  }
};
```

## Data Models

### Template
```javascript
{
  id: uuid,
  userId: string,
  name: string,
  category: string,
  content: string,
  followUp: {
    content: string,
    delay: number
  },
  createdAt: timestamp,
  updatedAt: timestamp
}
```

### Campaign Message
```javascript
{
  campaignId: uuid,
  content: string,
  variables: string[],
  followUp: {
    enabled: boolean,
    content: string,
    delay: number
  },
  scheduling: {
    startDate: timestamp,
    endDate: timestamp,
    dailyWindow: {
      start: string,
      end: string
    },
    maxPerDay: number
  }
}
```

## Best Practices

### Message Content Guidelines
- Keep messages concise and personalized
- Focus on value proposition
- Include clear call-to-action
- Avoid spam triggers:
  - Excessive punctuation
  - ALL CAPS text
  - Too many links
  - Salesy language
- Use variables naturally in sentence flow
- Test messages with different profiles

### Technical Considerations
- Handle variable fallbacks for missing data
- Implement proper error handling
- Provide real-time feedback on message quality
- Ensure responsive design for mobile usage
- Cache draft messages to prevent loss
- Implement undo/redo functionality

## Testing Scenarios
1. Character limit enforcement:
   - Test with various message lengths
   - Verify variable expansion handling
   - Check error states when limit exceeded

2. Variable insertion:
   - Test insertion at different cursor positions
   - Verify variable rendering in preview
   - Check handling of missing variable data

3. Template functionality:
   - Test template selection and application
   - Verify custom template creation
   - Check template categorization

4. Follow-up configuration:
   - Test enabling/disabling follow-up
   - Verify delay configuration
   - Check follow-up message validation
