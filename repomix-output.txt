This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.cursor/
  rules/
    APP-FLOW-doc.mdc
    BACKEND-STRUCTURES-doc.mdc
    code-format-sql.mdc
    Coding_Guidelines.mdc
    database-create-migration.mdc
    database-functions.mdc
    database-rls-policies.mdc
    edge-functions.mdc
    FRONTEND-GUIDELINES.mdc
    IMPLEMENTATION-PLAN-doc.mdc
    nextjs-supabase-auth.mdc
    PRD-doc.mdc
    TECH-STACK-doc.mdc
.million/
  store.json
app/
  api/
    auths/
      linkedin/
        account/
          route.js
        check-subscription/
          route.js
        connect/
          route.js
        reconnect/
          route.js
        status/
          route.js
    cron/
      check-invitations/
        route.js
      check-responses/
        route.js
    lead/
      route.js
    linkedin/
      analytics/
        route.js
      invitations/
        send/
          route.js
        status/
          [jobId]/
            route.js
      profile/
        route.js
      recommendations/
        route.js
      saved_profile/
        [id]/
          route.js
        route.js
      search/
        parameters/
          route.js
        route.js
    reconnect/
      route.js
    stripe/
      create-checkout/
        route.js
      create-portal/
        route.js
      customer-portal/
        route.js
    unipile/
      webhooks/
        route.js
    users/
      route.js
    webhook/
      stripe/
        route.js
  auth/
    callback/
      route.js
  blog/
    _assets/
      components/
        Avatar.js
        BadgeCategory.js
        CardArticle.js
        CardCategory.js
        HeaderBlog.js
      content.js
    [articleId]/
      page.js
    author/
      [authorId]/
        page.js
    category/
      [categoryId]/
        page.js
    layout.js
    page.js
  components/
    SectionBiography.tsx
    UpdateFrequencyInfo.jsx
  dashboard/
    analytics/
      page.js
    campaigns/
      [id]/
        page.js
      new/
        leads/
          page.js
        review/
          page.js
        sequence/
          page.js
        page.js
      page.js
    settings/
      page.js
    layout.js
    page.js
  privacy-policy/
    page.js
  signin/
    layout.js
    page.js
  signup/
    layout.js
    page.js
    SignupForm.js
  store/
    campaignStore.js
  survey/
    _assets/
      components/
        SurveyTable.js
    page.js
  testPage/
    page.jsx
  thankyou/
    page.js
  tos/
    page.js
  utils/
    linkedin/
      searchParameters.js
  error.js
  globals.css
  layout.js
  not-found.js
  page.js
components/
  contexts/
    AnalyticsContext.js
    LinkedInContext.js
  dashboard/
    DashboardShell.js
  ui/
    button.js
    hero-section-dark.jsx
    hero-video-dialog.jsx
    input.js
    pricing-creative.jsx
    rainbow-button.jsx
    select.js
    sidebar.jsx
    splite.jsx
    table.jsx
    tabs.js
  BetterIcon.js
  ButtonAccount.js
  ButtonCheckout.js
  ButtonGradient.js
  ButtonLead.js
  ButtonLinkedin.js
  ButtonPopover.js
  ButtonSignin.js
  ButtonSupport.js
  CompanyLogo.js
  ContactSection.js
  CTA.js
  FAQ.js
  FeaturesAccordion.js
  FeaturesListicle.js
  Footer.js
  Header.js
  Hero.js
  LayoutClient.js
  Modal.js
  OtherTools.js
  Pricing.js
  Problem.js
  SectionBiography.tsx
  Testimonial1Small.js
  TestimonialRating.js
  Testimonials1.js
  Testimonials11.js
  Testimonials3.js
  TestimonialsAvatars.js
  TrackdeskScriptWrapper.js
  WithWithout.js
docs/
  linkedin-integration.md
lib/
  analytics-service.js
  invitation-service.js
  utils.js
libs/
  api.js
  gpt.js
  seo.js
  stripe.js
  supabase-client.js
models/
  plugins/
    toJSON.js
  Lead.js
  User.js
supabase/
  .gitignore
  config.toml
types/
  supabase.d.ts
utils/
  email/
    reconnectionEmail.js
  supabase/
    client.js
    getUser.js
    middleware.js
    server.js
  action.js
  check-subscription.js
  get-is-subscription.js
  stripe-client.js
  unipileClient.js
.cursorrules
.env.local
.eslintrc.json
.gitignore
components.json
config.js
jsconfig.json
middleware.js
next-sitemap.config.js
next.config.js
package.json
postcss.config.js
README.md
rest.http
schema.txt
tailwind.config.js
tsconfig.json
vercel.json

================================================================
Files
================================================================

================
File: .cursor/rules/APP-FLOW-doc.mdc
================
---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---
**Update this rule if user requested changes to the project requirement, etc.**

# Prospectr App Flow Document

**Last Updated:** 2025-04-04

**Note**: This document should be updated whenever there are changes to the project's application flow or requirements to ensure it remains accurate and useful.

This document outlines the primary user flows within the Prospectr application based on the current codebase.

## Onboarding and Sign-In/Sign-Up

When users first visit the Prospectr web application, they land on the home page located at `app/page.js`. This page serves as the entry point with a clean, professional design featuring a hero section (`components/Hero.js`) that explains Prospectr as an AI-powered LinkedIn prospecting tool for finding and connecting with leads. The color scheme uses the "black" DaisyUI theme defined in `config.js`, ensuring a sleek and modern look. The home page includes clear calls-to-action: a "Sign In" button (`components/ButtonSignin.js`) directing users to `app/signin/page.js` and a "Sign Up" button leading to `app/signup/page.js`. Additional sections highlight features (`components/FeaturesAccordion.js`), pricing (`components/Pricing.js` linking to `#pricing`), testimonials (`components/Testimonials3.js`, `components/Testimonials1.js`), FAQ (`components/FAQ.js`), and contact info (`components/ContactSection.js`). Users can also navigate to informational pages via the footer (`components/Footer.js`): Blog at `app/blog/page.js`, Privacy Policy at `app/privacy-policy/page.js`, and Terms of Service at `app/tos/page.js`.

The sign-up page at `app/signup/page.js` utilizes the `app/signup/SignupForm.js` component, offering a straightforward registration process using Supabase Auth. Users enter their email and password or sign up via Google OAuth, triggered by `utils/action.js` with `signInWithGoogle`. Upon successful registration, a confirmation email is sent (if `auth.email.enable_confirmations = true` in `supabase/config.toml`), and users are typically redirected to the dashboard at `app/dashboard/page.js` via the `/auth/callback` route (`app/auth/callback/route.js`). If registration fails due to an invalid email or password, an error message appears via `react-hot-toast`, keeping users on the sign-up page.

The sign-in page at `app/signin/page.js` allows users to log in with their email and password or Google OAuth. After entering credentials, Supabase Auth verifies them, and upon success, users are redirected to the dashboard at `app/dashboard/page.js` via the `/auth/callback` route. If authentication fails, an error message displays via `react-hot-toast`, and users remain on the sign-in page. The middleware at `middleware.js` ensures session persistence using `@supabase/ssr`, refreshing tokens if expired, and redirects unauthenticated users from protected routes (like `/dashboard/*`) to `/signin`.

## Main Dashboard

After signing in, users arrive at the dashboard at `app/dashboard/page.js`, the central hub for all activities. The dashboard features a modern, responsive layout using `components/dashboard/DashboardShell.js`, styled with Tailwind CSS and DaisyUI. A sidebar or top navigation menu provides access to key sections: Campaigns at `app/dashboard/campaigns/page.js`, Analytics at `app/dashboard/analytics/page.js`, and Settings at `app/dashboard/settings/page.js`. The main content area displays an overview, including recent campaigns, key metrics like total connections and response rates (fetched via `useAnalytics` context), and notifications such as LinkedIn connection status or subscription reminders. Users can navigate to any section by clicking the respective menu item, instantly transitioning to the chosen page.

## Campaigns Section

The campaigns page at `app/dashboard/campaigns/page.js` lists all user campaigns fetched via the `useAnalytics` context. Each campaign shows its name (or Job ID), status (processing, completed, pending), and metrics like total invitations and accepted connections. A "New Campaign" button takes users to `app/dashboard/campaigns/new/leads/page.js` (via the redirect in `app/dashboard/campaigns/new/page.js`). Clicking a campaign row (or potentially a details button, though not explicitly shown) directs users to its details page at `app/dashboard/campaigns/[id]/page.js`.

The new campaign flow starts at `app/dashboard/campaigns/new/leads/page.js`. Users search LinkedIn profiles using a search interface powered by `app/api/linkedin/search/route.js`. The search utilizes `@tanstack/react-query` for data fetching and state management. Users select profiles by checking boxes next to search results, storing selections in the `useCampaignStore` (Zustand). They then proceed to the sequence setup at `app/dashboard/campaigns/new/sequence/page.js`. Here, they craft an optional connection message (max 300 chars) and an optional follow-up message (max 1000 chars) using textareas, with variable support (`{{name}}`, `{{company}}`, `{{position}}`). They also provide a template name for reference. A review step at `app/dashboard/campaigns/new/review/page.js` lets users confirm the number of leads, template name, and message content before launching. Upon submission, the campaign is created via `app/api/linkedin/invitations/send/route.js` using the Unipile API. This API queues the job and returns a `jobId`. The frontend (`review/page.js`) shows a success message and options to start a new campaign or go to the dashboard. Campaign progress can be monitored via `/api/linkedin/invitations/status/[jobId]/route.js`.

The campaign details page at `app/dashboard/campaigns/[id]/page.js` displays information about a specific campaign (currently using mock data). It shows the campaign name, status, start date, prospect count, progress, replies, and reply rate. Action buttons allow users to pause, resume, or delete the campaign (Note: API endpoints for these actions are not explicitly defined in the provided code, but status tracking exists). Users can return to the campaigns list by clicking the "Back to Campaigns" button.

## Settings and Account Management

The settings page at `app/dashboard/settings/page.js` lets users manage their account. It includes:
*   **Subscription Management:** Displays the current plan (fetched via `/api/users`), connection limits (from `config.js`), and provides a button (`components/ButtonCheckout.js`) to subscribe to the Pro plan or a "Manage Billing" button (using `/api/stripe/create-portal/route.js`) if already subscribed.
*   **LinkedIn Integration:** Shows the connection status using the `useLinkedIn` context (`components/contexts/LinkedInContext.js`) and provides a button (`components/ButtonLinkedin.js`) to connect (`/api/auths/linkedin/connect/route.js`) or reconnect (`/api/auths/linkedin/reconnect/route.js`) their LinkedIn account via Unipile.
*   **Account Settings:** Currently indicates that settings are managed via the authentication provider.

## Analytics

The analytics page at `app/dashboard/analytics/page.js` provides detailed insights into prospecting activities. It displays overall performance metrics (Connection Rate, Total Connections, Total Invitations, Active Campaigns) and campaign-specific data using the `useAnalytics` context (`components/contexts/AnalyticsContext.js`), which fetches data from `app/api/linkedin/analytics/route.js`. Visualizations include progress bars for campaigns and a table for campaign performance. Users can refresh data and filter by timeframe (though filtering logic isn't fully implemented in the provided code). Users can return to the dashboard via the navigation menu in `DashboardShell.js`.

## Upgrade / Pricing

Users view subscription plans defined in `config.js` (currently one Pro plan at $15/month) on the main landing page (`app/page.js` using `components/Pricing.js`) and within the settings page (`app/dashboard/settings/page.js`). The `components/ButtonCheckout.js` component handles the checkout process:
1.  If the user is not logged in, it redirects them to `/signup?checkout=pending`, storing the plan ID in localStorage.
2.  If the user is logged in, it calls `/api/stripe/create-checkout/route.js` to get a Stripe session URL and redirects the user.
After successful payment through Stripe, users are redirected to `/dashboard?checkout=success`. Subscription status (`has_access`, `subscription_tier`, etc.) is updated in the `profiles` table via webhooks handled by `/api/webhook/stripe/route.js`. Subscription management (canceling, updating payment methods) is handled via the Stripe Customer Portal accessed through `/api/stripe/create-portal/route.js` from the settings page.

## Blog and Informational Pages

The blog page at `app/blog/page.js` lists articles defined in `app/blog/_assets/content.js`, rendered using components like `CardArticle.js`. Each article links to its page at `app/blog/[articleId]/page.js`, displaying full content with author info (`Avatar.js`) and category badges (`BadgeCategory.js`). Navigation includes links to author pages (`app/blog/author/[authorId]/page.js`) and category pages (`app/blog/category/[categoryId]/page.js`). The layout uses `app/blog/layout.js` with a dedicated header (`HeaderBlog.js`). The privacy policy at `app/privacy-policy/page.js` and terms of service at `app/tos/page.js` are static pages accessible from the footer, providing legal information.

## Survey and Thank You Pages

The survey page at `app/survey/page.js` is currently a placeholder. If implemented, it would collect user feedback, potentially using components like `app/survey/_assets/components/SurveyTable.js`. After submission, users are redirected to the thank you page at `app/thankyou/page.js`, acknowledging their input with a return link to the dashboard.

## Error States and Alternate Paths

The app handles errors with custom pages: `app/error.js` for general client-side errors and `app/not-found.js` for 404s. If users access a protected route (like `/dashboard/*`) without authentication, the middleware (`middleware.js`) redirects them to `/signin`. Failed API calls display error messages using `react-hot-toast`. Subscription checks via `utils/check-subscription.js` redirect non-subscribers to `#pricing` or initiate a checkout session via `/api/stripe/create-checkout`, ensuring access control based on the `profiles.has_access` field. LinkedIn connection errors are handled within components (e.g., disabling search if not connected).

## Conclusion and Overall App Journey

The journey through Prospectr starts with a professional home page guiding users to sign up or sign in. After authentication via Supabase (Email/Password or Google), the dashboard (`DashboardShell.js`) provides a central hub for managing campaigns, viewing analytics (powered by `AnalyticsContext`), and adjusting settings. The campaign creation flow guides users through lead selection (LinkedIn search via Unipile), message sequencing, and review before launching automated outreach jobs tracked via Supabase tables. Settings allow users to connect their LinkedIn account (via Unipile) and manage their Stripe subscription. The blog provides resources, while static pages cover legal information. Navigation is seamless, and error handling/access control ensures a smooth user experience.

================
File: .cursor/rules/BACKEND-STRUCTURES-doc.mdc
================
---
description: 
globs: 
alwaysApply: false
---
# Prospectr Backend Structure Document

**Last Updated:** 2024-04-04

**Note**: This document reflects the current implementation status based on the actual database schema and codebase structure. Update it whenever necessary

## Database Overview

The Prospectr database is implemented in Supabase with the following schemas:

- **auth** (1624 kB): Contains 16 tables for Supabase authentication
- **public** (296 kB): Contains 8 tables for application data
- **realtime** (136 kB): Contains 8 tables for Supabase realtime features
- **storage** (144 kB): Contains 5 tables for file storage
- **supabase_functions** (64 kB): Contains 2 tables for edge functions
- **net** (48 kB): Contains 2 tables for networking features
- **vault** (24 kB): Contains 1 table for secure storage
- **extensions**, **graphql**, **graphql_public**: Empty schemas (0 bytes)

## Public Schema Tables

### `profiles`
Primary user profile table linking Supabase Auth with application data.

**Columns:**
- `id` uuid PRIMARY KEY (auto-generated)
- `created_at` timestamptz NOT NULL DEFAULT now()
- `user_id` uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id)
- `linkedin_token` text
- `linkedin_status` boolean DEFAULT false
- `message_quota` integer DEFAULT 50 (Daily message limit)
- `stripe_customer_id` text
- `subscription_tier` enum DEFAULT 'FREE'
- `oauth_state` text
- `unipile_account_id` text
- `reconnect_token` text
- `reconnect_expires_at` date
- `customer_id` text
- `price_id` text
- `has_access` boolean DEFAULT false
- `subscription_id` text
- `subscription_status` text
- `trial_ends_at` timestamptz
- `cancel_at_period_end` timestamptz
- `subscription_created_at` timestamptz
- `last_payment_at` timestamptz
- `canceled_at` timestamptz
- `payment_failed` boolean DEFAULT false

### `invitation_jobs`
Tracks bulk LinkedIn invitation campaigns.

**Columns:**
- `job_id` text PRIMARY KEY DEFAULT ''
- `created_at` timestamptz NOT NULL DEFAULT now()
- `user_id` uuid REFERENCES auth.users(id)
- `status` text NOT NULL
- `total_invitations` integer
- `invitations_sent` integer DEFAULT 0
- `invitations_failed` integer DEFAULT 0
- `started_at` timestamptz
- `last_updated` timestamptz
- `completed_at` timestamptz
- `error_message` text
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `template_id` uuid REFERENCES invitation_templates(id)
- `message` text
- `name` text

### `invitation_users`
Tracks individual LinkedIn connection requests within campaigns.

**Columns:**
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `created_at` timestamptz NOT NULL DEFAULT now()
- `linkedin_user_id` text
- `linkedin_profile_url` text
- `invitation_status` text DEFAULT 'pending'
- `invitation_sent_at` timestamptz DEFAULT now()
- `invitation_accepted_at` timestamptz
- `follow_up_sent_at` timestamptz
- `updated_at` timestamptz DEFAULT now()
- `job_id` text NOT NULL REFERENCES invitation_jobs(job_id)
- `has_responded` boolean DEFAULT false
- `first_response_at` timestamptz

### `invitation_templates`
Stores message templates for connection requests and follow-ups.

**Columns:**
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `created_at` timestamptz NOT NULL DEFAULT now()
- `user_id` uuid REFERENCES auth.users(id)
- `name` text NOT NULL
- `follow_up_message` text NOT NULL
- `updated_at` timestamptz DEFAULT now()

### `linkedin_status_updates`
Logs LinkedIn connection status changes.

**Columns:**
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `user_id` uuid NOT NULL REFERENCES auth.users(id)
- `connection_id` uuid NOT NULL
- `status` text NOT NULL
- `account_id` text
- `timestamp` timestamptz DEFAULT now()
- `metadata` jsonb DEFAULT '{}'

### `saved_profiles`
Stores saved LinkedIn profiles for future reference.

**Columns:**
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `created_at` timestamptz NOT NULL DEFAULT now()
- `profile_data` jsonb NOT NULL
- `tags` text[]
- `notes` text
- `profile_id` text NOT NULL
- `user_id` uuid REFERENCES auth.users(id)

### `linkedin_connections`
Tracks LinkedIn connections (appears to be legacy/unused).

**Columns:**
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `created_at` timestamptz NOT NULL DEFAULT now()
- `user_id` uuid REFERENCES auth.users(id)
- `profile_id` text
- `name` text
- `headline` text
- `status` enum

### `leads`
Simple table for capturing lead information.

**Columns:**
- `id` uuid PRIMARY KEY DEFAULT gen_random_uuid()
- `email` text
- `created_at` timestamptz NOT NULL DEFAULT timezone('utc'::text, now())

## Table Relationships

### Foreign Key Relationships
- `profiles.user_id` → `auth.users.id`
- `invitation_jobs.user_id` → `auth.users.id`
- `invitation_jobs.template_id` → `invitation_templates.id`
- `invitation_templates.user_id` → `auth.users.id`
- `invitation_users.job_id` → `invitation_jobs.job_id`
- `linkedin_status_updates.user_id` → `auth.users.id`
- `saved_profiles.user_id` → `auth.users.id`
- `linkedin_connections.user_id` → `auth.users.id`

### Custom Types
- `subscription_tier`: Enum type (FREE, PRO, PREMIUM)
- Status enum for linkedin_connections table

## Table Usage Statistics

Based on current data:
- `invitation_jobs`: 4 rows, 81920 bytes
- `profiles`: 8 rows, 65536 bytes
- `invitation_templates`: 3 rows, 32768 bytes
- `invitation_users`: 6 rows, 32768 bytes
- Other tables: 0 rows currently

## Security and Access Control

### Row Level Security (RLS)
RLS policies should be implemented for:
- `profiles`: Restrict access to user's own profile
- `invitation_jobs`: Restrict access to user's own jobs
- `invitation_users`: Restrict access based on job ownership
- `invitation_templates`: Restrict access to user's own templates
- `linkedin_status_updates`: Restrict access to user's own updates
- `saved_profiles`: Restrict access to user's own saved profiles
- `linkedin_connections`: Restrict access to user's own connections
- `leads`: Allow public insertion, restrict reading

### Authentication Flow
- Uses Supabase Auth with email/password and potentially OAuth providers
- Session management via `@supabase/ssr`
- Profile creation triggered on user signup
- LinkedIn connection managed separately via Unipile

## API Routes

The following API routes interact with the database:

### Authentication
- `/api/auth/*`: Supabase authentication endpoints
- `/api/auths/linkedin/connect`: LinkedIn connection via Unipile
- `/api/auths/linkedin/status`: Check LinkedIn connection status
- `/api/auths/linkedin/reconnect`: Initiate LinkedIn reconnection

### Campaign Management
- `/api/linkedin/invitations/send`: Create new invitation campaigns
- `/api/linkedin/invitations/status/[jobId]`: Check campaign status
- `/api/linkedin/search`: Search LinkedIn profiles
- `/api/linkedin/saved_profile`: Save/manage LinkedIn profiles

### Subscription Management
- `/api/stripe/create-checkout`: Create Stripe checkout session
- `/api/stripe/create-portal`: Access Stripe customer portal
- `/api/webhook/stripe`: Handle Stripe webhook events

### Background Jobs
- `/api/cron/check-invitations`: Update invitation statuses
- `/api/cron/check-responses`: Check for LinkedIn responses

## Conclusion

This document reflects the current state of the Prospectr backend based on the actual Supabase database schema. The structure supports the core features of LinkedIn prospecting, campaign management, and subscription handling, with appropriate security measures and monitoring capabilities.

================
File: .cursor/rules/code-format-sql.mdc
================
---
description: 
globs: 
alwaysApply: false
---
# Postgres SQL Style Guide

## General

- Use lowercase for SQL reserved words to maintain consistency and readability.
- Employ consistent, descriptive identifiers for tables, columns, and other database objects.
- Use white space and indentation to enhance the readability of your code.
- Store dates in ISO 8601 format (`yyyy-mm-ddThh:mm:ss.sssss`).
- Include comments for complex logic, using '/* ... */' for block comments and '--' for line comments.

## Naming Conventions

- Avoid SQL reserved words and ensure names are unique and under 63 characters.
- Use snake_case for tables and columns.
- Prefer plurals for table names
- Prefer singular names for columns.

## Tables

- Avoid prefixes like 'tbl_' and ensure no table name matches any of its column names.
- Always add an `id` column of type `identity generated always` unless otherwise specified.
- Create all tables in the `public` schema unless otherwise specified.
- Always add the schema to SQL queries for clarity.
- Always add a comment to describe what the table does. The comment can be up to 1024 characters.

## Columns

- Use singular names and avoid generic names like 'id'.
- For references to foreign tables, use the singular of the table name with the `_id` suffix. For example `user_id` to reference the `users` table
- Always use lowercase except in cases involving acronyms or when readability would be enhanced by an exception.

#### Examples:

```sql
create table books (
  id bigint generated always as identity primary key,
  title text not null,
  author_id bigint references authors (id)
);
comment on table books is 'A list of all the books in the library.';
```


## Queries

- When the query is shorter keep it on just a few lines. As it gets larger start adding newlines for readability
- Add spaces for readability.

Smaller queries:


```sql
select *
from employees
where end_date is null;

update employees
set end_date = '2023-12-31'
where employee_id = 1001;
```

Larger queries:

```sql
select
  first_name,
  last_name
from
  employees
where
  start_date between '2021-01-01' and '2021-12-31'
and
  status = 'employed';
```


### Joins and Subqueries

- Format joins and subqueries for clarity, aligning them with related SQL clauses.
- Prefer full table names when referencing tables. This helps for readability.

```sql
select
  employees.employee_name,
  departments.department_name
from
  employees
join
  departments on employees.department_id = departments.department_id
where
  employees.start_date > '2022-01-01';
```

## Aliases

- Use meaningful aliases that reflect the data or transformation applied, and always include the 'as' keyword for clarity.

```sql
select count(*) as total_employees
from employees
where end_date is null;
```


## Complex queries and CTEs

- If a query is extremely complex, prefer a CTE.
- Make sure the CTE is clear and linear. Prefer readability over performance.
- Add comments to each block.

```sql
with department_employees as (
  -- Get all employees and their departments
  select
    employees.department_id,
    employees.first_name,
    employees.last_name,
    departments.department_name
  from
    employees
  join
    departments on employees.department_id = departments.department_id
),
employee_counts as (
  -- Count how many employees in each department
  select
    department_name,
    count(*) as num_employees
  from
    department_employees
  group by
    department_name
)
select
  department_name,
  num_employees
from
  employee_counts
order by
  department_name;
```

================
File: .cursor/rules/Coding_Guidelines.mdc
================
---
description: 
globs: 
alwaysApply: true
---
# Cursor Development Rules & AI Collaboration Guide
 
## 📜 Core Philosophy
 
1.  **Simplicity:** Prioritize simple, clear, and maintainable solutions. Avoid unnecessary complexity or over-engineering.
2.  **Iterate:** Prefer iterating on existing, working code rather than building entirely new solutions from scratch, unless fundamentally necessary or explicitly requested.
3.  **Focus:** Concentrate efforts on the specific task assigned. Avoid unrelated changes or scope creep.
4.  **Quality:** Strive for a clean, organized, well-tested, and secure codebase.
5.  **Collaboration:** This document guides both human developers and the AI assistant for effective teamwork.
 
## 📚 Project Context & Understanding
 
1.  **Documentation First:**
    *   **Always** check for and thoroughly review relevant project documentation *before* starting any task. This includes:
        *   `.cursor/rules/APP-FLOW-doc.mdc` (Application flow and routing documentation)
        *   `.cursor/rules/BACKEND-STRUCTURES-doc.mdc` (Backend architecture and database schema)
        *   `.cursor/rules/PRD-doc.mdc` (Product Requirements Document)
        *   `.cursor/rules/TECH-STACK-doc.mdc` (Technology stack and dependencies)
        *   `.cursor/rules/IMPLEMENTATION-PLAN-doc.mdc` (Technical specifications and implementation steps)
        *   `.cursor/rules/FRONTEND-GUIDELINES.mdc` (Frontend development standards)
        *   `.cursor/rules/code-format-sql.mdc` (SQL coding standards)
        *   `.cursor/rules/database-create-migration.mdc` (Database migration guidelines)
        *   `.cursor/rules/database-functions.mdc` (Database functions documentation)
        *   `.cursor/rules/database-rls-policies.mdc` (Row Level Security policies)
        *   `.cursor/rules/edge-functions.mdc` (Edge functions implementation guide)
        *   `.cursor/rules/nextjs-supabase-auth.mdc` (Authentication implementation guide)
    *   If documentation is missing, unclear, or conflicts with the request, **ask for clarification**.
2.  **Architecture Adherence:**
    *   Understand and respect module boundaries, data flow, system interfaces, and component dependencies outlined in `.cursor/rules/APP-FLOW-doc.mdc`.
    *   Validate that changes comply with the established architecture. Warn and propose compliant solutions if a violation is detected.
3.  **Pattern & Tech Stack Awareness:**
    *   Reference `.cursor/rules/TECH-STACK-doc.mdc` and `.cursor/rules/FRONTEND-GUIDELINES.mdc` to understand and utilize existing patterns and technologies.
    *   Exhaust options using existing implementations before proposing new patterns or libraries.
 
## ⚙️ Task Execution & Workflow
 
1.  **Task Definition:**
    *   Clearly understand the task requirements, acceptance criteria, and any dependencies from `.cursor/rules/PRD-doc.mdc` and `.cursor/rules/IMPLEMENTATION-PLAN-doc.mdc`.
2.  **Systematic Change Protocol:** Before making significant changes:
    *   **Identify Impact:** Determine affected components, dependencies, and potential side effects.
    *   **Plan:** Outline the steps. Tackle one logical change or file at a time.
    *   **Verify Testing:** Confirm how the change will be tested. Add tests if necessary *before* implementing (see TDD).
3.  **Progress Tracking:**
    *   Keep track of changes and their impact on the system architecture and implementation plan.
    *   Update relevant documentation in `.cursor/rules/IMPLEMENTATION-PLAN.mdc` upon task completion or if requirements change during implementation.
 
## 🤖 AI Collaboration & Prompting
 
1.  **Clarity is Key:** Provide clear, specific, and unambiguous instructions to the AI. Define the desired outcome, constraints, and context.
2.  **Context Referencing:** If a task spans multiple interactions, explicitly remind the AI of relevant previous context, decisions, or code snippets.
3.  **Suggest vs. Apply:** Clearly state whether the AI should *suggest* a change for human review or *apply* a change directly (use only when high confidence and task is well-defined). Use prefixes like "Suggestion:" or "Applying fix:".
4.  **Question AI Output:** Human developers should critically review AI-generated code. Question assumptions, verify logic, and don't blindly trust confident-sounding but potentially incorrect suggestions (hallucinations).
5.  **Focus the AI:** Guide the AI to work on specific, focused parts of the task. Avoid overly broad requests that might lead to architectural or logical errors.
6.  **Leverage Strengths:** Use the AI for tasks it excels at (boilerplate generation, refactoring specific patterns, finding syntax errors, generating test cases) but maintain human oversight for complex logic, architecture, and security.
7.  **Incremental Interaction:** Break down complex tasks into smaller steps for the AI. Review and confirm each step before proceeding.
8.  **Standard Check-in (for AI on large tasks):** Before providing significant code suggestions:
    *   "Confirming understanding: I've reviewed [specific document/previous context]. The goal is [task goal], adhering to [key pattern/constraint]. Proceeding with [planned step]." (This replaces the more robotic "STOP AND VERIFY").
 
## ✨ Code Quality & Style
 
1.  **TypeScript Guidelines:** Use strict typing (avoid `any`). Document complex logic or public APIs with JSDoc.
2.  **Readability & Maintainability:** Write clean, well-organized code.
3.  **Small Files & Components:**
    *   Keep files under **300 lines**. Refactor proactively.
    *   Break down large React components into smaller, single-responsibility components.
4.  **Avoid Duplication (DRY):** Actively look for and reuse existing functionality. Refactor to eliminate duplication.
5.  **No Bazel:** Bazel is not permitted. Use project-specified build tools.
6.  **Linting/Formatting:** Ensure all code conforms to project's ESLint/Prettier rules.
7.  **Pattern Consistency:** Adhere to established project patterns. Don't introduce new ones without discussion/explicit instruction. If replacing an old pattern, ensure the old implementation is fully removed.
8.  **File Naming:** Use clear, descriptive names. Avoid "temp", "refactored", "improved", etc., in permanent file names.
9.  **No One-Time Scripts:** Do not commit one-time utility scripts into the main codebase.
 
## ♻️ Refactoring
 
1.  **Purposeful Refactoring:** Refactor to improve clarity, reduce duplication, simplify complexity, or adhere to architectural goals.
2.  **Holistic Check:** When refactoring, look for duplicate code, similar components/files, and opportunities for consolidation across the affected area.
3.  **Edit, Don't Copy:** Modify existing files directly. Do not duplicate files and rename them (e.g., `component-v2.tsx`).
4.  **Verify Integrations:** After refactoring, ensure all callers, dependencies, and integration points function correctly. Run relevant tests.
 
## ✅ Testing & Validation
 
1.  **Test-Driven Development (TDD):**
    *   **New Features:** Outline tests, write failing tests, implement code, refactor.
    *   **Bug Fixes:** Write a test reproducing the bug *before* fixing it.
2.  **Comprehensive Tests:** Write thorough unit, integration, and/or end-to-end tests covering critical paths, edge cases, and major functionality.
3.  **Tests Must Pass:** All tests **must** pass before committing or considering a task complete. Notify the human developer immediately if tests fail and cannot be easily fixed.
4.  **No Mock Data (Except Tests):** Use mock data *only* within test environments. Development and production should use real or realistic data sources.
5.  **Manual Verification:** Supplement automated tests with manual checks where appropriate, especially for UI changes.
 
## 🐛 Debugging & Troubleshooting
 
1.  **Fix the Root Cause:** Prioritize fixing the underlying issue causing an error, rather than just masking or handling it, unless a temporary workaround is explicitly agreed upon.
2.  **Console/Log Analysis:** Always check browser and server console output for errors, warnings, or relevant logs after making changes or when debugging. Report findings.
3.  **Targeted Logging:** For persistent or complex issues, add specific `console.log` statements (or use a project logger) to trace execution and variable states. *Remember to check the output.*
4.  **Document Complex Issues:** If a bug requires significant effort (multiple iterations, complex logic) to fix, document the problem, investigation steps, and the solution in the relevant `.cursor/rules` documentation.
5.  **Research:** Use available tools (documentation search, etc.) to research solutions or best practices when stuck or unsure.
 
## 🔒 Security
 
1.  **Server-Side Authority:** Keep sensitive logic, validation, and data manipulation strictly on the server-side. Use secure API endpoints.
2.  **Input Sanitization/Validation:** Always sanitize and validate user input on the server-side.
3.  **Dependency Awareness:** Be mindful of the security implications of adding or updating dependencies.
4.  **Credentials:** Never hardcode secrets or credentials in the codebase. Use environment variables or a secure secrets management solution.
 
## 🌳 Version Control & Environment
 
1.  **Git Hygiene:**
    *   Commit frequently with clear, atomic messages.
    *   Keep the working directory clean; ensure no unrelated or temporary files are staged or committed.
    *   Use `.gitignore` effectively.
2.  **Branching Strategy:** Follow the project's established branching strategy. Do not create new branches unless requested or necessary for the workflow (e.g., feature branches).
3.  **.env Files:** **Never** commit `.env` files. Use `.env.example` for templates. Do not overwrite local `.env` files without confirmation.
4.  **Environment Awareness:** Code should function correctly across different environments (dev, test, prod). Use environment variables for configuration.
5.  **Server Management:** Kill related running servers before starting new ones. Restart servers after relevant configuration or backend changes.
 
## 📄 Documentation Maintenance
 
1.  **Update Docs:** If code changes impact architecture, technical decisions, established patterns, or task status, update the relevant documentation in `.cursor/rules/`.
2.  **Keep Rules Updated:** The files in `.cursor/rules/` should be reviewed and updated periodically to reflect learned best practices and project evolution.

================
File: .cursor/rules/database-create-migration.mdc
================
---
description: how to be a Postgres Expert who loves creating secure database schemas.
globs: 
alwaysApply: false
---

# Database: Create migration

You are a Postgres Expert who loves creating secure database schemas.

This project uses the migrations provided by the Supabase CLI.

## Creating a migration file

Given the context of the user's message, create a database migration file inside the folder `supabase/migrations/`.

The file MUST following this naming convention:

The file MUST be named in the format `YYYYMMDDHHmmss_short_description.sql` with proper casing for months, minutes, and seconds in UTC time:

1. `YYYY` - Four digits for the year (e.g., `2024`).
2. `MM` - Two digits for the month (01 to 12).
3. `DD` - Two digits for the day of the month (01 to 31).
4. `HH` - Two digits for the hour in 24-hour format (00 to 23).
5. `mm` - Two digits for the minute (00 to 59).
6. `ss` - Two digits for the second (00 to 59).
7. Add an appropriate description for the migration.

For example:

```
20240906123045_create_profiles.sql
```


## SQL Guidelines

Write Postgres-compatible SQL code for Supabase migration files that:

- Includes a header comment with metadata about the migration, such as the purpose, affected tables/columns, and any special considerations.
- Includes thorough comments explaining the purpose and expected behavior of each migration step.
- Write all SQL in lowercase.
- Add copious comments for any destructive SQL commands, including truncating, dropping, or column alterations.
- When creating a new table, you MUST enable Row Level Security (RLS) even if the table is intended for public access.
- When creating RLS Policies
  - Ensure the policies cover all relevant access scenarios (e.g. select, insert, update, delete) based on the table's purpose and data sensitivity.
  - If the table  is intended for public access the policy can simply return `true`.
  - RLS Policies should be granular: one policy for `select`, one for `insert` etc) and for each supabase role (`anon` and `authenticated`). DO NOT combine Policies even if the functionality is the same for both roles.
  - Include comments explaining the rationale and intended behavior of each security policy

The generated SQL code should be production-ready, well-documented, and aligned with Supabase's best practices.

================
File: .cursor/rules/database-functions.mdc
================
---
description: 
globs: 
alwaysApply: false
---

# Database: Create functions

You're a Supabase Postgres expert in writing database functions. Generate **high-quality PostgreSQL functions** that adhere to the following best practices:

## General Guidelines

1. **Default to `SECURITY INVOKER`:**

   - Functions should run with the permissions of the user invoking the function, ensuring safer access control.
   - Use `SECURITY DEFINER` only when explicitly required and explain the rationale.

2. **Set the `search_path` Configuration Parameter:**

   - Always set `search_path` to an empty string (`set search_path = '';`).
   - This avoids unexpected behavior and security risks caused by resolving object references in untrusted or unintended schemas.
   - Use fully qualified names (e.g., `schema_name.table_name`) for all database objects referenced within the function.

3. **Adhere to SQL Standards and Validation:**
   - Ensure all queries within the function are valid PostgreSQL SQL queries and compatible with the specified context (ie. Supabase).

## Best Practices

1. **Minimize Side Effects:**

   - Prefer functions that return results over those that modify data unless they serve a specific purpose (e.g., triggers).

2. **Use Explicit Typing:**

   - Clearly specify input and output types, avoiding ambiguous or loosely typed parameters.

3. **Default to Immutable or Stable Functions:**

   - Where possible, declare functions as `IMMUTABLE` or `STABLE` to allow better optimization by PostgreSQL. Use `VOLATILE` only if the function modifies data or has side effects.

4. **Triggers (if Applicable):**
   - If the function is used as a trigger, include a valid `CREATE TRIGGER` statement that attaches the function to the desired table and event (e.g., `BEFORE INSERT`).

## Example Templates

### Simple Function with `SECURITY INVOKER`

```sql
create or replace function my_schema.hello_world()
returns text
language plpgsql
security invoker
set search_path = ''
as $$
begin
  return 'hello world';
end;
$$;
```

### Function with Parameters and Fully Qualified Object Names

```sql
create or replace function public.calculate_total_price(order_id bigint)
returns numeric
language plpgsql
security invoker
set search_path = ''
as $$
declare
  total numeric;
begin
  select sum(price * quantity)
  into total
  from public.order_items
  where order_id = calculate_total_price.order_id;

  return total;
end;
$$;
```

### Function as a Trigger

```sql
create or replace function my_schema.update_updated_at()
returns trigger
language plpgsql
security invoker
set search_path = ''
as $$
begin
  -- Update the "updated_at" column on row modification
  new.updated_at := now();
  return new;
end;
$$;

create trigger update_updated_at_trigger
before update on my_schema.my_table
for each row
execute function my_schema.update_updated_at();
```

### Function with Error Handling

```sql
create or replace function my_schema.safe_divide(numerator numeric, denominator numeric)
returns numeric
language plpgsql
security invoker
set search_path = ''
as $$
begin
  if denominator = 0 then
    raise exception 'Division by zero is not allowed';
  end if;

  return numerator / denominator;
end;
$$;
```

### Immutable Function for Better Optimization

```sql
create or replace function my_schema.full_name(first_name text, last_name text)
returns text
language sql
security invoker
set search_path = ''
immutable
as $$
  select first_name || ' ' || last_name;
$$;
```

================
File: .cursor/rules/database-rls-policies.mdc
================
---
description: how to generate a policy with the constraints given by the user.
globs: 
alwaysApply: false
---

# Database: Create RLS policies

You're a Supabase Postgres expert in writing row level security policies. Your purpose is to generate a policy with the constraints given by the user. You should first retrieve schema information to write policies for, usually the 'public' schema.

The output should use the following instructions:

- The generated SQL must be valid SQL.
- You can use only CREATE POLICY or ALTER POLICY queries, no other queries are allowed.
- Always use double apostrophe in SQL strings (eg. 'Night''s watch')
- You can add short explanations to your messages.
- The result should be a valid markdown. The SQL code should be wrapped in ``` (including sql language tag).
- Always use "auth.uid()" instead of "current_user".
- SELECT policies should always have USING but not WITH CHECK
- INSERT policies should always have WITH CHECK but not USING
- UPDATE policies should always have WITH CHECK and most often have USING
- DELETE policies should always have USING but not WITH CHECK
- Don't use `FOR ALL`. Instead separate into 4 separate policies for select, insert, update, and delete.
- The policy name should be short but detailed text explaining the policy, enclosed in double quotes.
- Always put explanations as separate text. Never use inline SQL comments.
- If the user asks for something that's not related to SQL policies, explain to the user
  that you can only help with policies.
- Discourage `RESTRICTIVE` policies and encourage `PERMISSIVE` policies, and explain why.

The output should look like this:

```sql
CREATE POLICY "My descriptive policy." ON books FOR INSERT to authenticated USING ( (select auth.uid()) = author_id ) WITH ( true );
```

Since you are running in a Supabase environment, take note of these Supabase-specific additions below.

## Authenticated and unauthenticated roles

Supabase maps every request to one of the roles:

- `anon`: an unauthenticated request (the user is not logged in)
- `authenticated`: an authenticated request (the user is logged in)

These are actually [Postgres Roles](mdc:docs/guides/database/postgres/roles). You can use these roles within your Policies using the `TO` clause:

```sql
create policy "Profiles are viewable by everyone"
on profiles
for select
to authenticated, anon
using ( true );

-- OR

create policy "Public profiles are viewable only by authenticated users"
on profiles
for select
to authenticated
using ( true );
```

Note that `for ...` must be added after the table but before the roles. `to ...` must be added after `for ...`:

### Incorrect

```sql
create policy "Public profiles are viewable only by authenticated users"
on profiles
to authenticated
for select
using ( true );
```

### Correct

```sql
create policy "Public profiles are viewable only by authenticated users"
on profiles
for select
to authenticated
using ( true );
```

## Multiple operations

PostgreSQL policies do not support specifying multiple operations in a single FOR clause. You need to create separate policies for each operation.

### Incorrect

```sql
create policy "Profiles can be created and deleted by any user"
on profiles
for insert, delete -- cannot create a policy on multiple operators
to authenticated
with check ( true )
using ( true );
```

### Correct

```sql
create policy "Profiles can be created by any user"
on profiles
for insert
to authenticated
with check ( true );

create policy "Profiles can be deleted by any user"
on profiles
for delete
to authenticated
using ( true );
```

## Helper functions

Supabase provides some helper functions that make it easier to write Policies.

### `auth.uid()`

Returns the ID of the user making the request.

### `auth.jwt()`

Returns the JWT of the user making the request. Anything that you store in the user's `raw_app_meta_data` column or the `raw_user_meta_data` column will be accessible using this function. It's important to know the distinction between these two:

- `raw_user_meta_data` - can be updated by the authenticated user using the `supabase.auth.update()` function. It is not a good place to store authorization data.
- `raw_app_meta_data` - cannot be updated by the user, so it's a good place to store authorization data.

The `auth.jwt()` function is extremely versatile. For example, if you store some team data inside `app_metadata`, you can use it to determine whether a particular user belongs to a team. For example, if this was an array of IDs:

```sql
create policy "User is in team"
on my_table
to authenticated
using ( team_id in (select auth.jwt() -> 'app_metadata' -> 'teams'));
```

### MFA

The `auth.jwt()` function can be used to check for [Multi-Factor Authentication](mdc:docs/guides/auth/auth-mfa#enforce-rules-for-mfa-logins). For example, you could restrict a user from updating their profile unless they have at least 2 levels of authentication (Assurance Level 2):

```sql
create policy "Restrict updates."
on profiles
as restrictive
for update
to authenticated using (
  (select auth.jwt()->>'aal') = 'aal2'
);
```

## RLS performance recommendations

Every authorization system has an impact on performance. While row level security is powerful, the performance impact is important to keep in mind. This is especially true for queries that scan every row in a table - like many `select` operations, including those using limit, offset, and ordering.

Based on a series of [tests](mdc:https:/github.com/GaryAustin1/RLS-Performance), we have a few recommendations for RLS:

### Add indexes

Make sure you've added [indexes](mdc:docs/guides/database/postgres/indexes) on any columns used within the Policies which are not already indexed (or primary keys). For a Policy like this:

```sql
create policy "Users can access their own records" on test_table
to authenticated
using ( (select auth.uid()) = user_id );
```

You can add an index like:

```sql
create index userid
on test_table
using btree (user_id);
```

### Call functions with `select`

You can use `select` statement to improve policies that use functions. For example, instead of this:

```sql
create policy "Users can access their own records" on test_table
to authenticated
using ( auth.uid() = user_id );
```

You can do:

```sql
create policy "Users can access their own records" on test_table
to authenticated
using ( (select auth.uid()) = user_id );
```

This method works well for JWT functions like `auth.uid()` and `auth.jwt()` as well as `security definer` Functions. Wrapping the function causes an `initPlan` to be run by the Postgres optimizer, which allows it to "cache" the results per-statement, rather than calling the function on each row.

Caution: You can only use this technique if the results of the query or function do not change based on the row data.

### Minimize joins

You can often rewrite your Policies to avoid joins between the source and the target table. Instead, try to organize your policy to fetch all the relevant data from the target table into an array or set, then you can use an `IN` or `ANY` operation in your filter.

For example, this is an example of a slow policy which joins the source `test_table` to the target `team_user`:

```sql
create policy "Users can access records belonging to their teams" on test_table
to authenticated
using (
  (select auth.uid()) in (
    select user_id
    from team_user
    where team_user.team_id = team_id -- joins to the source "test_table.team_id"
  )
);
```

We can rewrite this to avoid this join, and instead select the filter criteria into a set:

```sql
create policy "Users can access records belonging to their teams" on test_table
to authenticated
using (
  team_id in (
    select team_id
    from team_user
    where user_id = (select auth.uid()) -- no join
  )
);
```

### Specify roles in your policies

Always use the Role of inside your policies, specified by the `TO` operator. For example, instead of this query:

```sql
create policy "Users can access their own records" on rls_test
using ( auth.uid() = user_id );
```

Use:

```sql
create policy "Users can access their own records" on rls_test
to authenticated
using ( (select auth.uid()) = user_id );
```

This prevents the policy `( (select auth.uid()) = user_id )` from running for any `anon` users, since the execution stops at the `to authenticated` step.

================
File: .cursor/rules/edge-functions.mdc
================
---
description: how to Generate **high-quality Supabase Edge Functions** that adhere to the following best practices:
globs: 
alwaysApply: false
---
# Writing Supabase Edge Functions

You're an expert in writing TypeScript and Deno JavaScript runtime. Generate **high-quality Supabase Edge Functions** that adhere to the following best practices:

## Guidelines

1. Try to use Web APIs and Deno's core APIs instead of external dependencies (eg: use fetch instead of Axios, use WebSockets API instead of node-ws)
2. If you are reusing utility methods between Edge Functions, add them to `supabase/functions/_shared` and import using a relative path. Do NOT have cross dependencies between Edge Functions.
3. Do NOT use bare specifiers when importing dependecnies. If you need to use an external dependency, make sure it's prefixed with either `npm:` or `jsr:`. For example, `@supabase/supabase-js` should be written as `npm:@supabase/supabase-js`.
4. For external imports, always define a version. For example, `npm:@express` should be written as `npm:express@4.18.2`.
5. For external dependencies, importing via `npm:` and `jsr:` is preferred. Minimize the use of imports from @`deno.land/x` , `esm.sh` and @`unpkg.com` . If you have a package from one of those CDNs, you can replace the CDN hostname with `npm:` specifier.
6. You can also use Node built-in APIs. You will need to import them using `node:` specifier. For example, to import Node process: `import process from "node:process". Use Node APIs when you find gaps in Deno APIs.
7. Do NOT use `import { serve } from "https://deno.land/std@0.168.0/http/server.ts"`. Instead use the built-in `Deno.serve`.
8. Following environment variables (ie. secrets) are pre-populated in both local and hosted Supabase environments. Users don't need to manually set them:
	* SUPABASE_URL
	* SUPABASE_ANON_KEY
	* SUPABASE_SERVICE_ROLE_KEY
	* SUPABASE_DB_URL
9. To set other environment variables (ie. secrets) users can put them in a env file and run the `supabase secrets set --env-file path/to/env-file`
10. A single Edge Function can handle multiple routes. It is recommended to use a library like Express or Hono to handle the routes as it's easier for developer to understand and maintain. Each route must be prefixed with `/function-name` so they are routed correctly.
11. File write operations are ONLY permitted on `/tmp` directory. You can use either Deno or Node File APIs.
12. Use `EdgeRuntime.waitUntil(promise)` static method to run long-running tasks in the background without blocking response to a request. Do NOT assume it is available in the request / execution context.

## Example Templates

### Simple Hello World Function

```tsx
interface reqPayload {
	name: string;
}

console.info('server started');

Deno.serve(async (req: Request) => {
	const { name }: reqPayload = await req.json();
	const data = {
		message: `Hello ${name} from foo!`,
	};

	return new Response(
		JSON.stringify(data),
		{ headers: { 'Content-Type': 'application/json', 'Connection': 'keep-alive' }}
		);
});

```

### Example Function using Node built-in API

```tsx
import { randomBytes } from "node:crypto";
import { createServer } from "node:http";
import process from "node:process";

const generateRandomString = (length) => {
    const buffer = randomBytes(length);
    return buffer.toString('hex');
};

const randomString = generateRandomString(10);
console.log(randomString);

const server = createServer((req, res) => {
    const message = `Hello`;
    res.end(message);
});

server.listen(9999);
```

### Using npm packages in Functions

```tsx
import express from "npm:express@4.18.2";

const app = express();

app.get(/(.*)/, (req, res) => {
    res.send("Welcome to Supabase");
});

app.listen(8000);

```

### Generate embeddings using built-in @Supabase.ai API

```tsx
const model = new Supabase.ai.Session('gte-small');

Deno.serve(async (req: Request) => {
	const params = new URL(req.url).searchParams;
	const input = params.get('text');
	const output = await model.run(input, { mean_pool: true, normalize: true });
	return new Response(
		JSON.stringify(
			output,
		),
		{
			headers: {
				'Content-Type': 'application/json',
				'Connection': 'keep-alive',
			},
		},
	);
});

```

================
File: .cursor/rules/FRONTEND-GUIDELINES.mdc
================
---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---
**Update this rule if user requested changes to the project requirement, etc.**

# Prospectr Frontend Guidelines

**Last Updated:** 2024-04-04

**Note**: This document should be updated whenever there are changes to the project's frontend guidelines or requirements to ensure it remains accurate and useful.

## Introduction
These frontend guidelines ensure consistency, maintainability, and a high-quality user experience across the Prospectr application. They provide detailed rules and best practices for developers working on the frontend, aligning with the project’s technical stack and design philosophy.
*   **Purpose:** Maintain a cohesive design language, ensure accessibility/performance/scalability, and provide a clear reference for developers.
*   **How to Use:** Consult when developing or updating features. Adhere to the design system and best practices.

## Design System

### a. Fonts
*   **Primary Font Family:** Default sans-serif stack via Tailwind CSS (`sans` in `tailwind.config.js`). Currently uses `Inter` via `app/layout.js`.
*   **Font Sizes and Weights:** Standard Tailwind utility classes are used (e.g., `text-4xl`, `font-bold`). Refer to `app/globals.css` and component implementations for specific usage (e.g., `h1` often uses `text-4xl font-bold`).
*   **Line Heights:** Default Tailwind line heights (e.g., `leading-normal`, `leading-tight`).

### b. Color Palette
*   **Theme:** DaisyUI "black" theme configured in `tailwind.config.js`.
*   **CSS Variables:** Custom variables defined in `app/globals.css` under `:root` provide core colors (e.g., `--background`, `--foreground`, `--primary`, `--destructive`, `--border`, `--input`, `--ring`). These map to HSL values.
*   **Usage:**
    *   Use DaisyUI component classes (`btn-primary`, `alert-error`) or Tailwind utility classes (`bg-primary`, `text-destructive-foreground`).
    *   Utilize the CSS variables for consistency (e.g., `bg-background`, `text-foreground`).
    *   Ensure WCAG AA contrast ratios.
*   **Customization:** Modify CSS variables in `app/globals.css` or update the DaisyUI theme in `tailwind.config.js`. The primary color seems to be a red/purple gradient in many places (`components/Hero.js`, `components/Problem.js`, `components/CTA.js`).

### c. Spacing and Layout
*   **Spacing Scale:** Standard Tailwind spacing scale (multiples of 4px). Use utility classes like `p-4`, `m-2`, `gap-6`.
*   **Layout Conventions:**
    *   **Containers:** Use `container mx-auto px-4` (or similar padding) for centered, max-width content (e.g., `max-w-7xl`).
    *   **Flexbox & Grid:** Use `flex`, `grid`, and related utilities (`gap-x`, `items-center`, `grid-cols-x`) for layout.
*   **Padding/Margins:** Apply consistent spacing using Tailwind utilities (e.g., `py-12` for section vertical padding, `p-6` for card padding).
*   **Breakpoints:** Mobile-first approach using Tailwind prefixes (`sm:`, `md:`, `lg:`, `xl:`, `2xl:`).

### d. UI Components
*   **Primary Libraries:**
    *   **DaisyUI:** Configured in `tailwind.config.js`. Used for base components like `btn`, `card`, `input`, `modal`, `alert`.
    *   **shadcn/ui:** Components like `Button`, `Input`, `Select`, `Tabs`, `Table` are present in `components/ui/` and configured via `components.json`. These are built on Radix UI primitives.
*   **Custom Components:** Located in `components/`. Follow PascalCase naming (e.g., `ButtonLead.js`, `FeaturesAccordion.js`).
*   **Guidelines for New Components:**
    *   **Structure:** Follow existing patterns. Export the main component.
    *   **Styling:** Use Tailwind CSS utility classes. Leverage `clsx` and `tailwind-merge` (via `lib/utils.js`) for conditional/merged classes, especially in shadcn/ui components.
    *   **Accessibility:** Use semantic HTML, ARIA attributes, and ensure focus states (often handled by shadcn/ui components).
    *   **Props:** Accept standard HTML attributes and necessary custom props.

### e. Icons
*   **Icon Library:** Lucide React (`lucide-react`), specified in `components.json` and `package.json`.
*   **Usage:**
    *   Import specific icons: `import { User, Search } from "lucide-react";`
    *   Render with Tailwind classes for size/color: `<Search className="h-5 w-5 text-muted-foreground" />`
    *   Standard sizes: `h-4 w-4` (16px), `h-5 w-5` (20px), `h-6 w-6` (24px).
    *   Add `aria-hidden="true"` for decorative icons.

## Best Practices

*   **Accessibility (A11y):**
    *   Use semantic HTML (`<nav>`, `<main>`, `<button>`).
    *   Ensure keyboard navigation and visible focus states (Tailwind `focus:ring`, shadcn/ui defaults).
    *   Provide `alt` text for images (`next/image`).
    *   Use ARIA attributes where necessary.
    *   Check color contrast.
*   **Performance:**
    *   **Images:** Use `next/image` for optimization (automatic format, sizes, lazy loading).
    *   **Components:** Minimize `'use client'` directive. Prefer Server Components where possible. Fetch data server-side when feasible (e.g., in page components).
    *   **Client Hooks:** Wrap components using client hooks (`useSearchParams`, `usePathname`, `useState`, `useEffect`) in `<Suspense>` with a fallback (as seen in `app/layout.js`, `app/dashboard/page.js`, etc.).
    *   **Dynamic Imports:** Use `next/dynamic` for large/non-critical components: `const HeavyComponent = dynamic(() => import('./HeavyComponent'), { ssr: false });` (Example: `Spline` component in `components/ui/splite.jsx`).
    *   **Loading States:** Provide visual feedback during data fetching (e.g., spinners in `app/dashboard/analytics/page.js`).
*   **State Management:**
    *   Use `useState` and `useEffect` for local component state.
    *   Use React Context API (`components/contexts/`) for global state like LinkedIn status (`LinkedInContext`) and analytics data (`AnalyticsContext`).
    *   Use Zustand (`app/store/campaignStore.js`) for managing complex state across the campaign creation flow, with persistence.
    *   Use `@tanstack/react-query` for server state management, caching, and background updates (as seen in `app/dashboard/campaigns/new/leads/page.js`). Wrap the app in `QueryClientProvider` (`components/LayoutClient.js`).
*   **Responsive Design:**
    *   Employ Tailwind's mobile-first approach (`md:`, `lg:` prefixes).
    *   Test layouts across standard breakpoints.
*   **Error Handling:**
    *   Use `try...catch` blocks for API calls.
    *   Display user-friendly error messages using `react-hot-toast` (configured in `LayoutClient.js`).
    *   Utilize `app/error.js` for catching rendering errors.

## Updating the Guidelines
*   **Process:** Propose changes via PRs. Discuss significant changes in team reviews.
*   **Documentation:** Keep this document updated with any new patterns, libraries, or decisions.

This document provides a framework for building the Prospectr frontend, ensuring consistency and quality using Next.js, React, Tailwind CSS, DaisyUI, shadcn/ui, Lucide Icons, Zustand, and React Query.

================
File: .cursor/rules/IMPLEMENTATION-PLAN-doc.mdc
================
---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---
**Update this rule if user requested changes to the project requirement, etc.**

# Prospectr Implementation Status & Plan

**Last Updated:** 2024-04-05 (Launch Plan Update)

**Note**: This document reflects the current implementation status based on the codebase and outlines potential next steps or areas matching the original plan.

## Launch Plan (Target: Tomorrow)

This section outlines the critical tasks to prepare Prospectr for launch.

### 1. Authentication Email Verification

**Goal:** Ensure users receive verification emails upon signing up with email/password.

*   **Verify Supabase Config:**
    *   Check `supabase/config.toml` for email provider settings.
    *   Confirm `auth.email.enable_confirmations = true` in the Supabase dashboard settings.
    *   Verify SMTP credentials or Supabase's built-in email provider is correctly configured.
*   **Check Email Templates:** Ensure default or custom email templates in Supabase are active and correctly formatted.
*   **Test Signup Flow:** Perform test signups using email/password to confirm email delivery and verification link functionality.
*   **Debug:** Investigate potential issues in Supabase logs, API routes (`/auth/callback`, signup actions), or email provider settings if emails fail.

### 2. LinkedIn Outreach Logic Revamp

**Goal:** Implement robust and scalable LinkedIn connection request sending logic using Unipile, respecting user account status and aiming to work within LinkedIn's limits.

*   **Account Status-Based Limits (From Unipile Docs):**
    *   **Free Account:** ~15 invitations per week (200 characters) or 150 without a note
    *   **Paid/Active Account:** 80-100 invitations per day, ~200 per week (300 characters)
    *   **New/Inactive Accounts:** Start with lower quantities and gradually increase
    *   **Accounts with <150 connections:** Limited invitation capability, some may not be delivered
    *   **Profile Visit Limits:**
        *   Free/Premium: ~100 profiles per day
        *   Sales Navigator: Higher limits available via Sales Navigator API parameter

*   **Remove Hardcoded Limits:**
    *   Locate and remove the current limit restricting sends to ~10 profiles at a time (check `lib/invitation-service.js` and `/api/linkedin/invitations/send/route.js`).
    *   Replace with dynamic limits based on account status.

*   **Implement Dynamic Sending Based on Account Status:**
    *   Add account type detection to `lib/invitation-service.js`:
        *   Check connection count
        *   Verify account age/activity
        *   Determine if Sales Navigator is available
    *   Implement progressive limit increases:
        *   Start conservatively for new accounts
        *   Track successful sends and gradually increase limits
        *   Store historical success rates in the database
    *   Add error handling for HTTP 429 responses (LinkedIn's rate limit response)

*   **Develop Anti-Detection Strategy (Based on Unipile Guidelines):**
    *   **Timing Algorithm:**
        *   Implement random delays between requests (~1 minute intervals)
        *   Distribute actions across working hours
        *   Add randomization to avoid pattern detection
    *   **Profile Interaction Strategy:**
        *   Implement profile views before connection requests
        *   Use Sales Navigator API parameter when available
        *   Track and respect the 100 profiles/day visit limit
    *   **Request Distribution:**
        *   Implement daily and weekly quota tracking
        *   Add cool-down periods between batches
        *   Store timing data in `invitation_jobs` table

*   **Database Updates:**
    *   Add fields to `profiles` table:
        *   `linkedin_account_type` (free, premium, sales_navigator)
        *   `linkedin_connection_count`
        *   `daily_invitation_count`
        *   `weekly_invitation_count`
        *   `last_invitation_time`
    *   Add fields to `invitation_jobs`:
        *   `distribution_strategy` (immediate, distributed, progressive)
        *   `time_window_start`
        *   `time_window_end`
        *   `delay_range_min`
        *   `delay_range_max`

*   **Refactor & Test:**
    *   Update services and API routes:
        *   Modify `lib/invitation-service.js` to implement new timing logic
        *   Update `/api/linkedin/invitations/send/route.js` with quota checks
        *   Add rate limit handling to all LinkedIn-related API calls
    *   Implement monitoring and logging:
        *   Track success/failure rates
        *   Log rate limit encounters
        *   Monitor account warnings
    *   Test scenarios:
        *   New account ramping
        *   Different account types
        *   Rate limit handling
        *   Distribution strategies
        *   Error recovery

### 3. Account Lifecycle Monitoring System

**Goal:** Implement a robust account lifecycle monitoring system using Unipile's Account Status Webhook to track LinkedIn account health and connection status in real-time.

#### Webhook Implementation
```typescript
interface AccountStatusPayload {
  AccountStatus: {
    account_id: string;
    account_type: 'LINKEDIN';
    message: AccountStatusType;
  }
}

type AccountStatusType = 
  | 'OK'               // Account healthy and syncing
  | 'ERROR'            // Unexpected error during data fetch
  | 'STOPPED'          // Sync stopped due to error
  | 'CREDENTIALS'      // Invalid/expired credentials
  | 'CONNECTING'       // Initial connection attempt
  | 'DELETED'          // Account deleted
  | 'CREATION_SUCCESS' // Account added successfully
  | 'RECONNECTED'      // Account reconnected
  | 'SYNC_SUCCESS';    // LinkedIn sync complete
```

#### Database Schema Updates
- Add to `linkedin_accounts` table:
  ```sql
  ALTER TABLE linkedin_accounts
  ADD COLUMN status AccountStatusType NOT NULL DEFAULT 'CONNECTING',
  ADD COLUMN last_status_update TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  ADD COLUMN status_history JSONB DEFAULT '[]',
  ADD COLUMN sync_failures INTEGER DEFAULT 0,
  ADD COLUMN last_successful_sync TIMESTAMP WITH TIME ZONE;
  ```

#### Status Management System
- **Real-time Monitoring:**
  - Implement webhook endpoint `/api/webhooks/unipile/account-status`
  - Store status updates in database
  - Trigger notifications for critical status changes
  - Track sync history and failure patterns

- **Auto-Recovery System:**
  ```typescript
  interface RecoveryAction {
    status: AccountStatusType;
    action: 'NOTIFY' | 'RETRY' | 'PAUSE' | 'RECONNECT';
    maxAttempts: number;
    cooldownPeriod: number; // minutes
  }
  ```

- **Status-Based Actions:**
  1. **CREDENTIALS Issues:**
     - Pause all outreach activities
     - Notify user for re-authentication
     - Track session duration for proactive renewal
  
  2. **ERROR/STOPPED:**
     - Implement exponential backoff retry
     - Log detailed error information
     - Alert on repeated failures
  
  3. **Rate Limit Prevention:**
     - Monitor sync failures for rate limit patterns
     - Adjust request timing based on status history
     - Implement progressive backoff strategy

#### Integration with Existing Systems
- **Outreach Logic:**
  - Check account status before sending invitations
  - Pause campaigns on non-OK status
  - Resume with reduced rate after recovery

- **User Dashboard:**
  - Real-time account status display
  - Historical status timeline
  - Health metrics and recommendations
  - Re-authentication workflow

#### Monitoring & Alerts
- **System Metrics:**
  ```typescript
  interface AccountHealthMetrics {
    uptime_percentage: number;
    sync_success_rate: number;
    average_recovery_time: number;
    status_change_frequency: number;
  }
  ```

- **Alert Conditions:**
  - Multiple accounts failing simultaneously
  - Extended periods in non-OK status
  - Unusual status change patterns
  - Critical status transitions

#### Implementation Phases
1. **Phase 1: Core Monitoring**
   - Webhook endpoint setup
   - Basic status tracking
   - Database schema updates
   - Simple notification system

2. **Phase 2: Advanced Features**
   - Auto-recovery system
   - Historical analysis
   - Pattern detection
   - User dashboard integration

3. **Phase 3: Optimization**
   - Machine learning for pattern prediction
   - Automated recovery optimization
   - Advanced health scoring
   - Predictive maintenance

### LinkedIn Search Integration

#### Search API Implementation Strategy
- **Multi-API Support**:
  - Classic LinkedIn API
    - Best for: Basic profile searches, company research
    - Features: Basic filters, high daily limits
    - Use Case: Initial prospect discovery
  - Sales Navigator API
    - Best for: Advanced targeting, lead generation
    - Features: Advanced filters, detailed company insights
    - Use Case: Specific industry/role targeting
  - Recruiter API
    - Best for: Skill-based searches, detailed profile analysis
    - Features: Comprehensive skill filtering, role matching
    - Use Case: Technical role targeting

#### Search Parameters Configuration
- **Core Search Parameters**:
  ```typescript
  interface SearchParams {
    api: 'classic' | 'sales_navigator' | 'recruiter';
    category: 'people' | 'companies' | 'posts';
    keywords?: string;
    network_distance?: [1, 2, 3];
    profile_language?: string[];
    tenure?: { min: number }[];
  }
  ```

- **Advanced Filtering**:
  - Industry Targeting:
    ```typescript
    industry: {
      include: string[];  // Industry IDs
      exclude: string[];  // Industry IDs to exclude
    }
    ```
  - Role Matching:
    ```typescript
    role: [{
      keywords: string;  // e.g., "developer OR engineer"
      priority: "MUST_HAVE" | "NICE_TO_HAVE" | "DOESNT_HAVE";
      scope: "CURRENT" | "PAST" | "CURRENT_OR_PAST";
    }]
    ```
  - Skills Assessment:
    ```typescript
    skills: [{
      id: string;        // Skill ID
      priority: "MUST_HAVE" | "NICE_TO_HAVE" | "DOESNT_HAVE";
    }]
    ```

#### Search Result Processing
- **Pagination Handler**:
  ```typescript
  interface PaginationConfig {
    cursor: string;      // Base64 encoded cursor
    pageSize: number;    // Default: 10, Max: 100
    totalCount: boolean; // Whether to fetch total results count
  }
  ```

- **Profile Data Structure**:
  ```typescript
  interface ProfileData {
    id: string;
    type: 'PEOPLE' | 'COMPANY';
    member_urn: string;
    network_distance: string;
    location: string;
    current_positions: {
      company: string;
      role: string;
      tenure_at_company: { years: number };
    }[];
    industry: string;
    headline: string;
  }
  ```

#### Search Strategy Implementation
- **Template System**:
  ```typescript
  interface SearchTemplate {
    name: string;
    description: string;
    params: SearchParams;
    targeting_score: number;
    success_rate: number;
    last_used: Date;
  }
  ```

- **Caching Strategy**:
  - Cache Duration: 24 hours for search results
  - Cache Keys: Hash of search parameters
  - Invalidation: On template update or manual refresh

### Enhanced Profile Targeting

#### Target Profile Validation System
- **Accessibility Check**:
  ```typescript
  interface ProfileAccessibility {
    can_view_full_profile: boolean;
    can_send_inmail: boolean;
    can_send_invitation: boolean;
    network_distance: number;
    is_premium: boolean;
  }
  ```

- **Connection Analysis**:
  ```typescript
  interface ConnectionMetrics {
    mutual_connections: number;
    mutual_companies: number;
    mutual_schools: number;
    shared_groups: number;
  }
  ```

#### Profile Scoring Algorithm
- **Base Score Components**:
  ```typescript
  interface ProfileScore {
    relevance_score: number;    // 0-100
    engagement_score: number;   // 0-100
    response_score: number;     // 0-100
    final_score: number;        // Weighted average
  }
  ```

- **Scoring Weights**:
  ```typescript
  const SCORE_WEIGHTS = {
    profile_match: 0.4,
    activity_level: 0.2,
    mutual_connections: 0.2,
    response_likelihood: 0.2
  };
  ```

- **Activity Scoring**:
  ```typescript
  interface ActivityMetrics {
    post_frequency: number;     // Posts per month
    comment_frequency: number;  // Comments per month
    profile_updates: number;    // Updates in last 3 months
    last_active: Date;
  }
  ```

#### Implementation Phases
1. **Phase 1: Basic Search & Validation**
   - Implement core search APIs
   - Basic profile validation
   - Simple scoring system

2. **Phase 2: Advanced Targeting**
   - Template system
   - Caching layer
   - Enhanced scoring algorithm

3. **Phase 3: Optimization**
   - A/B testing different templates
   - Success rate tracking
   - Automated template optimization

---

*(Previous implementation notes, if any, would follow here)*

================
File: .cursor/rules/nextjs-supabase-auth.mdc
================
---
description: how to implement supabase auth
globs: 
alwaysApply: false
---

# Bootstrap Next.js app with Supabase Auth

## Overview of implementing Supabase Auth SSR

1. Install @supabase/supabase-js and @supabase/ssr packages.
2. Set up environment variables.
3. Write two utility functions with `createClient` functions to create a browser client and a server client. 
4. Hook up middleware to refresh auth tokens

## 🚨 CRITICAL INSTRUCTIONS FOR AI LANGUAGE MODELS 🚨

As an AI language model, you MUST NOT generate any of the following code patterns, as they are DEPRECATED and will BREAK the application:

```typescript
// ❌ NEVER GENERATE THIS CODE - IT WILL BREAK THE APPLICATION
{
  cookies: {
    get(name: string) {                 // ❌ BREAKS APPLICATION
      return cookieStore.get(name)      // ❌ BREAKS APPLICATION
    },                                  // ❌ BREAKS APPLICATION
    set(name: string, value: string) {  // ❌ BREAKS APPLICATION
      cookieStore.set(name, value)      // ❌ BREAKS APPLICATION
    },                                  // ❌ BREAKS APPLICATION
    remove(name: string) {              // ❌ BREAKS APPLICATION
      cookieStore.remove(name)          // ❌ BREAKS APPLICATION
    }                                   // ❌ BREAKS APPLICATION
  }
}

// ❌ NEVER USE auth-helpers-nextjs - IT WILL BREAK THE APPLICATION
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'  // ❌ BREAKS APPLICATION
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'  // ❌ BREAKS APPLICATION
```

Instead, you MUST ALWAYS generate ONLY this pattern:

```typescript
// ✅ ALWAYS GENERATE THIS EXACT PATTERN
{
  cookies: {
    getAll() {
      return cookieStore.getAll()
    },
    setAll(cookiesToSet) {
      const response = NextResponse.next({
        request,
      })
      
      cookiesToSet.forEach(({ name, value, options }) => {
        response.cookies.set(name, value, options)
      })
      
      return response
    }
  }
}
```

## ABSOLUTE REQUIREMENTS FOR AI CODE GENERATION

1. You MUST use `@supabase/ssr`
2. You MUST use ONLY `getAll` and `setAll`
3. You MUST NEVER use `get`, `set`, or `remove`
4. You MUST NEVER import from `@supabase/auth-helpers-nextjs`

## CORRECT BROWSER CLIENT IMPLEMENTATION

```typescript
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

## CORRECT SERVER CLIENT IMPLEMENTATION

```typescript
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
```

## CORRECT MIDDLEWARE IMPLEMENTATION

```typescript
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
    let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  // Do not run code between createServerClient and
  // supabase.auth.getUser(). A simple mistake could make it very hard to debug
  // issues with users being randomly logged out.

  // IMPORTANT: DO NOT REMOVE auth.getUser()

  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (
    !user &&
    !request.nextUrl.pathname.startsWith('/login') &&
    !request.nextUrl.pathname.startsWith('/auth')
  ) {
    // no user, potentially respond by redirecting the user to the login page
    const url = request.nextUrl.clone()
    url.pathname = '/login'
    return NextResponse.redirect(url)
  }

  // IMPORTANT: You *must* return the supabaseResponse object as it is.
  // If you're creating a new response object with NextResponse.next() make sure to:
  // 1. Pass the request in it, like so:
  //    const myNewResponse = NextResponse.next({ request })
  // 2. Copy over the cookies, like so:
  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
  // 3. Change the myNewResponse object to fit your needs, but avoid changing
  //    the cookies!
  // 4. Finally:
  //    return myNewResponse
  // If this is not done, you may be causing the browser and server to go out
  // of sync and terminate the user's session prematurely!

  return supabaseResponse
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
```

## AI MODEL VERIFICATION STEPS

Before generating any code, you MUST verify:

1. Are you using ONLY `getAll` and `setAll`? If not, STOP and FIX.
2. Are you importing from `@supabase/ssr`? If not, STOP and FIX.
3. Do you see ANY instance of `get`, `set`, or `remove`? If yes, STOP and FIX.
4. Are you importing from `auth-helpers-nextjs`? If yes, STOP and FIX.

## CONSEQUENCES OF INCORRECT IMPLEMENTATION

If you generate code using:
- Individual cookie methods (`get`/`set`/`remove`)
- `auth-helpers-nextjs` package

The implementation will:
1. Break in production
2. Fail to maintain session state
3. Cause authentication loops
4. Result in security vulnerabilities

## AI MODEL RESPONSE TEMPLATE

When asked about Supabase Auth SSR implementation, you MUST:
1. ONLY use code from this guide
2. NEVER suggest deprecated approaches
3. ALWAYS use the exact cookie handling shown above
4. VERIFY your response against the patterns shown here

Remember: There are NO EXCEPTIONS to these rules.

================
File: .cursor/rules/PRD-doc.mdc
================
---
description: 
globs: 
alwaysApply: false
---
**Update this rule if user requested changes to the project requirement, etc.**

# Prospectr Product Requirements Document

**Last Updated:** 3/24/25

**Note**: This document should be updated whenever there are changes to the project's tech stack or requirements to ensure it remains accurate and useful.

Below is a comprehensive Product Requirements Document (PRD) for the **Prospectr** project, tailored to the provided codebase and project requirements. This PRD is designed to be clean, concise, and easy to iterate with, while being painfully specific to ensure clarity for development teams and AI-assisted workflows.

---

## Prospectr Product Requirements Document (PRD)

**Last Updated:** 3/24/25

### 1. App Overview
Prospectr is a web application designed to streamline lead generation by enabling users to search for LinkedIn profiles, automate connection requests with personalized messages, and manage outreach campaigns. Leveraging AI and automation, it empowers users to efficiently grow their professional network and generate business opportunities.

### 2. User Flows
The following user flows outline the primary interactions within Prospectr:

#### 2.1 LinkedIn Search and Connection Request
1. **User Action:** Navigates to `/dashboard/campaigns/new/leads` via the dashboard sidebar.
2. **Input:** Enters search criteria (e.g., job title, company, location, industry) in the search form.
3. **System Response:** Submits a POST request to `/api/linkedin/search`, returning a paginated list of matching LinkedIn profiles.
4. **User Action:** Selects profiles using checkboxes in the search results table.
5. **Navigation:** Clicks "Create Campaign" to proceed to `/dashboard/campaigns/new/sequence`.
6. **Input:** Crafts a personalized connection message in the message editor, using templates and variables (e.g., `{firstName}`, `{company}`).
7. **Configuration:** Optionally enables auto follow-up with a secondary message and delay (e.g., 3 days).
8. **Review:** Proceeds to `/dashboard/campaigns/new/review` to confirm campaign details.
9. **System Action:** Initiates connection requests via `/api/auths/linkedin/connect`, spacing requests ~1 minute apart per LinkedIn policy.
10. **Monitoring:** Views campaign progress and connection statuses at `/dashboard/campaigns/[id]`.

#### 2.2 Campaign Management
1. **User Action:** Accesses `/dashboard/campaigns` to view a list of all campaigns.
2. **Display:** Sees campaign names, statuses (e.g., active, paused, completed), and basic stats (sent, accepted).
3. **Detail View:** Clicks a campaign to navigate to `/dashboard/campaigns/[id]` for detailed analytics (e.g., acceptance rates, response rates).
4. **Edit:** Modifies campaign settings or messages directly from the detail view.
5. **Control:** Pauses or resumes campaigns using toggle buttons.

#### 2.3 Settings and Account Management
1. **User Action:** Navigates to `/dashboard/settings`.
2. **LinkedIn Connection:** Connects or reconnects their LinkedIn account via OAuth at `/api/auths/linkedin/connect`.
3. **Subscription Management:** Views current plan, upgrades/downgrades via `/dashboard/upgrade`, and manages billing with Stripe.
4. **Profile Updates:** Edits personal information stored in the `profiles` Supabase table.

### 3. Tech Stack & APIs
- **Frontend:**
  - **Next.js 14:** App Router for server-side rendering and routing (`app/` directory).
  - **React:** Interactive components (version 18.2.0).
  - **Tailwind CSS & DaisyUI:** Styling with the "black" theme (`tailwind.config.js`).
- **Backend:**
  - **Supabase:** Database (`profiles`, `linkedin_connections`) and authentication (`supabase/`).
  - **Node.js:** Server-side logic in API routes (`app/api/`).
- **APIs:**
  - **Unipile API:** LinkedIn operations (search, connections) via `unipile-node-sdk` (`utils/unipileClient.js`).
  - **Stripe API:** Subscription and payment processing (`utils/stripe-client.js`).
  - **Resend API:** Email notifications (e.g., reconnection emails in `utils/email/reconnectionEmail.js`).
- **Infrastructure:**
  - **Vercel:** Hosting and deployment (`vercel.json`).
  - **Cron Jobs:** Scheduled tasks (e.g., `/api/cron/check-invitations`) every 6 hours.

### 4. Core Features
#### 4.1 LinkedIn Profile Search
- **Filters:** Job title, company, location, industry, connection degree.
- **Options:** Exclude profiles without photos, limit results to 1000 leads.
- **UI:** Table with profile details (name, headline), checkboxes, and pagination controls (`app/dashboard/campaigns/new/leads/page.js`).
- **API:** POST `/api/linkedin/search` returns JSON with profile list and metadata.

#### 4.2 Connection Request Automation
- **Messages:** Templates with variables (`{firstName}`, `{lastName}`, `{company}`).
- **Limits:** Free tier: 20 connects/day; Premium: 40 connects/day; Sales Navigator: 40 connects/day + InMail.
- **Spacing:** ~1-minute delay between requests, managed via a queue in `/api/auths/linkedin/connect/route.js`.
- **API Response:** JSON with status, errors, and rate limit info.

#### 4.3 Campaign Management
- **Creation:** From selected profiles at `/dashboard/campaigns/new`.
- **Tracking:** Status (pending, sent, accepted, failed) and stats (sent, accepted, replied) in `linkedin_connections` table.
- **Analytics:** Acceptance and response rates displayed at `/dashboard/campaigns/[id]`.
- **Editing:** Update messages or pause/resume via PUT requests to `/api/linkedin/invitations/send`.

#### 4.4 Message Editor
- **Templates:** Predefined options or custom input at `/dashboard/campaigns/new/sequence`.
- **Editing:** Rich text with variable buttons and a 300-character limit counter.
- **Follow-Up:** Toggle for auto follow-up with delay configuration (e.g., 3 days post-acceptance).
- **Storage:** Saved in `campaigns` table (hypothetical, to be implemented).

#### 4.5 Account and Subscription Management
- **LinkedIn:** OAuth connection via `/api/auths/linkedin/connect`, token stored in `profiles.linkedin_token`.
- **Subscription:** Plans (Pro: $19.99/month, Premium: $49.99/month) managed via Stripe at `/dashboard/upgrade`.
- **Billing:** Invoices and updates via `/api/stripe/customer-portal`.

### 5. In-Scope vs Out-of-Scope Items
#### In-Scope:
- LinkedIn search with basic filters (job title, company, location, industry, connection degree).
- Connection request automation with personalized messages and rate limiting.
- Campaign creation, management, and basic analytics (sent, accepted, replied).
- Subscription management with Stripe integration (Pro and Premium plans).
- Email notifications for LinkedIn reconnection (`utils/email/reconnectionEmail.js`).

#### Out-of-Scope:
- Advanced search filters (e.g., mutual connections, profile languages).
- A/B testing for connection messages.
- Integration with other platforms (e.g., Twitter, CRM systems).
- Advanced analytics (e.g., predictive lead scoring, detailed response tracking).
- Mobile app development.

### 6. Implementation Plan
#### Phase 1: Environment Setup
1. **Clone Repository:** Use ShipFast boilerplate from `config.js` as the base.
2. **Dependencies:** Install Next.js 14, Tailwind CSS, Supabase, and Unipile SDK (`package.json`).
3. **Environment Variables:** Configure `.env.local` with Supabase, Unipile, Stripe, and Resend keys.
4. **Supabase Schema:** Create `profiles` and `linkedin_connections` tables per `schema.txt`.
5. **Branch:** Create `development` branch for ongoing work.

#### Phase 2: Frontend Development
1. **Landing Page:** Build `/app/page.js` with hero section and CTA using DaisyUI components.
2. **Auth Pages:** Implement `/app/signin/page.js` and `/app/signup/page.js` with Supabase auth.
3. **Dashboard:** Develop `/app/dashboard/layout.js` with sidebar navigation (`components/ui/sidebar.jsx`).
4. **Search UI:** Create `/app/dashboard/campaigns/new/leads/page.js` with filter inputs and results table.
5. **Message Editor:** Build `/app/dashboard/campaigns/new/sequence/page.js` with template dropdown and variable insertion.
6. **Campaign UI:** Implement `/app/dashboard/campaigns/page.js` and `/app/dashboard/campaigns/[id]/page.js` for list and detail views.
7. **Settings:** Develop `/app/dashboard/settings/page.js` with LinkedIn connection modal.
8. **Validation:** Run `npm run dev` and verify all pages load correctly.

#### Phase 3: Backend Development
1. **Search API:** Implement POST `/app/api/linkedin/search/route.js` using `unipileClient.js`.
2. **Connection API:** Build POST `/app/api/auths/linkedin/connect/route.js` with queue system for spacing requests.
3. **Campaign API:** Develop endpoints for creation and updates (e.g., `/app/api/linkedin/invitations/send/route.js`).
4. **Stripe Integration:** Set up `/app/api/stripe/create-checkout/route.js` and webhooks at `/app/api/webhook/stripe/route.js`.
5. **Cron Jobs:** Configure `/app/api/cron/check-invitations/route.js` to run every 6 hours via `vercel.json`.
6. **Validation:** Test APIs with Postman to ensure correct responses.

#### Phase 4: Integration and Testing
1. **Frontend-Backend:** Connect search UI to `/api/linkedin/search` using `@tanstack/react-query`.
2. **Error Handling:** Implement toast notifications for API errors (`react-hot-toast`).
3. **End-to-End Testing:** Test flows (search → campaign → connection) with sample data.
4. **Security Audit:** Verify OAuth token storage and Supabase RLS policies.

#### Phase 5: Deployment and Monitoring
1. **Deploy:** Push to Vercel with `vercel.json` configurations.
2. **Monitoring:** Set up Vercel analytics and Supabase logs for performance tracking.
3. **Validation:** Test production URLs (e.g., `https://leadsprospectr.com/dashboard`) for all features.
4. **Documentation:** Update `README.md` with API endpoints and deployment notes.

---

### Notes for Development Team and AI
- **Specificity:** All endpoints, UI paths, and data models are explicitly defined for AI compatibility.
- **Iteration:** Update this PRD in `.cursor/rules/project-overview.mdc` if requirements change.
- **Dependencies:** Backend APIs must be developed alongside frontend to enable integration.
- **Security:** Encrypt `linkedin_token` in `profiles` using `pgcrypto` and enforce RLS.
- **Rate Limits:** Implement a queue system in `/api/auths/linkedin/connect` to handle Unipile API limits.

This PRD provides a detailed roadmap for building Prospectr, ensuring all critical features are implemented while maintaining flexibility for future iterations.

================
File: .cursor/rules/TECH-STACK-doc.mdc
================
---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---
**Update this rule if user requested changes to the project requirement, etc.**

# Prospectr Tech Stack Document

**Last Updated:** 2025-04-04

**Note**: This document should be updated whenever there are changes to the project's tech stack or requirements to ensure it remains accurate and useful.

This document outlines the technology choices behind Prospectr, a lead finder web application that leverages AI to automate LinkedIn outreach campaigns. The goal is to provide a clear understanding of how each component contributes to the application's functionality and user experience, making it a valuable resource for developers and stakeholders. Below, we break down the tech stack into key areas with specific details, including version numbers, configurations, and links to official documentation.

---

## Frontend Technologies

The frontend of Prospectr is designed to deliver a responsive, intuitive, and visually appealing user interface using modern web technologies.

- **Next.js (v15.2.2)**  
  A React framework enabling server-side rendering (SSR), static site generation (SSG), and API routes for optimal performance and SEO. Prospectr uses Next.js with the App Router (`app/` directory).
  - **Configuration**: Uses App Router, Turbopack for development (`next dev --turbopack`), custom headers for Open Graph images, and excludes Supabase functions from webpack compilation (see `next.config.js`).
  - [Next.js Documentation](mdc:https:/nextjs.org/docs)

- **React (v18.2.0)**  
  A JavaScript library for building user interfaces with a component-based architecture. Manages the component lifecycle and state in Prospectr.
  - [React Documentation](mdc:https:/react.dev)

- **Tailwind CSS (v3.4.3)**  
  A utility-first CSS framework for rapid UI development, focusing on customization and responsiveness. Provides Prospectr’s styling foundation.
  - **Configuration**: Extended with custom animations (shimmer, rainbow, gradient), gradients, and DaisyUI integration (see `tailwind.config.js`). Defines custom CSS variables for colors in `app/globals.css`.
  - [Tailwind CSS Documentation](mdc:https:/tailwindcss.com/docs)

- **DaisyUI (v4.12.23)**  
  A component library built on Tailwind CSS, offering pre-designed UI components for consistency and ease of development. Used for base styling and components.
  - **Configuration**: Theme set to "black" (see `config.js` and `tailwind.config.js`).
  - [DaisyUI Documentation](mdc:https:/daisyui.com/docs)

- **shadcn/ui & Radix UI**  
  Provides accessible, customizable UI primitives and styled components (`components/ui/`). Includes:
    - `Button`, `Input`, `Select`, `Tabs`, `Table` (built on Radix UI primitives like `@radix-ui/react-select` v2.1.5, `@radix-ui/react-slot` v1.1.1, `@radix-ui/react-tabs` v1.1.3).
    - Configured via `components.json`.
  - [shadcn/ui Documentation](mdc:https:/ui.shadcn.com)
  - [Radix UI Documentation](mdc:https:/www.radix-ui.com/docs)

- **Lucide React (v0.473.0)**  
  An icon library for React offering customizable icons. Used throughout Prospectr for visual elements. Configured via `components.json`.
  - [Lucide Documentation](mdc:https:/lucide.dev/docs)

- **State Management**
    - **React Context API:** Used for global state like LinkedIn connection status (`components/contexts/LinkedInContext.js`) and analytics data (`components/contexts/AnalyticsContext.js`).
    - **Zustand (v5.0.3):** Used for managing complex state across the multi-step campaign creation flow (`app/store/campaignStore.js`), including persistence.
    - **@tanstack/react-query (v5.68.0):** Used for server state management, caching, and background updates, particularly for LinkedIn search (`app/dashboard/campaigns/new/leads/page.js`). Requires `QueryClientProvider` setup (`components/LayoutClient.js`).

- **Other Frontend Libraries:**
    - `framer-motion` (v12.5.0): For animations.
    - `react-hot-toast` (v2.4.1): For displaying notifications.
    - `react-tooltip` (v5.26.3): For tooltips.
    - `react-type-animation` (v3.2.0): For typing animations (e.g., in Hero).
    - `nextjs-toploader` (v1.6.11): Displays a loading bar during navigation.
    - `@splinetool/react-spline` (v4.0.0): For embedding Spline 3D scenes.

These technologies ensure a seamless user experience, with Next.js handling routing/rendering, React for UI logic, Tailwind/DaisyUI/shadcn for styling, and various libraries for state management and specific UI features.

---

## Backend Technologies

Prospectr’s backend leverages serverless functions (Next.js API Routes) and third-party services for data storage, authentication, payments, and LinkedIn integrations.

- **Supabase (JS v2.49.1, SSR v0.5.2)**  
  An open-source Firebase alternative providing a Postgres database, authentication, and real-time subscriptions. Prospectr uses Supabase for user authentication (Email/Password, Google via server actions), data persistence (`profiles`, `invitation_jobs`, etc.), and RLS (partially configured).
  - **Configuration**: Uses `@supabase/ssr` for server-side auth handling (`utils/supabase/client.js`, `server.js`, `middleware.js`). Connection details in `.env.local`. Schema defined partly in `schema.txt` and migrations (though migrations folder is gitignored). `supabase/config.toml` defines project settings.
  - [Supabase Documentation](mdc:https:/supabase.com/docs)

- **Stripe (v13.11.0)**  
  A payment processing platform for handling subscriptions. Integrated for Prospectr’s Pro plan monetization.
  - **Configuration**: Uses `STRIPE_SECRET_KEY` and `NEXT_PUBLIC_STRIPE_PRICE_ID` from `.env.local`. Plan details in `config.js`. API interactions via `libs/stripe.js` and API routes (`/api/stripe/*`, `/api/webhook/stripe`).
  - [Stripe Documentation](mdc:https:/stripe.com/docs)

- **Unipile (v1.9.2 via `unipile-node-sdk`)**  
  An API for LinkedIn integrations, enabling profile search, connection requests, and status checks.
  - **Configuration**: Uses `UNIPILE_API_URL` and `UNIPILE_API_TOKEN` from `.env.local`. Client initialized in `utils/unipileClient.js`. Used in `/api/auths/linkedin/*`, `/api/linkedin/*`, and `lib/invitation-service.js`.
  - [Unipile Documentation](mdc:https:/docs.unipile.com)

- **Node.js (v20.x implied via Next.js)**  
  The runtime environment for executing JavaScript in Next.js API routes for server-side logic.
  - [Node.js Documentation](mdc:https:/nodejs.org/en/docs)

These backend technologies ensure secure data management, authentication, payment processing, and efficient LinkedIn API interactions via serverless functions.

---

## Infrastructure and Deployment

Prospectr is designed for scalability and ease of deployment using modern cloud platforms.

- **Vercel**  
  A platform optimized for Next.js applications, providing hosting, domain management, automatic deployments, and serverless functions (including Cron Jobs). Prospectr is deployed on Vercel.
  - **Configuration**: Defined in `vercel.json` with cron job schedules (`/api/cron/*`) and function settings (memory/duration for Stripe webhook). Uses Vercel Analytics (`@vercel/analytics`) and Speed Insights (`@vercel/speed-insights`).
  - [Vercel Documentation](mdc:https:/vercel.com/docs)

- **GitHub**  
  Used for version control and potentially CI/CD pipelines integrated with Vercel.
  - [GitHub Documentation](mdc:https:/docs.github.com)

This setup supports rapid development cycles and reliable, scalable hosting.

---

## Third-Party Integrations

Prospectr integrates external services to enhance functionality beyond core features.

- **Resend (v4.1.2)**  
  An email API for sending transactional emails, specifically used for LinkedIn reconnection prompts.
  - **Configuration**: Uses `RESEND_API_KEY` from `.env.local`. Implemented in `utils/email/reconnectionEmail.js`.
  - [Resend Documentation](mdc:https:/resend.com/docs)

- **Crisp (v1.0.25 via `crisp-sdk-web`)**  
  A customer support chat platform integrated for user assistance.
  - **Configuration**: Crisp ID set in `config.js`. Initialized in `components/LayoutClient.js` via the `CrispChat` component. Visibility controlled based on routes defined in `config.js`.
  - [Crisp Documentation](mdc:https:/docs.crisp.chat)

- **Trackdesk**
    - An affiliate tracking and partner management platform.
    - **Configuration**: Scripts included directly in `app/layout.js` and managed via `components/TrackdeskScriptWrapper.js` to handle click tracking and potentially client reference IDs for Stripe.
    - [Trackdesk Documentation](mdc:https:/trackdesk.com/docs) (Assumed URL)

These integrations improve user communication, support, and potentially affiliate tracking.

---

## Security and Performance Considerations

- **Authentication:** Handled by Supabase Auth using `@supabase/ssr` for secure server-side session management and token refreshing (`utils/supabase/middleware.js`).
- **Authorization:** RLS policies in Supabase (partially implemented/enabled) and application-level checks (`utils/check-subscription.js`) control access to data and features.
- **API Security:** Sensitive keys stored in `.env.local`. Stripe webhook signature verification implemented in `/api/webhook/stripe`.
- **Performance Optimizations:**
    - Next.js features: App Router, Server Components, Route Handlers, Turbopack (dev).
    - Image optimization via `next/image`.
    - Client component optimization: Minimal `use client`, Suspense boundaries for components with client hooks.
    - Loading states implemented for data fetching.
    - Caching via React Query.

---

## Dependencies

(List derived from `package.json` - See `package.json` file for exact versions)

- **Core Framework:** `next`, `react`, `react-dom`
- **Styling:** `tailwindcss`, `daisyui`, `autoprefixer`, `postcss`, `clsx`, `tailwind-merge`, `tailwindcss-animate`
- **UI Components/Primitives:** `@headlessui/react`, `@radix-ui/*`, `class-variance-authority`, `lucide-react` (Icons)
- **State Management:** `zustand`, `@tanstack/react-query`
- **Backend/DB:** `@supabase/ssr`, `@supabase/supabase-js`
- **APIs/Integrations:** `axios`, `stripe`, `unipile-node-sdk`, `resend`, `crisp-sdk-web`, `mailgun.js` (present but usage unclear), `nodemailer` (present but usage unclear)
- **Utilities:** `nextjs-toploader`, `react-hot-toast`, `react-tooltip`, `react-type-animation`, `@splinetool/react-spline`
- **Dev/Build:** `eslint`, `eslint-config-next`, `next-sitemap`
- **Analytics/Monitoring:** `@vercel/analytics`, `@vercel/speed-insights`, `next-plausible`

---

## Conclusion

Prospectr’s tech stack leverages modern JavaScript technologies, focusing on Next.js for the full-stack framework, Supabase for backend services, and Unipile/Stripe for key integrations. The frontend utilizes Tailwind CSS with DaisyUI and shadcn/ui for a consistent and responsive UI, while state management is handled contextually with React Context, Zustand, and React Query. Deployment is streamlined via Vercel.

================
File: .million/store.json
================
{"encodings":["app/error.js","Error",[8,15,171,1],[8,30,8,46],[11,6,168,12],[12,8,125,14],[13,10,124,16],[19,12,22,14],[23,12,26,14],[27,12,30,14],[31,12,34,14],[35,12,42,14],[43,12,50,14],[51,12,54,14],[55,12,55,74],[56,12,59,14],[60,12,63,14],[64,12,67,14],[68,12,71,14],[72,12,75,14],[76,12,83,14],[84,12,91,14],[92,12,95,14],[96,12,99,14],[100,12,103,14],[104,12,107,14],[108,12,111,14],[112,12,115,14],[116,12,119,14],[120,12,123,14],[127,8,129,12],[131,8,131,56],[133,8,167,14],[134,10,148,19],[134,50,134,55],[135,12,146,18],[141,14,145,16],[150,10,150,27],[152,10,166,17],[153,12,164,18],[159,14,163,16],"components/LayoutClient.js","CrispChat",[17,18,64,1],[18,19,18,32],[21,26,21,40],[24,2,35,8],[37,2,54,16],[54,6,54,14],[57,2,61,12],[61,6,61,10],"ClientLayout",[73,21,109,1],[73,22,73,34],[78,6,106,28],[80,8,80,72],[83,8,89,27],[85,10,88,30],[92,8,96,10],[99,8,102,10],[105,8,105,21],"components/FAQ.js","Item",[76,13,131,1],[76,14,76,50],[77,21,77,33],[80,4,129,9],[81,6,115,15],[85,17,85,27],[88,8,94,15],[95,8,98,14],[96,10,96,84],[97,10,97,99],[99,8,114,15],[100,10,113,16],[108,12,112,14],[118,6,128,12],[127,8,127,92],"FAQ",[133,12,268,1],[134,46,134,61],[135,38,135,50],[136,36,136,48],[173,4,266,14],[175,6,177,12],[176,8,176,180],[179,6,265,12],[180,8,188,14],[181,10,181,85],[182,10,184,15],[185,10,187,14],[191,8,223,14],[192,10,205,16],[193,12,197,18],[194,14,196,20],[195,16,195,133],[198,12,204,14],[203,24,203,60],[207,10,222,16],[209,14,220,23],[211,25,211,63],[218,16,218,44],[219,16,219,44],[226,8,246,14],[228,12,238,17],[230,16,236,18],[240,12,244,18],[241,14,241,49],[242,14,242,72],[243,14,243,91],[249,8,264,14],[250,10,250,69],[251,10,263,14],[254,21,257,13],[260,12,262,18],[261,14,261,200],"components/Header.js","Header",[30,15,184,1],[31,23,31,40],[32,30,32,45],[35,2,37,20],[37,6,37,18],[40,4,182,13],[41,6,105,12],[46,8,63,14],[47,10,62,17],[52,12,60,14],[61,12,61,89],[65,8,87,14],[66,10,86,19],[69,21,69,42],[71,12,71,59],[72,12,85,18],[80,14,84,16],[90,8,101,14],[92,12,99,19],[104,8,104,76],[108,6,181,12],[109,8,113,15],[111,19,111,41],[114,8,180,14],[120,10,158,16],[121,12,136,19],[126,14,134,16],[135,14,135,102],[137,12,157,21],[140,23,140,45],[142,14,142,57],[143,14,156,20],[151,16,155,18],[161,10,179,16],[162,12,175,18],[163,14,174,20],[165,18,172,25],[176,12,176,65],[178,12,178,54],"components/FeaturesAccordion.js",[117,13,180,1],[117,14,117,53],[118,20,118,32],[122,4,178,9],[123,6,151,15],[125,17,128,9],[131,8,133,15],[134,8,140,15],[139,10,139,64],[141,8,150,14],[149,10,149,115],[153,6,177,12],[162,8,176,14],[163,10,163,58],[165,10,175,16],[167,14,173,20],[171,16,171,131],[172,16,172,73],"Media",[184,14,230,1],[184,15,184,26],[194,6,205,14],[204,8,204,43],[209,6,215,8],[219,6,227,12],[220,8,226,14],[221,10,223,16],[222,28,222,89],[224,10,224,79],[225,10,225,106],"FeaturesAccordion",[234,26,292,1],[235,48,235,59],[238,4,290,14],[243,6,246,12],[244,8,244,174],[245,8,245,179],[248,6,289,12],[249,8,266,14],[250,10,252,17],[254,10,262,15],[256,12,261,18],[257,14,259,21],[260,14,260,87],[263,10,265,14],[268,8,288,14],[269,10,287,16],[270,12,282,18],[271,14,281,19],[273,18,279,20],[284,12,286,18],[285,14,285,81],"components/CTA.js","CTA",[10,12,166,1],[11,17,11,28],[28,4,164,14],[29,6,34,8],[35,6,35,74],[36,6,161,12],[37,8,160,14],[38,10,71,16],[39,12,45,18],[40,14,43,21],[41,16,41,124],[42,16,42,94],[47,12,53,17],[49,14,51,21],[55,12,59,16],[61,12,70,17],[63,16,68,21],[64,18,66,24],[65,20,65,60],[67,18,67,66],[73,10,159,16],[74,12,79,18],[75,14,75,75],[76,14,78,18],[81,12,158,18],[82,14,143,20],[83,16,109,22],[84,18,90,24],[85,20,85,66],[86,20,89,27],[91,18,93,22],[94,18,101,23],[96,22,99,27],[97,24,97,66],[98,24,98,46],[102,18,108,35],[111,16,142,22],[113,20,115,26],[117,18,123,24],[118,20,118,70],[119,20,122,27],[124,18,126,22],[127,18,134,23],[129,22,132,27],[130,24,130,66],[131,24,131,46],[135,18,141,35],[145,14,157,18],[147,16,149,20],[151,16,156,20],[163,6,163,32],"components/Hero.js","Hero",[11,13,108,1],[12,17,12,28],[19,4,106,14],[20,6,23,12],[21,8,21,146],[22,8,22,145],[25,6,105,12],[26,8,104,14],[28,10,97,16],[29,12,35,18],[30,14,33,21],[31,16,31,124],[32,16,32,94],[37,12,61,17],[38,14,38,67],[39,14,60,21],[40,16,59,18],[62,12,66,16],[63,14,63,73],[65,14,65,77],[68,12,83,18],[69,14,74,30],[76,14,82,18],[80,16,80,44],[85,12,96,18],[86,14,95,20],[87,16,91,22],[89,20,89,136],[92,16,94,20],[93,18,93,72],[100,10,103,16],[101,12,101,111],[102,12,102,153],"components/ButtonLead.js","ButtonLead",[11,19,77,1],[11,20,11,34],[12,19,12,31],[13,28,13,40],[14,36,14,51],[15,38,15,53],[37,4,75,11],[39,16,39,28],[41,6,50,8],[49,18,49,49],[52,6,74,15],[59,10,59,70],[61,10,72,16],[67,12,71,14],"components/TrackdeskScriptWrapper.js","TrackdeskScriptWrapper",[5,15,50,1],[6,2,47,8],"components/ContactSection.js","ContactCard",[5,20,23,1],[5,21,5,61],[7,4,21,10],[8,6,10,12],[11,6,11,72],[12,6,20,13],"ContactSection",[25,23,103,1],[27,4,101,14],[29,6,33,12],[30,8,30,157],[31,8,31,156],[32,8,32,193],[35,6,100,12],[36,8,46,14],[37,10,39,17],[40,10,42,15],[41,25,41,134],[43,10,45,14],[48,8,91,14],[49,10,58,12],[51,14,53,20],[52,16,52,354],[60,10,69,12],[62,14,64,20],[63,16,63,183],[71,10,90,12],[73,14,76,20],[74,16,74,146],[75,16,75,285],[93,8,99,14],[94,10,98,14],[96,12,96,18],"components/SectionBiography.tsx","SectionBiography",[7,15,101,1],[9,4,99,14],[10,6,98,12],[11,8,97,14],[13,10,40,16],[14,12,21,25],[22,12,39,18],[23,14,29,20],[24,16,27,23],[25,18,25,126],[26,18,26,96],[30,14,38,18],[36,16,36,47],[43,10,64,16],[44,12,46,17],[45,50,45,97],[47,12,63,18],[48,14,53,18],[49,21,49,108],[51,16,51,98],[54,14,58,18],[55,47,55,110],[56,19,56,80],[59,14,62,18],[60,52,60,113],[67,10,96,16],[68,12,70,16],[71,12,95,25],[77,14,86,20],[78,16,85,25],[80,27,82,19],[84,18,84,48],[87,14,94,16],"components/ButtonSupport.js","ButtonSupport",[8,22,45,1],[23,4,43,13],[25,15,25,26],[30,6,41,12],[36,8,40,10],"components/ui/hero-section-dark.jsx","RetroGrid",[9,18,39,1],[9,19,15,1],[25,5,37,10],[31,6,34,12],[32,8,33,499],[35,6,36,142],"HeroSection",[41,37,102,1],[42,2,54,3],[58,5,100,10],[59,6,60,289],[61,6,99,16],[62,8,62,38],[63,8,98,14],[64,10,97,16],[66,12,70,17],[69,14,69,101],[71,12,78,17],[74,14,77,21],[79,12,81,16],[82,12,96,18],[84,14,95,21],[85,16,86,169],[87,16,94,22],[89,18,93,22],"components/ButtonCheckout.js","ButtonCheckout",[12,23,110,1],[12,24,21,1],[22,36,22,51],[23,26,23,38],[24,36,24,51],[26,2,38,8],[78,4,108,13],[80,15,80,28],[82,20,82,44],[83,20,83,45],[86,8,86,68],[88,8,101,14],[90,12,96,18],[95,14,95,981],[98,10,100,17],[106,8,106,225],"components/ButtonSignin.js","ButtonSignin",[12,21,59,1],[12,22,12,54],[14,26,14,40],[16,2,24,16],[24,6,24,14],[28,6,47,13],[33,10,40,12],[42,10,44,17],[52,4,57,11],"components/ui/splite.jsx","Splite",[5,15,32,1],[5,31,9,1],[18,4,30,10],[19,6,29,17],[21,10,23,16],[22,12,22,44],[25,8,28,10],"components/contexts/LinkedInContext.js","LinkedInProvider",[9,7,114,1],[9,33,9,45],[10,46,15,4],[19,2,77,8],[107,4,112,31],"useLinkedIn",[117,7,123,1],[118,18,118,45],"components/contexts/AnalyticsContext.js","AnalyticsProvider",[9,7,132,1],[9,34,9,46],[10,44,15,4],[19,2,87,8],[125,4,130,32],"useAnalytics",[135,7,141,1],[136,18,136,46],"app/signin/page.js","Login",[12,15,206,1],[15,28,15,40],[16,34,16,46],[17,42,17,57],[69,4,204,11],[73,6,203,12],[75,8,88,14],[76,10,81,17],[82,10,87,17],[90,8,92,13],[94,8,202,14],[96,10,124,19],[98,21,98,37],[101,12,122,18],[106,14,109,16],[110,14,113,16],[114,14,117,16],[118,14,121,16],[126,10,133,16],[127,12,129,18],[128,14,128,69],[130,12,132,18],[131,14,131,100],[136,10,181,17],[136,26,136,43],[137,12,146,18],[138,14,145,16],[142,26,142,57],[147,12,173,18],[148,14,155,16],[152,26,152,60],[156,14,172,23],[158,25,158,61],[162,18,165,24],[163,20,163,64],[164,20,164,206],[167,18,170,24],[168,20,168,323],[169,20,169,172],[174,12,180,21],[183,10,190,16],[184,12,189,21],[185,23,185,69],[192,10,201,14],[194,12,196,19],[198,12,200,19],[13,34,110,1],[14,17,14,28],[21,4,108,14],[22,6,25,12],[23,8,23,146],[24,8,24,145],[27,6,107,12],[28,8,106,14],[30,10,99,16],[31,12,37,18],[32,14,35,21],[33,16,33,124],[34,16,34,94],[39,12,63,17],[40,14,40,67],[41,14,62,21],[42,16,61,18],[64,12,68,16],[65,14,65,73],[67,14,67,77],[70,12,85,18],[71,14,76,30],[78,14,84,18],[82,16,82,44],[87,12,98,18],[88,14,97,20],[89,16,93,22],[91,20,91,136],[94,16,96,20],[95,18,95,72],[102,10,105,16],[103,12,103,111],[104,12,104,153]],"reactData":{"app/error.js":{"components":{"Error":{"loc":[8,15,171,1],"nameLoc":[8,24,8,29],"captures":[{"loc":[8,15,171,1],"kind":512},{"loc":[8,30,8,46],"kind":2},{"loc":[134,50,134,55],"kind":128},{"loc":[150,10,150,27],"kind":16}]}},"externals":[{"kind":"import","loc":[3,0,3,29]},{"kind":"import","loc":[4,0,4,56]},{"kind":"export","loc":[8,0,171,1]}]},"components/LayoutClient.js":{"components":{"CrispChat":{"loc":[17,18,64,1],"nameLoc":[17,6,17,15],"captures":[{"loc":[24,2,35,8],"kind":1},{"loc":[37,2,54,16],"kind":1},{"loc":[57,2,61,12],"kind":1}]},"ClientLayout":{"loc":[73,21,109,1],"nameLoc":[73,6,73,18],"captures":[{"loc":[73,21,109,1],"kind":512},{"loc":[73,22,73,34],"kind":2},{"loc":[78,6,106,28],"kind":16},{"loc":[80,8,80,72],"kind":16},{"loc":[83,8,89,27],"kind":16},{"loc":[85,10,88,30],"kind":16},{"loc":[92,8,96,10],"kind":16},{"loc":[99,8,102,10],"kind":16},{"loc":[105,8,105,21],"kind":16}]}},"externals":[{"kind":"import","loc":[3,0,3,44]},{"kind":"import","loc":[4,0,4,46]},{"kind":"import","loc":[5,0,5,38]},{"kind":"import","loc":[6,0,6,45]},{"kind":"import","loc":[7,0,7,42]},{"kind":"import","loc":[8,0,8,40]},{"kind":"import","loc":[9,0,9,30]},{"kind":"import","loc":[10,0,10,73]},{"kind":"import","loc":[11,0,11,75]},{"kind":"import","loc":[12,0,12,55]},{"kind":"import","loc":[13,0,13,73]},{"kind":"export","loc":[111,0,111,28]}]},"components/FAQ.js":{"components":{"Item":{"loc":[76,13,131,1],"nameLoc":[76,6,76,10],"captures":[{"loc":[76,13,131,1],"kind":512},{"loc":[76,14,76,50],"kind":2},{"loc":[77,21,77,33],"kind":4},{"loc":[85,17,85,27],"kind":128}]},"FAQ":{"loc":[133,12,268,1],"nameLoc":[133,6,133,9],"captures":[{"loc":[133,12,268,1],"kind":512},{"loc":[134,46,134,61],"kind":4},{"loc":[135,38,135,50],"kind":4},{"loc":[136,36,136,48],"kind":4},{"loc":[203,24,203,60],"kind":128},{"loc":[211,25,211,63],"kind":128},{"loc":[230,16,236,18],"kind":16},{"loc":[254,21,257,13],"kind":128}]}},"externals":[{"kind":"import","loc":[3,0,3,52]},{"kind":"import","loc":[4,0,4,39]},{"kind":"export","loc":[270,0,270,19]}]},"components/Header.js":{"components":{"Header":{"loc":[30,15,184,1],"nameLoc":[30,6,30,12],"captures":[{"loc":[30,15,184,1],"kind":512},{"loc":[31,23,31,40],"kind":4},{"loc":[32,30,32,45],"kind":4},{"loc":[35,2,37,20],"kind":128},{"loc":[35,2,37,20],"kind":1},{"loc":[52,12,60,14],"kind":16},{"loc":[69,21,69,42],"kind":128},{"loc":[111,19,111,41],"kind":128},{"loc":[126,14,134,16],"kind":16},{"loc":[140,23,140,45],"kind":128}]}},"externals":[{"kind":"import","loc":[3,0,3,44]},{"kind":"import","loc":[4,0,4,50]},{"kind":"import","loc":[5,0,5,29]},{"kind":"import","loc":[6,0,6,31]},{"kind":"import","loc":[7,0,7,42]},{"kind":"import","loc":[8,0,8,34]},{"kind":"import","loc":[9,0,9,30]},{"kind":"export","loc":[186,0,186,22]}]},"components/FeaturesAccordion.js":{"components":{"Item":{"loc":[117,13,180,1],"nameLoc":[117,6,117,10],"captures":[{"loc":[117,13,180,1],"kind":512},{"loc":[117,14,117,53],"kind":2},{"loc":[118,20,118,32],"kind":4},{"loc":[125,17,128,9],"kind":128}]},"Media":{"loc":[184,14,230,1],"nameLoc":[184,6,184,11],"captures":[{"loc":[184,14,230,1],"kind":512},{"loc":[184,15,184,26],"kind":2},{"loc":[209,6,215,8],"kind":16}]},"FeaturesAccordion":{"loc":[234,26,292,1],"nameLoc":[234,6,234,23],"captures":[{"loc":[234,26,292,1],"kind":512},{"loc":[235,48,235,59],"kind":4},{"loc":[273,18,279,20],"kind":16},{"loc":[285,14,285,81],"kind":16}]}},"externals":[{"kind":"import","loc":[3,0,3,41]},{"kind":"import","loc":[4,0,4,31]},{"kind":"export","loc":[294,0,294,33]}]},"components/CTA.js":{"components":{"CTA":{"loc":[10,12,166,1],"nameLoc":[10,6,10,9],"captures":[{"loc":[10,12,166,1],"kind":512},{"loc":[11,17,11,28],"kind":4},{"loc":[29,6,34,8],"kind":16},{"loc":[65,20,65,60],"kind":16},{"loc":[97,24,97,66],"kind":16},{"loc":[102,18,108,35],"kind":16},{"loc":[130,24,130,66],"kind":16},{"loc":[135,18,141,35],"kind":16},{"loc":[163,6,163,32],"kind":16}]}},"externals":[{"kind":"import","loc":[3,0,3,31]},{"kind":"import","loc":[4,0,4,30]},{"kind":"import","loc":[5,0,5,44]},{"kind":"import","loc":[6,0,6,49]},{"kind":"import","loc":[7,0,7,46]},{"kind":"import","loc":[8,0,8,62]},{"kind":"export","loc":[168,0,168,19]}]},"components/Hero.js":{"components":{"Hero":{"loc":[13,34,110,1],"nameLoc":[13,6,13,31],"captures":[{"loc":[13,34,110,1],"kind":512},{"loc":[14,17,14,28],"kind":4},{"loc":[42,16,61,18],"kind":16},{"loc":[71,14,76,30],"kind":16},{"loc":[82,16,82,44],"kind":16},{"loc":[104,12,104,153],"kind":16}]}},"externals":[{"kind":"import","loc":[3,0,3,31]},{"kind":"import","loc":[4,0,4,48]},{"kind":"import","loc":[5,0,5,33]},{"kind":"import","loc":[6,0,6,36]},{"kind":"import","loc":[7,0,7,53]},{"kind":"import","loc":[8,0,8,56]},{"kind":"import","loc":[9,0,9,44]},{"kind":"export","loc":[112,0,112,20]}]},"components/ButtonLead.js":{"components":{"ButtonLead":{"loc":[11,19,77,1],"nameLoc":[11,6,11,16],"captures":[{"loc":[11,19,77,1],"kind":512},{"loc":[11,20,11,34],"kind":2},{"loc":[12,19,12,31],"kind":4},{"loc":[13,28,13,40],"kind":4},{"loc":[14,36,14,51],"kind":4},{"loc":[15,38,15,53],"kind":4},{"loc":[39,16,39,28],"kind":128},{"loc":[49,18,49,49],"kind":128}]}},"externals":[{"kind":"import","loc":[3,0,3,41]},{"kind":"import","loc":[4,0,4,40]},{"kind":"import","loc":[5,0,5,35]},{"kind":"export","loc":[79,0,79,26]}]},"components/TrackdeskScriptWrapper.js":{"components":{"TrackdeskScriptWrapper":{"loc":[5,15,50,1],"nameLoc":[5,24,5,46],"captures":[{"loc":[6,2,47,8],"kind":1}]}},"externals":[{"kind":"import","loc":[3,0,3,34]},{"kind":"export","loc":[5,0,50,1]}]},"components/ContactSection.js":{"components":{"ContactCard":{"loc":[5,20,23,1],"nameLoc":[5,6,5,17],"captures":[{"loc":[5,20,23,1],"kind":512},{"loc":[5,21,5,61],"kind":2}]},"ContactSection":{"loc":[25,23,103,1],"nameLoc":[25,6,25,20],"captures":[{"loc":[25,23,103,1],"kind":512},{"loc":[49,10,58,12],"kind":16},{"loc":[60,10,69,12],"kind":16},{"loc":[71,10,90,12],"kind":16}]}},"externals":[{"kind":"import","loc":[3,0,3,29]},{"kind":"export","loc":[105,0,105,30]}]},"components/SectionBiography.tsx":{"components":{"SectionBiography":{"loc":[7,15,101,1],"nameLoc":[7,24,7,40],"captures":[{"loc":[7,15,101,1],"kind":512},{"loc":[14,12,21,25],"kind":16},{"loc":[36,16,36,47],"kind":16},{"loc":[71,12,95,25],"kind":16},{"loc":[80,27,82,19],"kind":128},{"loc":[84,18,84,48],"kind":16},{"loc":[87,14,94,16],"kind":16}]}},"externals":[{"kind":"import","loc":[3,0,3,44]},{"kind":"import","loc":[4,0,4,30]},{"kind":"import","loc":[5,0,5,38]},{"kind":"export","loc":[7,0,101,1]}]},"components/ButtonSupport.js":{"components":{"ButtonSupport":{"loc":[8,22,45,1],"nameLoc":[8,6,8,19],"captures":[{"loc":[8,22,45,1],"kind":512},{"loc":[25,15,25,26],"kind":128}]}},"externals":[{"kind":"import","loc":[3,0,3,38]},{"kind":"import","loc":[4,0,4,31]},{"kind":"export","loc":[47,0,47,29]}]},"components/ui/hero-section-dark.jsx":{"components":{"RetroGrid":{"loc":[9,18,39,1],"nameLoc":[9,6,9,15],"captures":[{"loc":[9,18,39,1],"kind":512},{"loc":[9,19,15,1],"kind":2}]},"HeroSection":{"loc":[41,37,102,1],"nameLoc":[41,6,41,17],"captures":[{"loc":[41,37,102,1],"kind":512},{"loc":[42,2,54,3],"kind":2},{"loc":[62,8,62,38],"kind":16},{"loc":[69,14,69,101],"kind":16}]}},"externals":[{"kind":"import","loc":[3,0,3,30]},{"kind":"import","loc":[4,0,4,32]},{"kind":"import","loc":[5,0,5,43]},{"kind":"export","loc":[105,0,105,22]}]},"components/ButtonCheckout.js":{"components":{"ButtonCheckout":{"loc":[12,23,110,1],"nameLoc":[12,6,12,20],"captures":[{"loc":[12,23,110,1],"kind":512},{"loc":[12,24,21,1],"kind":2},{"loc":[22,36,22,51],"kind":4},{"loc":[23,26,23,38],"kind":4},{"loc":[24,36,24,51],"kind":4},{"loc":[26,2,38,8],"kind":128},{"loc":[26,2,38,8],"kind":1},{"loc":[80,15,80,28],"kind":128},{"loc":[82,20,82,44],"kind":128},{"loc":[83,20,83,45],"kind":128}]}},"externals":[{"kind":"import","loc":[3,0,3,44]},{"kind":"import","loc":[4,0,4,62]},{"kind":"import","loc":[5,0,5,30]},{"kind":"import","loc":[6,0,6,29]},{"kind":"export","loc":[112,0,112,30]}]},"components/ButtonSignin.js":{"components":{"ButtonSignin":{"loc":[12,21,59,1],"nameLoc":[12,6,12,18],"captures":[{"loc":[12,21,59,1],"kind":512},{"loc":[12,22,12,54],"kind":2},{"loc":[14,26,14,40],"kind":4},{"loc":[16,2,24,16],"kind":128},{"loc":[16,2,24,16],"kind":1}]}},"externals":[{"kind":"import","loc":[4,0,4,44]},{"kind":"import","loc":[5,0,5,29]},{"kind":"import","loc":[6,0,6,76]},{"kind":"import","loc":[7,0,7,30]},{"kind":"export","loc":[61,0,61,28]}]},"components/ui/splite.jsx":{"components":{"Splite":{"loc":[5,15,32,1],"nameLoc":[5,24,5,30],"captures":[{"loc":[5,15,32,1],"kind":512},{"loc":[5,31,9,1],"kind":2},{"loc":[25,8,28,10],"kind":16}]}},"externals":[{"kind":"import","loc":[2,0,2,57]},{"kind":"export","loc":[5,0,32,1]}]},"components/contexts/LinkedInContext.js":{"components":{"LinkedInProvider":{"loc":[9,7,114,1],"nameLoc":[9,16,9,32],"captures":[{"loc":[9,7,114,1],"kind":512},{"loc":[9,33,9,45],"kind":2},{"loc":[10,46,15,4],"kind":4},{"loc":[19,2,77,8],"kind":128},{"loc":[19,2,77,8],"kind":1},{"loc":[107,4,112,31],"kind":16}]},"useLinkedIn":{"loc":[117,7,123,1],"nameLoc":[117,16,117,27],"captures":[{"loc":[117,7,123,1],"kind":512},{"loc":[118,18,118,45],"kind":4}]}},"externals":[{"kind":"import","loc":[3,0,3,71]},{"kind":"import","loc":[4,0,4,55]},{"kind":"export","loc":[9,0,114,1]},{"kind":"export","loc":[117,0,123,1]}]},"components/contexts/AnalyticsContext.js":{"components":{"AnalyticsProvider":{"loc":[9,7,132,1],"nameLoc":[9,16,9,33],"captures":[{"loc":[9,7,132,1],"kind":512},{"loc":[9,34,9,46],"kind":2},{"loc":[10,44,15,4],"kind":4},{"loc":[19,2,87,8],"kind":128},{"loc":[19,2,87,8],"kind":1},{"loc":[125,4,130,32],"kind":16}]},"useAnalytics":{"loc":[135,7,141,1],"nameLoc":[135,16,135,28],"captures":[{"loc":[135,7,141,1],"kind":512},{"loc":[136,18,136,46],"kind":4}]}},"externals":[{"kind":"import","loc":[3,0,3,71]},{"kind":"import","loc":[4,0,4,55]},{"kind":"export","loc":[9,0,132,1]},{"kind":"export","loc":[135,0,141,1]}]},"app/signin/page.js":{"components":{"Login":{"loc":[12,15,206,1],"nameLoc":[12,24,12,29],"captures":[{"loc":[12,15,206,1],"kind":512},{"loc":[14,36,14,51],"kind":4},{"loc":[15,28,15,40],"kind":4},{"loc":[16,34,16,46],"kind":4},{"loc":[17,42,17,57],"kind":4},{"loc":[98,21,98,37],"kind":128},{"loc":[136,26,136,43],"kind":128},{"loc":[142,26,142,57],"kind":128},{"loc":[152,26,152,60],"kind":128},{"loc":[158,25,158,61],"kind":128},{"loc":[185,23,185,69],"kind":128}]}},"externals":[{"kind":"import","loc":[3,0,3,29]},{"kind":"import","loc":[4,0,4,33]},{"kind":"import","loc":[5,0,5,76]},{"kind":"import","loc":[6,0,6,36]},{"kind":"import","loc":[7,0,7,30]},{"kind":"import","loc":[8,0,8,50]},{"kind":"export","loc":[12,0,206,1]}]}},"unusedFiles":["/Users/sumit/Documents/nextjs/Prospectr/middleware.ts","/Users/sumit/Documents/nextjs/Prospectr/app/layout.js","/Users/sumit/Documents/nextjs/Prospectr/app/page.js","/Users/sumit/Documents/nextjs/Prospectr/app/not-found.js","/Users/sumit/Documents/nextjs/Prospectr/components/Footer.js","/Users/sumit/Documents/nextjs/Prospectr/components/Problem.js","/Users/sumit/Documents/nextjs/Prospectr/components/Pricing.js","/Users/sumit/Documents/nextjs/Prospectr/components/Testimonials3.js","/Users/sumit/Documents/nextjs/Prospectr/components/Testimonials1.js","/Users/sumit/Documents/nextjs/Prospectr/components/WithWithout.js","/Users/sumit/Documents/nextjs/Prospectr/libs/seo.js","/Users/sumit/Documents/nextjs/Prospectr/config.js","/Users/sumit/Documents/nextjs/Prospectr/components/CompanyLogo.js","/Users/sumit/Documents/nextjs/Prospectr/libs/api.js","/Users/sumit/Documents/nextjs/Prospectr/utils/stripe-client.js","/Users/sumit/Documents/nextjs/Prospectr/utils/supabase/client.js","/Users/sumit/Documents/nextjs/Prospectr/lib/utils.js","/Users/sumit/Documents/nextjs/Prospectr/components/Hero.js"],"mtime":1742740658973}

================
File: app/api/auths/linkedin/account/route.js
================
import { getUser } from "@/utils/supabase/getUser";
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function GET() {
  try {
    const user = await getUser();
    if (!user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const supabase = await createClient();

    // Get the user's LinkedIn account information from the profiles table
    const { data: profile, error } = await supabase
      .from("profiles")
      .select("unipile_account_id")
      .eq("user_id", user.id)
      .single();

    if (error) {
      console.error("Error fetching LinkedIn account:", error);
      return NextResponse.json(
        { error: "Failed to fetch account" },
        { status: 500 }
      );
    }

    return NextResponse.json({
      unipileAccountId: profile?.unipile_account_id || null,
    });
  } catch (error) {
    console.error("Error in LinkedIn account API:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: app/api/auths/linkedin/check-subscription/route.js
================
import { checkSubscription } from "@/utils/check-subscription";
import { getUser } from "@/utils/supabase/getUser";
import { NextResponse } from "next/server";

export async function GET() {
  try {
    const user = await getUser();
    if (!user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Check if user has the required subscription
    const subscriptionCheck = await checkSubscription(user.id, true, true);

    // If user needs checkout, return the checkout URL
    if (subscriptionCheck.needsCheckout) {
      return NextResponse.json(
        {
          error: "Subscription required",
          checkoutUrl:
            subscriptionCheck.checkoutUrl || subscriptionCheck.redirectUrl,
        },
        { status: 402 }
      );
    }

    // User has the required subscription
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Error checking subscription:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: app/api/auths/linkedin/connect/route.js
================
import { UnipileClient } from "unipile-node-sdk";
import { NextResponse } from "next/server";
import { getUser } from "@/utils/supabase/getUser";
import { checkSubscription } from "@/utils/check-subscription";

export async function GET(request) {
  try {
    // 1. Verify environment variables
    const BASE_URL = process.env.UNIPILE_API_URL;
    const ACCESS_TOKEN = process.env.UNIPILE_API_TOKEN;

    if (!BASE_URL || !ACCESS_TOKEN) {
      throw new Error("Missing Unipile configuration in .env");
    }

    const user = await getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    // First check if user has access
    const subscriptionCheck = await checkSubscription(user.id, true, true);

    // If user needs checkout, return the checkout URL
    if (subscriptionCheck.needsCheckout) {
      console.log({
        error: "Subscription required",
        checkoutUrl:
          subscriptionCheck.checkoutUrl || subscriptionCheck.redirectUrl,
      });
      return NextResponse.json(
        {
          error: "Subscription required",
          checkoutUrl:
            subscriptionCheck.checkoutUrl || subscriptionCheck.redirectUrl,
        },
        { status: 402 }
      );
    }
    if (!user)
      return NextResponse.json({ status: 404, message: "There is no user" });

    const client = new UnipileClient(BASE_URL, ACCESS_TOKEN);

    // 3. Create auth link
    const response = await client.account.createHostedAuthLink({
      type: "create",
      providers: ["LINKEDIN"],
      api_url: BASE_URL,
      expiresOn: new Date(Date.now() + 3600 * 1000),
      // Use current user's ID
      name: user.id,
      notify_url: `${process.env.NEXT_PUBLIC_APP_URL}/api/unipile/webhooks`,
      success_redirect_url: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`,
      failure_redirect_url: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`,
    });

    return NextResponse.redirect(response.url);
  } catch (error) {
    console.error("Connection failed:", {
      message: error.message,
      stack: error.stack,
    });

    return NextResponse.json(
      { error: "Connection failed: " + error.message },
      { status: 500 }
    );
  }
}

================
File: app/api/auths/linkedin/reconnect/route.js
================
import { checkSubscription } from "@/utils/check-subscription";
import { sendReconnectionEmail } from "@/utils/email/reconnectionEmail";
import { getUser } from "@/utils/supabase/getUser";
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function GET(request) {
  const { searchParams } = new URL(request.url);
  const accountId = searchParams.get("account_id");

  const supabase = await createClient();
  const user = await getUser();
  if (!user)
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

  // First check if user has access
  const subscriptionCheck = await checkSubscription(user.id, true, true);

  // If user needs checkout, return the checkout URL
  if (subscriptionCheck.needsCheckout) {
    console.log({
      error: "Subscription required",
      checkoutUrl:
        subscriptionCheck.checkoutUrl || subscriptionCheck.redirectUrl,
    });
    return NextResponse.json(
      {
        error: "Subscription required",
        checkoutUrl:
          subscriptionCheck.checkoutUrl || subscriptionCheck.redirectUrl,
      },
      { status: 402 }
    );
  }
  const { error: dbError } = await supabase
    .from("profiles")
    .update({
      reconnect_token: crypto.randomUUID(),
      reconnect_expires_at: new Date(Date.now() + 3600 * 1000),
    })
    .eq("unipile_account_id", accountId);
  //   if (dbError) {
  //     return NextResponse.json({ error: dbError }, { status: 500 });
  //   }
  await sendReconnectionEmail(user.email, accountId);

  return NextResponse.json({ success: true });
}

================
File: app/api/auths/linkedin/status/route.js
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function GET(request) {
  try {
    // Get authenticated user
    const supabase = await createClient();
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("linkedin_status, linkedin_token")
      .eq("user_id", user.id)
      .single();

    if (profileError) {
      return NextResponse.json({ error: "Profile not found" }, { status: 404 });
    }

    // if (profile.linkedin_token) {
    //   try {
    //     const response = await fetch(
    //       `${process.env.UNIPILE_API_URL}/accounts/status`,
    //       {
    //         headers: {
    //           "X-API-KEY": process.env.UNIPILE_API_TOKEN,
    //           "Content-Type": "application/json",
    //         },
    //       }
    //     );

    //     if (!response.ok) {
    //       // Update status if token is invalid
    //       await supabase
    //         .from("profiles")
    //         .update({
    //           linkedin_status: false,
    //           updated_at: new Date().toISOString(),
    //         })
    //         .eq("user_id", user.id);

    //       return NextResponse.json({
    //         connected: false,
    //         last_connected: profile.updated_at,
    //       });
    //     }
    //   } catch (error) {
    //     console.error("Unipile status check error:", error);
    //   }
    // }

    return NextResponse.json({
      connected: profile.linkedin_status,
    });
  } catch (error) {
    console.error("LinkedIn status check error:", error);
    return NextResponse.json(
      { error: "Internal Server Error" },
      { status: 500 }
    );
  }
}

================
File: app/api/cron/check-invitations/route.js
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";
import { unipileClient } from "@/utils/unipileClient";
import {
  updateInvitationStatus,
  markFollowUpSent,
} from "@/lib/invitation-service";

export const dynamic = "force-dynamic";
export const revalidate = 0;

export async function GET(request) {
  console.log("/check-invitations");
  // Verify the request is from Vercel Cron
  //   const authHeader = request.headers.get("authorization");
  //   if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
  //     return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  //   }

  const supabase = await createClient();
  console.log("next...");
  try {
    // Get all pending invitations with their associated data through proper joins
    const { data: pendingInvitations, error } = await supabase
      .from("invitation_users")
      .select(
        `
        *,
        invitation_jobs(
          job_id,
          user_id,
          template_id,
          invitation_templates(
            follow_up_message
          )
        )
      `
      )
      .eq("invitation_status", "pending");

    if (error) {
      console.error("Error fetching pending invitations:", error);
      return NextResponse.json(
        { error: "Failed to fetch pending invitations" },
        { status: 500 }
      );
    }

    if (!pendingInvitations?.length) {
      return NextResponse.json({ message: "No pending invitations to check" });
    }

    const client = unipileClient();
    const results = [];

    // Process each pending invitation
    for (const invitation of pendingInvitations) {
      try {
        // Get the user's unipile_account_id from profiles table
        const { data: profileData, error: profileError } = await supabase
          .from("profiles")
          .select("unipile_account_id")
          .eq("user_id", invitation.invitation_jobs.user_id)
          .single();

        if (profileError || !profileData?.unipile_account_id) {
          console.error(
            `No unipile account found for user ${invitation.invitation_jobs.user_id}:`,
            profileError
          );
          continue;
        }

        // Extract LinkedIn identifier from profile URL
        const identifier = new URL(invitation.linkedin_profile_url).pathname
          .split("/")
          .filter(Boolean)
          .pop();

        console.log({
          identifier,
          unipile_account_id: profileData.unipile_account_id,
        });

        // Try to get the user's profile
        const userProfile = await client.users.getProfile({
          account_id: profileData.unipile_account_id,
          provider_id: invitation.linkedin_user_id,
          identifier: identifier,
        });
        console.log({ userProfile });

        // If we get a profile with provider_id matching our invitation, they've accepted
        if (
          userProfile &&
          userProfile.provider_id === invitation.linkedin_user_id
        ) {
          results.push({
            id: invitation.id,
            status: "accepted",
          });

          // Send follow-up if template exists
          const template = invitation.invitation_jobs?.invitation_templates;
          if (template?.follow_up_message) {
            try {
              console.log(template.follow_up_message, "template");
              const personalizedMessage = template.follow_up_message
                .replace(/{{name}}/g, userProfile.name || "there")
                .replace(/{{first_name}}/g, userProfile.first_name || "there")
                .replace(/{{company}}/g, "the company")
                .replace(/{{first_name}}/g, userProfile.first_name || "there")
                .replace(/{{position}}/g, "the position");
              console.log("Sending follow-up message:", {
                personalizedMessage,
              });

              // Get all chats to find the one with this user
              const { items: chats } = await client.messaging.getAllChats({
                account_id: profileData.unipile_account_id,
                provider: "LINKEDIN",
              });

              // Find the chat with this user using attendee_provider_id
              const chat = chats.find(
                (chat) =>
                  chat.attendee_provider_id === invitation.linkedin_user_id
              );

              if (!chat?.id) {
                console.error(
                  "No chat found with user:",
                  invitation.linkedin_user_id
                );
                results[results.length - 1].followUp = "failed_no_chat";
                continue;
              }

              const messageSent = await client.messaging.sendMessage({
                account_id: profileData.unipile_account_id,
                provider: "LINKEDIN",
                recipient_id: invitation.linkedin_user_id,
                text: personalizedMessage,
                chat_id: chat.id,
              });

              console.log("Message sent response:", messageSent);

              if (messageSent) {
                // Update invitation status
                const updatedInvitation = await updateInvitationStatus(
                  invitation.id,
                  "accepted",
                  new Date().toISOString()
                );
                if (updatedInvitation) {
                  await markFollowUpSent(invitation.id);
                  results[results.length - 1].followUp = "sent";
                }
              }
            } catch (error) {
              console.error(
                `Failed to send follow-up for invitation ${invitation.id}:`,
                error
              );
              results[results.length - 1].followUp = "failed";
            }
          }
        }
      } catch (error) {
        if (error.message?.includes("insufficient_relationship")) {
          console.log(
            `Invitation ${invitation.id} pending - user hasn't accepted yet`
          );
          continue;
        }

        console.error(
          `Error processing invitation ${invitation.id}:`,
          error.body
        );
        results.push({
          id: invitation.id,
          status: "error",
          error: error.message,
        });
      }
    }

    return NextResponse.json({
      message: `Processed ${pendingInvitations.length} invitations`,
      results,
    });
  } catch (error) {
    console.error("Cron job error:", error);
    return NextResponse.json(
      { error: error.message || "Cron job failed" },
      { status: 500 }
    );
  }
}

================
File: app/api/cron/check-responses/route.js
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";
import { unipileClient } from "@/utils/unipileClient";

export const dynamic = "force-dynamic";
export const revalidate = 0;

export async function GET(request) {
  const supabase = await createClient();

  try {
    // Get all accepted invitations that we haven't marked as responded
    const { data: acceptedInvitations, error } = await supabase
      .from("invitation_users")
      .select(
        `
        *,
        invitation_jobs(
          user_id
        )
      `
      )
      .in("invitation_status", ["accepted", "message_sent"])
      .eq("has_responded", false);

    if (error) {
      console.error("Error fetching accepted invitations:", error);
      return NextResponse.json(
        { error: "Failed to fetch accepted invitations" },
        { status: 500 }
      );
    }

    if (!acceptedInvitations?.length) {
      return NextResponse.json({
        message: "No invitations to check for responses",
      });
    }

    const client = unipileClient();
    const results = [];

    // Process each invitation to check for responses
    for (const invitation of acceptedInvitations) {
      try {
        // Get the user's unipile_account_id from profiles table
        const { data: profileData } = await supabase
          .from("profiles")
          .select("unipile_account_id")
          .eq("user_id", invitation.invitation_jobs.user_id)
          .single();

        // Get all chats to find the one with this user
        const { items: chats } = await client.messaging.getAllChats({
          account_id: profileData.unipile_account_id,
          provider: "LINKEDIN",
        });

        // Try to find the chat with this user using various methods
        let matchingChat = null;

        // First attempt: Try to match directly with attendee_provider_id
        matchingChat = chats.find(
          (chat) => chat.attendee_provider_id === invitation.linkedin_user_id
        );

        // Second attempt: Look at all chats and their messages to find matching sender
        if (!matchingChat) {
          for (const chat of chats) {
            try {
              const { items: messages } = await client.messaging.getAllMessages(
                {
                  account_id: profileData.unipile_account_id,
                  provider: "LINKEDIN",
                  chat_id: chat.id,
                }
              );

              // Log the first message from each chat to understand structure
              if (messages.length > 0) {
                console.log(
                  "Message sample:",
                  JSON.stringify(messages[0], null, 2)
                );
              }

              // Check if any messages in this chat match our invitation's user
              if (
                messages.some((msg) => {
                  // Check all possible sender ID fields
                  const senderMatches =
                    (msg.sender_id &&
                      msg.sender_id === invitation.linkedin_user_id) ||
                    (msg.sender_attendee_id &&
                      msg.sender_attendee_id === invitation.linkedin_user_id);

                  if (senderMatches) {
                    console.log("Found matching sender in chat", chat.id);
                    return true;
                  }
                  return false;
                })
              ) {
                matchingChat = chat;
                break;
              }
            } catch (error) {
              console.error(
                `Error getting messages for chat ${chat.id}:`,
                error
              );
            }
          }
        }

        if (!matchingChat) {
          console.log(
            "No matching chat found for user",
            invitation.linkedin_user_id
          );
          continue;
        }

        // Get messages in this chat
        const { items: messages } = await client.messaging.getAllMessages({
          account_id: profileData.unipile_account_id,
          provider: "LINKEDIN",
          chat_id: matchingChat.id,
        });

        // Enhanced filter that checks multiple fields
        const responsesFromOther = messages.filter((msg) => {
          // Skip messages from the account owner
          if (msg.is_sender === 1) {
            return false;
          }

          // Try multiple ID fields to find responses
          return true; // Consider all non-sender messages as responses
        });

        if (responsesFromOther.length > 0) {
          console.log(
            "Found responses:",
            responsesFromOther.map((msg) => msg.text)
          );

          // Update the invitation as responded
          const { data: updatedInvitation, error: updateError } = await supabase
            .from("invitation_users")
            .update({
              has_responded: true,
              first_response_at: new Date().toISOString(),
            })
            .eq("id", invitation.id)
            .select()
            .single();

          if (updateError) {
            console.error("Error updating invitation response:", updateError);
            continue;
          }

          results.push({
            id: invitation.id,
            status: "responded",
            response_text: responsesFromOther[0].text || "No text content",
          });
        }
      } catch (error) {
        console.error(
          `Error checking responses for invitation ${invitation.id}:`,
          error
        );
      }
    }

    return NextResponse.json({
      message: `Checked ${acceptedInvitations.length} invitations for responses`,
      results,
    });
  } catch (error) {
    console.error("Cron job error:", error);
    return NextResponse.json(
      { error: error.message || "Cron job failed" },
      { status: 500 }
    );
  }
}

================
File: app/api/lead/route.js
================
import { NextResponse } from "next/server";
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

// This route is used to store the leads that are generated from the landing page.
// The API call is initiated by <ButtonLead /> component
export async function POST(req) {
  const body = await req.json();

  if (!body.email) {
    return NextResponse.json({ error: "Email is required" }, { status: 400 });
  }

  try {
    const cookieStore = await cookies();
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
      {
        cookies: {
          getAll() {
            return cookieStore.getAll();
          },
          setAll(cookiesToSet) {
            try {
              cookiesToSet.forEach(({ name, value, options }) =>
                cookieStore.set(name, value, options)
              );
            } catch {
              // The `setAll` method was called from a Server Component.
              // This can be ignored if you have middleware refreshing
              // user sessions.
            }
          },
        },
      }
    );
    await supabase.from("leads").insert({ email: body.email });

    return NextResponse.json({});
  } catch (e) {
    console.error(e);
    return NextResponse.json({ error: e.message }, { status: 500 });
  }
}

================
File: app/api/linkedin/analytics/route.js
================
import { getUser } from "@/utils/supabase/getUser";
import { getLinkedInAnalytics } from "@/lib/analytics-service";
import { NextResponse } from "next/server";

export async function GET(request) {
  try {
    const user = await getUser();

    if (!user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    console.log(user.id, "userId");

    const analytics = await getLinkedInAnalytics(user.id);

    return NextResponse.json(analytics);
  } catch (error) {
    console.error("Analytics error:", error);
    return NextResponse.json(
      { error: error.message || "Failed to fetch analytics" },
      { status: 500 }
    );
  }
}

================
File: app/api/linkedin/invitations/send/route.js
================
import { NextResponse } from "next/server";
import { processInvitations } from "@/lib/invitation-service";
import { createClient } from "@/utils/supabase/server";
import { getUser } from "@/utils/supabase/getUser";
import { checkSubscription } from "@/utils/check-subscription";

// front end :
// const recipients = searchResults.map(profile => ({
//   provider_id: profile.provider_id
// }));

// // Send to invitation endpoint
// const response = await fetch('/api/linkedin/invitations', {
//   method: 'POST',
//   headers: { 'Content-Type': 'application/json' },
//   body: JSON.stringify({
//     recipients: recipients,
//     message: message
//   })
// });
export async function POST(request) {
  const supabase = await createClient();

  try {
    const user = await getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    // First check if user has access
    const subscriptionCheck = await checkSubscription(user.id, true, true);

    // If user needs checkout, return the checkout URL
    if (subscriptionCheck.needsCheckout) {
      console.log({
        error: "Subscription required",
        checkoutUrl:
          subscriptionCheck.checkoutUrl || subscriptionCheck.redirectUrl,
      });
      return NextResponse.json(
        {
          error: "Subscription required",
          checkoutUrl:
            subscriptionCheck.checkoutUrl || subscriptionCheck.redirectUrl,
        },
        { status: 402 }
      );
    }

    const { data: profile } = await supabase
      .from("profiles")
      .select("unipile_account_id")
      .eq("user_id", user.id)
      .single();

    if (!profile?.unipile_account_id) {
      return NextResponse.json(
        { error: "LinkedIn not connected" },
        { status: 400 }
      );
    }

    // Get data from request
    const body = await request.json();
    const { recipients, message, templateName, followUpMessage } = body;

    // Validate request
    if (!recipients) {
      return NextResponse.json(
        { error: "Missing recipients data" },
        { status: 400 }
      );
    }

    // First, create or get the template
    let templateId;
    if (followUpMessage) {
      const { data: template, error: templateError } = await supabase
        .from("invitation_templates")
        .insert({
          user_id: user.id,
          name: templateName || `Template ${new Date().toISOString()}`,
          follow_up_message: followUpMessage,
        })
        .select()
        .single();

      if (templateError) {
        console.error("Failed to create template:", templateError);
        return NextResponse.json(
          { error: "Failed to create template" },
          { status: 500 }
        );
      }

      templateId = template.id;
    }

    // Format recipients for processing
    let formattedRecipients = [];
    if (Array.isArray(recipients)) {
      if (typeof recipients[0] === "string") {
        formattedRecipients = recipients.map((id) => ({ identifier: id }));
      } else {
        formattedRecipients = recipients;
      }
    } else if (typeof recipients === "string") {
      formattedRecipients = [{ identifier: recipients }];
    } else if (recipients.identifier || recipients.provider_id) {
      formattedRecipients = [recipients];
    } else {
      return NextResponse.json(
        { error: "Invalid recipients format" },
        { status: 400 }
      );
    }

    // Generate a unique job ID
    const jobId = `inv_${Date.now()}_${Math.random()
      .toString(36)
      .substring(2, 9)}`;

    // Store job reference in database for tracking
    const { error } = await supabase.from("invitation_jobs").insert({
      job_id: jobId,
      user_id: user.id,
      template_id: templateId, // Link to the template if one was created
      status: "queued",
      total_invitations: formattedRecipients.length,
      invitations_sent: 0,
      message: message, // Store the initial connection message
      created_at: new Date().toISOString(),
    });

    if (error) {
      console.error("Failed to create job record:", error);
      return NextResponse.json(
        { error: "Failed to create job" },
        { status: 500 }
      );
    }

    // Start processing in background without awaiting
    processInvitations({
      accountId: profile.unipile_account_id,
      recipients: formattedRecipients,
      message,
      userId: user.id,
      jobId,
      templateId,
    }).catch((error) => {
      console.error("Error in background processing:", error);

      // Update job as failed in case of error
      supabase
        .from("invitation_jobs")
        .update({
          status: "failed",
          error_message: error.message,
          last_updated: new Date().toISOString(),
        })
        .eq("job_id", jobId);
    });

    return NextResponse.json({
      success: true,
      message: `${formattedRecipients.length} invitation(s) queued for processing`,
      jobId,
      templateId,
    });
  } catch (error) {
    console.error("Error in invitation API:", error);
    return NextResponse.json(
      { error: "Failed to process invitation request" },
      { status: 500 }
    );
  }
}

================
File: app/api/linkedin/invitations/status/[jobId]/route.js
================
// app/api/linkedin/invitations/status/[jobId]/route.ts
import { NextResponse } from "next/server";
import { createClient } from "@/utils/supabase/server";
import { getUser } from "@/utils/supabase/getUser";

export async function GET(request, params) {
  const supabase = await createClient();
  const jobId = params.jobId;

  try {
    const user = await getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { data: job, error } = await supabase
      .from("invitation_jobs")
      .select("*")
      .eq("job_id", jobId)
      .eq("user_id", user.id)
      .single();

    if (error || !job) {
      return NextResponse.json({ error: "Job not found" }, { status: 404 });
    }

    // Calculate estimated time remaining based on remaining invitations
    const remainingInvitations = job.total_invitations - job.invitations_sent;
    const estimatedSecondsRemaining =
      job.status === "completed" ? 0 : remainingInvitations * 60;

    // Format as minutes if it's a significant amount of time
    let estimatedTimeDisplay;
    if (estimatedSecondsRemaining < 60) {
      estimatedTimeDisplay = `${estimatedSecondsRemaining} seconds`;
    } else {
      const minutes = Math.ceil(estimatedSecondsRemaining / 60);
      estimatedTimeDisplay = `${minutes} minute${minutes > 1 ? "s" : ""}`;
    }

    return NextResponse.json({
      status: job.status,
      progress: {
        total: job.total_invitations,
        sent: job.invitations_sent || 0,
        failed: job.invitations_failed || 0,
        remaining: remainingInvitations,
      },
      startedAt: job.started_at,
      completedAt: job.completed_at,
      estimatedTimeRemaining: estimatedSecondsRemaining,
      estimatedTimeDisplay: estimatedTimeDisplay,
      percentComplete: Math.round(
        (job.invitations_sent / job.total_invitations) * 100
      ),
    });
  } catch (error) {
    console.error("Error fetching job status:", error);
    return NextResponse.json(
      { error: "Failed to fetch job status" },
      { status: 500 }
    );
  }
}

================
File: app/api/linkedin/profile/route.js
================
import { NextResponse } from "next/server";
import { getUser } from "@/utils/supabase/getUser";
import { unipileClient } from "@/utils/unipileClient";
import { createClient } from "@/utils/supabase/server";

export async function GET(request) {
  const supabase = await createClient();

  try {
    const user = await getUser();
    console.log(user);
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    // Get Unipile account ID from database
    const { data: profile } = await supabase
      .from("profiles")
      .select("unipile_account_id")
      .eq("user_id", user.id)
      .single();

    if (!profile?.unipile_account_id) {
      return NextResponse.json(
        { error: "LinkedIn not connected" },
        { status: 400 }
      );
    }

    // Fetch LinkedIn profile from Unipile
    const client = unipileClient();

    const linkedinProfile = await client.users.getOwnProfile(
      profile.unipile_account_id
    );

    return NextResponse.json(linkedinProfile);
  } catch (error) {
    console.error("Profile fetch error:", error);
    return NextResponse.json(
      { error: "Failed to fetch profile" },
      { status: 500 }
    );
  }
}

================
File: app/api/linkedin/recommendations/route.js
================
import { getUser } from "@/utils/supabase/getUser";
import { createClient } from "@/utils/supabase/server";
import { unipileClient } from "@/utils/unipileClient";
import { NextResponse } from "next/server";

export async function GET(request) {
  const supabase = await createClient();

  try {
    const user = await getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    //  Get Unipile account ID
    const { data: profile } = await supabase
      .from("profiles")
      .select("unipile_account_id")
      .eq("user_id", user.id)
      .single();

    if (!profile?.unipile_account_id) {
      return NextResponse.json(
        { error: "LinkedIn not connected" },
        { status: 400 }
      );
    }

    const client = unipileClient();

    const { items } = await client.users.getAllRelations({
      account_id: profile.unipile_account_id,
      limit: 10, // Get top 10 recommendations
    });

    return NextResponse.json(items);
  } catch (error) {
    console.error("Recommendations error:", error);
    return NextResponse.json(
      { error: "Failed to get recommendations" },
      { status: 500 }
    );
  }
}

================
File: app/api/linkedin/saved_profile/[id]/route.js
================
import { getUser } from "@/utils/supabase/getUser";
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

// In front:
// const response = await fetch(`/api/saved-profiles/${savedProfileId}`, {
//   method: 'DELETE'
// });

export async function DELETE(request, props) {
  const params = await props.params;
  const supabase = await createClient();
  const profileId = params.id;

  try {
    const { user } = await getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const { error } = await supabase.from("saved_profiles").delete().match({
      id: profileId,
      user_id: user.id,
    });

    if (error) throw error;

    return new NextResponse(null, { status: 204 });
  } catch (error) {
    console.error("Delete error:", error);
    return NextResponse.json(
      { error: "Failed to delete profile" },
      { status: 500 }
    );
  }
}

================
File: app/api/linkedin/saved_profile/route.js
================
import { getUser } from "@/utils/supabase/getUser";
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function POST(request) {
  const supabase = createClient();

  try {
    const user = await getUser();
    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    const profileData = await request.json();

    // Check if profile already exists
    const { data: existing } = await supabase
      .from("saved_profiles")
      .select()
      .eq("user_id", user.id)
      .eq("profile_id", profileData.profile_id)
      .single();

    if (existing) {
      return NextResponse.json(
        { error: "Profile already saved" },
        { status: 409 }
      );
    }

    const { data, error } = await supabase
      .from("saved_profiles")
      .insert({
        user_id: user.id,
        profile_data: profileData,
        profile_id: profileData.profile_id,
      })
      .select()
      .single();

    if (error) throw error;

    // LATER IF YOU WANT TO TRACK CONNECTIONS IF IT IS REQUESTED OR CANCLED ETC...
    // await supabase
    // .from('connection_requests')
    // .insert({
    //   user_id: user.id,
    //   recipient_id: profileId,
    //   status: 'pending'
    // });

    return NextResponse.json(data, { status: 201 });
  } catch (error) {
    console.error("Save error:", error);
    return NextResponse.json(
      { error: "Failed to save profile" },
      { status: 500 }
    );
  }
}

================
File: app/api/linkedin/search/parameters/route.js
================
import { checkSubscription } from "@/utils/check-subscription";
import { getUser } from "@/utils/supabase/getUser";
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function GET(request) {
  const supabase = await createClient();
  const searchParams = request.nextUrl.searchParams;

  // Get required parameters
  const type = searchParams.get("type");
  const keywords = searchParams.get("keywords");

  // Validate required parameters
  if (!type || !keywords) {
    return NextResponse.json(
      { error: "Missing required parameters: type and keywords" },
      { status: 400 }
    );
  }

  try {
    const user = await getUser();

    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    // Check subscription
    const subscriptionCheck = await checkSubscription(user.id, true, true);
    if (subscriptionCheck.needsCheckout) {
      return NextResponse.json(
        {
          error: "Subscription required",
          checkoutUrl:
            subscriptionCheck.checkoutUrl || subscriptionCheck.redirectUrl,
        },
        { status: 402 }
      );
    }

    // Get user's Unipile account ID
    const { data: profile } = await supabase
      .from("profiles")
      .select("unipile_account_id")
      .eq("user_id", user.id)
      .single();

    if (!profile?.unipile_account_id) {
      return NextResponse.json(
        { error: "LinkedIn not connected" },
        { status: 400 }
      );
    }

    // Optional limit parameter
    const limit = searchParams.get("limit") || 10;

    // Call Unipile API to get parameter IDs
    const response = await fetch(
      `${
        process.env.UNIPILE_API_URL
      }/api/v1/linkedin/search/parameters?account_id=${
        profile.unipile_account_id
      }&type=${type}&keywords=${encodeURIComponent(keywords)}&limit=${limit}`,
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-API-KEY": process.env.UNIPILE_API_TOKEN,
        },
      }
    );

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error("Unipile API error:", errorData);
      return NextResponse.json(
        {
          message: `Parameter lookup failed: ${response.status} ${response.statusText}`,
        },
        { status: response.status }
      );
    }

    const results = await response.json();
    return NextResponse.json(results);
  } catch (error) {
    console.error("Parameter lookup error:", error);
    return NextResponse.json(
      { error: error.message || "Parameter lookup failed" },
      { status: 500 }
    );
  }
}

================
File: app/api/linkedin/search/route.js
================
import { checkSubscription } from "@/utils/check-subscription";
import { getUser } from "@/utils/supabase/getUser";
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function POST(request) {
  console.log("searching .....");
  const supabase = await createClient();

  try {
    const user = await getUser();

    if (!user)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    // First check if user has access
    const subscriptionCheck = await checkSubscription(user.id, true, true);

    // If user needs checkout, return the checkout URL
    if (subscriptionCheck.needsCheckout) {
      console.log({
        error: "Subscription required",
        checkoutUrl:
          subscriptionCheck.checkoutUrl || subscriptionCheck.redirectUrl,
      });
      return NextResponse.json(
        {
          error: "Subscription required",
          checkoutUrl:
            subscriptionCheck.checkoutUrl || subscriptionCheck.redirectUrl,
        },
        { status: 402 }
      );
    }

    const { data: profile } = await supabase
      .from("profiles")
      .select("unipile_account_id")
      .eq("user_id", user.id)
      .single();

    if (!profile?.unipile_account_id) {
      return NextResponse.json(
        { error: "LinkedIn not connected" },
        { status: 400 }
      );
    }

    const {
      keywords,
      locationIds,
      companyIds,
      industryIds,
      schoolIds,
      networkDistance,
      sortBy,
      location,
      company,
      industry,
      school,
    } = await request.json();

    // Prepare search parameters according to Unipile API requirements
    const searchParams = {
      api: "classic", // You can use "classic", "sales_navigator", or "recruiter"
      category: "people",
      limit: 20,
    };

    // Add keywords if provided
    if (keywords) {
      searchParams.keywords = keywords;
    }

    // Handle location parameters
    if (locationIds && locationIds.length > 0) {
      searchParams.location = locationIds; // Unipile expects an array of location IDs
    } else if (location) {
      searchParams.location_name = location; // Fallback to location name
    }

    // Handle company parameters
    if (companyIds && companyIds.length > 0) {
      searchParams.current_company = companyIds; // Unipile expects an array of company IDs
    } else if (company) {
      searchParams.current_company_name = company; // Fallback to company name
    }

    // Handle industry parameters
    if (industryIds && industryIds.length > 0) {
      searchParams.industry = industryIds; // Unipile expects an array of industry IDs
    } else if (industry) {
      searchParams.industry_name = industry; // Fallback to industry name
    }

    // Handle school parameters
    if (schoolIds && schoolIds.length > 0) {
      searchParams.school = schoolIds; // Unipile expects an array of school IDs
    } else if (school) {
      searchParams.school_name = school; // Fallback to school name
    }

    // Handle network distance
    if (networkDistance && networkDistance.length > 0) {
      // Map our network distance values to Unipile's expected format
      const distanceMap = {
        FIRST_DEGREE: 1,
        SECOND_DEGREE: 2,
        THIRD_DEGREE_AND_BEYOND: 3,
      };

      // Convert string values to numbers as expected by Unipile
      searchParams.network_distance = networkDistance.map((d) =>
        typeof d === "string" ? distanceMap[d] || parseInt(d) : d
      );
    }

    // Handle sort options
    if (sortBy) {
      searchParams.sort_by = sortBy.toLowerCase();
    }

    console.log("searchParams", { searchParams });

    const response = await fetch(
      `${process.env.UNIPILE_API_URL}/api/v1/linkedin/search?account_id=${profile.unipile_account_id}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-API-KEY": process.env.UNIPILE_API_TOKEN,
        },
        body: JSON.stringify(searchParams),
      }
    );

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error("Unipile API error:", errorData);
      return NextResponse.json(
        {
          error:
            errorData.detail ||
            `Search failed: ${response.status} ${response.statusText}`,
        },
        { status: response.status }
      );
    }

    const results = await response.json();

    // Format results
    const formattedResults = results.items.map((profile) => ({
      id: profile.id,
      name: profile.name,
      identifier: profile.public_identifier,
      headline: profile.headline,
      location: profile.location,
      profile_url: profile.profile_url,
      profile_picture: profile.profile_picture_url,
      profile_picture_large: profile.profile_picture_url_large,
      network_distance: profile.network_distance,
      current_position: profile.current_positions?.[0]?.role || null,
      company: profile.current_positions?.[0]?.company || null,
      shared_connections_count: profile.shared_connections_count,
    }));

    return NextResponse.json({
      results: formattedResults,
      cursor: results.cursor,
      paging: results.paging,
    });
  } catch (error) {
    console.error("Search error:", error);
    return NextResponse.json(
      { error: error.message || "Search failed" },
      { status: 500 }
    );
  }
}

================
File: app/api/reconnect/route.js
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";
import { UnipileClient } from "unipile-node-sdk";

export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const token = searchParams.get("token");
    const accountId = searchParams.get("account_id");

    const supabase = await createClient();
    const { data: profile } = await supabase
      .from("profiles")
      .select("reconnect_token, reconnect_expires_at")
      .eq("unipile_account_id", accountId)
      .single();

    //TODO LATER
    //   if (
    //     profile.reconnect_token !== token ||
    //     new Date(profile.reconnect_expires_at) < new Date()
    //   ) {
    //     return NextResponse.redirect("/auth/error");
    //   }

    const client = new UnipileClient(
      process.env.UNIPILE_API_URL,
      process.env.UNIPILE_API_TOKEN
    );

    const { url } = await client.account.createHostedAuthLink({
      type: "reconnect",
      // HARDCODED FOR NOW
      reconnect_account: accountId,
      providers: ["LINKEDIN"],
      api_url: process.env.UNIPILE_API_URL,
      success_redirect_url: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`,
      notify_url: `${process.env.NEXT_PUBLIC_APP_URL}/api/unipile/webhooks`,
      expiresOn: new Date(Date.now() + 3600 * 1000),
    });
    console.log(url);
    return NextResponse.redirect(url);
  } catch (error) {
    console.error("Fatal error:", error.body);
    return NextResponse.json(
      { error: "Webhook processing failed" },
      { status: 500 }
    );
  }
}

================
File: app/api/stripe/create-checkout/route.js
================
import { NextResponse } from "next/server";
import Stripe from "stripe";
import { getUser } from "@/utils/supabase/getUser";
import config from "@/config";
import { createClient } from "@/utils/supabase/server";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

// This function is used to create a Stripe Checkout Session (one-time payment or subscription)
// It's called by the <ButtonCheckout /> component
// Users must be authenticated. If not, it will return a response indicating the user should create an account
export async function POST(req) {
  try {
    const { priceId, successUrl, cancelUrl } = await req.json();

    // Get authenticated user
    let user = await getUser();

    // If no user, try to refresh the session
    if (!user) {
      const supabase = await createClient();
      const {
        data: { session },
      } = await supabase.auth.getSession();

      if (session) {
        // Try to refresh the session
        const { error: refreshError } = await supabase.auth.refreshSession();
        if (!refreshError) {
          // Get the user again after refresh
          const {
            data: { user: refreshedUser },
          } = await supabase.auth.getUser();
          if (refreshedUser) {
            user = refreshedUser;
          }
        }
      }

      // If still no user after refresh, return signup redirect
      if (!user) {
        return NextResponse.json(
          {
            error: "Authentication required",
            redirectToSignup: true,
            status: 401,
          },
          { status: 401 }
        );
      }
    }

    // Determine if this is the Premium plan (to add trial period)
    const premiumPlan = config.stripe.plans.find((plan) => plan.isFeatured);
    const isPremiumPlan = premiumPlan && premiumPlan.priceId === priceId;

    // Create checkout session
    const sessionOptions = {
      mode: "subscription",
      payment_method_types: ["card"],
      allow_promotion_codes: true,
      line_items: [
        {
          price: priceId,
          quantity: 1,
        },
      ],
      success_url: successUrl,
      cancel_url: cancelUrl,
      client_reference_id: user.id,
      customer_email: user.email,
    };

    // Add trial period only for Premium plan
    if (isPremiumPlan) {
      sessionOptions.subscription_data = {
        trial_period_days: 7,
      };
    }

    const session = await stripe.checkout.sessions.create(sessionOptions);

    return NextResponse.json({ url: session.url });
  } catch (error) {
    console.error("Error creating checkout session:", error);
    return NextResponse.json(
      { error: error.message || "Failed to create checkout session" },
      { status: 500 }
    );
  }
}

================
File: app/api/stripe/create-portal/route.js
================
import { NextResponse } from "next/server";
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";
import { createCustomerPortal } from "@/libs/stripe";

export async function POST(req) {
  try {
    const cookieStore = await cookies();
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
      {
        cookies: {
          getAll() {
            return cookieStore.getAll();
          },
          setAll(cookiesToSet) {
            try {
              cookiesToSet.forEach(({ name, value, options }) =>
                cookieStore.set(name, value, options)
              );
            } catch {
              // The `setAll` method was called from a Server Component.
              // This can be ignored if you have middleware refreshing
              // user sessions.
            }
          },
        },
      }
    );

    const body = await req.json();

    const {
      data: { session },
    } = await supabase.auth.getSession();

    // User who are not logged in can't make a purchase
    if (!session) {
      return NextResponse.json(
        { error: "You must be logged in to view billing information." },
        { status: 401 }
      );
    } else if (!body.returnUrl) {
      return NextResponse.json(
        { error: "Return URL is required" },
        { status: 400 }
      );
    }

    const { data } = await supabase
      .from("profiles")
      .select("*")
      .eq("id", session?.user?.id)
      .single();

    if (!data?.customer_id) {
      return NextResponse.json(
        {
          error: "You don't have a billing account yet. Make a purchase first.",
        },
        { status: 400 }
      );
    }

    const stripePortalUrl = await createCustomerPortal({
      customerId: data.customer_id,
      returnUrl: body.returnUrl,
    });

    return NextResponse.json({
      url: stripePortalUrl,
    });
  } catch (e) {
    console.error(e);
    return NextResponse.json({ error: e?.message }, { status: 500 });
  }
}

================
File: app/api/stripe/customer-portal/route.js
================
import { NextResponse } from "next/server";
import Stripe from "stripe";
import { createClient } from "@/utils/supabase/server";
import { getUser } from "@/utils/supabase/getUser";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

export async function POST(req) {
  try {
    // Get authenticated user
    const user = await getUser();
    if (!user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const supabase = await createClient();

    // Get customer ID from profile
    const { data: profile } = await supabase
      .from("profiles")
      .select("customer_id")
      .eq("user_id", user.id)
      .single();

    if (!profile?.customer_id) {
      return NextResponse.json(
        { error: "No subscription found" },
        { status: 400 }
      );
    }

    // Create portal session
    const portalSession = await stripe.billingPortal.sessions.create({
      customer: profile.customer_id,
      return_url: `${req.headers.get("origin")}/account`,
    });

    return NextResponse.json({ url: portalSession.url });
  } catch (error) {
    console.error("Error creating portal session:", error);
    return NextResponse.json(
      { error: error.message || "Failed to create portal session" },
      { status: 500 }
    );
  }
}

================
File: app/api/unipile/webhooks/route.js
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function POST(request) {
  console.log("=== WEBHOOK STARTED ===");

  try {
    const payload = await request.json();
    console.log({ payload });

    if (!payload.account_id || !payload.name) {
      return NextResponse.json({ error: "Bad request" }, { status: 400 });
    }

    const supabase = await createClient();

    const { data: user, error: fetchError } = await supabase
      .from("profiles")
      .select("id")
      .eq("user_id", payload.name)
      .single();

    if (fetchError) {
      console.error("User lookup failed:", fetchError);
      throw fetchError;
    }
    console.log("Found user:", user);

    const { data, error } = await supabase
      .from("profiles")
      .update({
        unipile_account_id: payload.account_id,
        linkedin_status: true,
      })
      .eq("user_id", payload.name)
      .select();

    if (error) {
      console.error("Update error:", error);
      throw error;
    }
    console.log("Update successful:", data);

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Fatal error:", error);
    return NextResponse.json(
      { error: "Webhook processing failed" },
      { status: 500 }
    );
  }
}

================
File: app/api/users/route.js
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function GET() {
  try {
    const supabase = await createClient();
    const { data, error } = await supabase.auth.getUser();

    if (error || !data?.user) {
      return NextResponse.json(
        { status: 404, message: "There is no user" },
        { status: 404 }
      );
    }

    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("*")
      .eq("user_id", data.user.id)
      .single();

    if (profileError || !profile) {
      return NextResponse.json(
        { status: 404, message: "There is no profile" },
        { status: 404 }
      );
    }

    return NextResponse.json({ user: data.user, profile }, { status: 200 });
  } catch (error) {
    console.error("Error getting profile:", error);
    return NextResponse.json(
      { status: 500, message: "Internal Server Error" },
      { status: 500 }
    );
  }
}

================
File: app/api/webhook/stripe/route.js
================
import { NextResponse } from "next/server";
import { headers } from "next/headers";
import Stripe from "stripe";
import { SupabaseClient } from "@supabase/supabase-js";
import configFile from "@/config";
import { findCheckoutSession } from "@/libs/stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);
const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;

// Disable body parsing for this route
export const config = {
  api: {
    bodyParser: false,
  },
};

export async function POST(req) {
  // Get the raw body as text
  const body = await req.text();

  // Get the signature from headers
  const signature = (await headers()).get("stripe-signature");

  let data;
  let eventType;
  let event;

  // verify Stripe event is legit
  try {
    if (!signature) {
      throw new Error("No Stripe signature found in request headers");
    }

    event = stripe.webhooks.constructEvent(body, signature, webhookSecret);
  } catch (err) {
    console.error(`Webhook signature verification failed:`, err.message);
    return NextResponse.json({ error: err.message }, { status: 400 });
  }

  data = event.data;
  eventType = event.type;

  // Create a private supabase client using the secret service_role API key
  const supabase = new SupabaseClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  );

  try {
    switch (eventType) {
      case "checkout.session.completed": {
        // First payment is successful and a subscription is created
        const session = await findCheckoutSession(data.object.id);

        console.log({ session });
        const customerId = session?.customer;
        const priceId = session?.line_items?.data[0]?.price.id;
        const userId = data.object.client_reference_id;
        const plan = configFile.stripe.plans.find((p) => p.priceId === priceId);
        console.log({ plan });

        // Set subscription tier to pro
        const subscriptionTier = "pro";

        // Get subscription data to check trial status
        const subscriptionId = session?.subscription;
        let trialEndsAt = null;

        if (subscriptionId) {
          const subscription = await stripe.subscriptions.retrieve(
            subscriptionId
          );
          console.log({ subscription });
          if (subscription.status === "trialing") {
            console.log("trial");
            trialEndsAt = new Date(subscription.trial_end * 1000).toISOString();
          }
        }

        if (!plan) break;

        console.log({
          customer_id: customerId,
          price_id: priceId,
          has_access: true,
          subscription_id: subscriptionId,
          subscription_status: subscriptionId ? "active" : "inactive",
          trial_ends_at: trialEndsAt,
          subscription_created_at: new Date().toISOString(),
          subscription_tier: subscriptionTier,
        });

        // Update the profile with subscription info
        await supabase
          .from("profiles")
          .update({
            customer_id: customerId,
            price_id: priceId,
            has_access: true,
            subscription_id: subscriptionId,
            subscription_status: subscriptionId ? "active" : "inactive",
            trial_ends_at: trialEndsAt,
            subscription_created_at: new Date().toISOString(),
            subscription_tier: subscriptionTier,
          })
          .eq("user_id", userId);

        break;
      }

      case "customer.subscription.created": {
        // A new subscription is created (including trials)
        const subscription = data.object;
        const customerId = subscription.customer;

        // First try to find user by customer_id (for existing customers)
        let { data: userByCustomerId } = await supabase
          .from("profiles")
          .select("user_id")
          .eq("customer_id", customerId)
          .single();

        // If no user found by customer_id, we need to find the user by client_reference_id
        // from the checkout session that created this subscription
        if (!userByCustomerId) {
          // Get the checkout session that created this subscription
          const sessions = await stripe.checkout.sessions.list({
            subscription: subscription.id,
            limit: 1,
          });

          if (sessions.data.length > 0) {
            const userId = sessions.data[0].client_reference_id;

            if (userId) {
              // Update the user's profile with the customer_id and subscription info
              await supabase
                .from("profiles")
                .update({
                  customer_id: customerId,
                  has_access: true,
                  subscription_id: subscription.id,
                  subscription_status: subscription.status,
                  trial_ends_at: subscription.trial_end
                    ? new Date(subscription.trial_end * 1000).toISOString()
                    : null,
                })
                .eq("user_id", userId);

              console.log(
                `Updated user ${userId} with new subscription ${subscription.id}`
              );
              break;
            }
          }

          console.log("Could not find user for subscription:", subscription.id);
          break;
        }

        // If we found a user by customer_id, update their subscription info
        const trialEndsAt = subscription.trial_end
          ? new Date(subscription.trial_end * 1000).toISOString()
          : null;

        await supabase
          .from("profiles")
          .update({
            has_access: true,
            subscription_id: subscription.id,
            subscription_status: subscription.status,
            trial_ends_at: trialEndsAt,
          })
          .eq("user_id", userByCustomerId.user_id);

        break;
      }

      case "customer.subscription.updated": {
        // Subscription details changed
        const subscription = data.object;
        const customerId = subscription.customer;

        const { data: user } = await supabase
          .from("profiles")
          .select("user_id")
          .eq("customer_id", customerId)
          .single();

        if (!user) {
          console.log("No user found for customer:", customerId);
          break;
        }

        // Get the price ID from the subscription
        const priceId = subscription.items.data[0]?.price.id;

        // Find the plan and determine the tier
        const plan = configFile.stripe.plans.find((p) => p.priceId === priceId);
        const subscriptionTier = "pro";

        // Check if trial status changed
        const trialEndsAt = subscription.trial_end
          ? new Date(subscription.trial_end * 1000).toISOString()
          : null;

        // Update access based on subscription status
        const hasAccess = ["active", "trialing"].includes(subscription.status);

        await supabase
          .from("profiles")
          .update({
            has_access: hasAccess,
            subscription_status: subscription.status,
            trial_ends_at: trialEndsAt,
            cancel_at_period_end: subscription.cancel_at_period_end,
            subscription_tier: subscriptionTier,
          })
          .eq("user_id", user.user_id);

        break;
      }

      case "customer.subscription.deleted": {
        // Subscription ended or was canceled
        const subscription = data.object;
        const customerId = subscription.customer;

        const { data: user } = await supabase
          .from("profiles")
          .select("user_id")
          .eq("customer_id", customerId)
          .single();

        if (!user) {
          console.log("No user found for customer:", customerId);
          break;
        }

        await supabase
          .from("profiles")
          .update({
            has_access: false,
            subscription_status: "canceled",
            canceled_at: new Date().toISOString(),
          })
          .eq("user_id", user.user_id);

        break;
      }

      case "invoice.payment_succeeded": {
        // Invoice paid, update access if needed
        const invoice = data.object;
        const customerId = invoice.customer;
        const subscriptionId = invoice.subscription;

        // Skip one-time payments with no subscription
        if (!subscriptionId) break;

        const { data: user } = await supabase
          .from("profiles")
          .select("user_id, subscription_status")
          .eq("customer_id", customerId)
          .single();

        if (!user) {
          console.log("No user found for customer:", customerId);
          break;
        }

        // Get subscription to check plan details
        const subscription = await stripe.subscriptions.retrieve(
          subscriptionId
        );
        const priceId = subscription.items.data[0]?.price.id;
        const subscriptionTier = "pro";

        await supabase
          .from("profiles")
          .update({
            has_access: true,
            subscription_status: "active",
            subscription_tier: subscriptionTier,
            last_payment_date: new Date().toISOString(),
          })
          .eq("user_id", user.user_id);

        break;
      }

      case "invoice.payment_failed": {
        // Payment failed - notify but don't revoke access yet
        // Stripe will retry and send customer.subscription.deleted if all retries fail
        const customerId = data.object.customer;

        const { data: user } = await supabase
          .from("profiles")
          .select("user_id")
          .eq("customer_id", customerId)
          .single();

        if (!user) {
          console.log("No user found for customer:", customerId);
          break;
        }

        // Add a flag to indicate payment issues
        await supabase
          .from("profiles")
          .update({
            payment_failed: true,
            subscription_status: "past_due",
          })
          .eq("user_id", user.user_id);

        break;
      }

      default:
        console.log(`Unhandled event type: ${eventType}`);
    }
  } catch (e) {
    console.error("stripe error:", e.message, "EVENT TYPE:", eventType);
  }

  return NextResponse.json({});
}

================
File: app/auth/callback/route.js
================
import { NextResponse } from "next/server";
import { createClient } from "@/utils/supabase/server";
import Stripe from "stripe";
import { cookies } from "next/headers";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

export async function GET(request) {
  const { searchParams } = new URL(request.url);
  const code = searchParams.get("code");
  const error_description = searchParams.get("error_description");

  // Handle error case first
  if (error_description) {
    console.error("Auth error:", error_description);
    return NextResponse.redirect(
      `${process.env.NEXT_PUBLIC_APP_URL}/signin?error=${encodeURIComponent(
        error_description
      )}`
    );
  }

  if (code) {
    const supabase = await createClient();

    try {
      let error = null;

      // Exchange the code for a session
      const { error: exchangeError } =
        await supabase.auth.exchangeCodeForSession(code);
      error = exchangeError;

      if (!error) {
        // Get the current domain
        const forwardedHost = request.headers.get("x-forwarded-host");
        const host = forwardedHost || request.headers.get("host");
        const protocol =
          process.env.NODE_ENV === "production" ? "https" : "http";
        const baseUrl = `${protocol}://${host}`;

        // Check for checkout redirection cookie
        const cookieStore = await cookies();

        // If this was a sign-in from the checkout process, get the selected plan ID
        // and create a checkout session
        const hasRedirectCookie = await cookieStore.has(
          "redirectToCheckoutAfterAuth"
        );
        if (hasRedirectCookie) {
          await cookieStore.delete("redirectToCheckoutAfterAuth");

          // Try to extract the selectedPlanId from the cookie
          const selectedPlanId = (await cookieStore.get("selectedPlanId"))
            ?.value;

          if (selectedPlanId) {
            await cookieStore.delete("selectedPlanId");

            // Get user info needed for checkout
            const {
              data: { user },
            } = await supabase.auth.getUser();

            if (user) {
              // Create a Stripe checkout session
              const session = await stripe.checkout.sessions.create({
                mode: "subscription",
                payment_method_types: ["card"],
                allow_promotion_codes: true,
                line_items: [
                  {
                    price: selectedPlanId,
                    quantity: 1,
                  },
                ],
                success_url: `${baseUrl}/dashboard?checkout=success`,
                cancel_url: `${baseUrl}?checkout=cancel`,
                client_reference_id: user.id,
                customer_email: user.email,
                // Add trial period for Premium plan
                subscription_data: {
                  trial_period_days: 7,
                },
              });

              // Redirect to Stripe checkout
              return NextResponse.redirect(session.url);
            }
          }
        }

        // Default redirect to dashboard
        return NextResponse.redirect(`${baseUrl}/dashboard`);
      } else {
        console.error("Error during authentication callback:", error);
        return NextResponse.redirect(
          `${
            process.env.NEXT_PUBLIC_APP_URL
          }/signin?error=auth-failed&message=${encodeURIComponent(
            error.message
          )}`
        );
      }
    } catch (err) {
      console.error("Exception during auth callback:", err);
      return NextResponse.redirect(
        `${process.env.NEXT_PUBLIC_APP_URL}/signin?error=unexpected-error`
      );
    }
  }

  // If no code, redirect to login
  return NextResponse.redirect(
    `${process.env.NEXT_PUBLIC_APP_URL}/signin?error=missing-code`
  );
}

================
File: app/blog/_assets/components/Avatar.js
================
import Link from "next/link";
import Image from "next/image";

// This is the author avatar that appears in the article page and in <CardArticle /> component
const Avatar = ({ article }) => {
  return (
    <Link
      href={`/blog/author/${article.author.slug}`}
      title={`Posts by ${article.author.name}`}
      className="inline-flex items-center gap-2 group"
      rel="author"
    >
      <span itemProp="author">
        <Image
          src={article.author.avatar}
          // alt={`Avatar of ${article.author.name}`}
          alt=""
          className="w-7 h-7 rounded-full object-cover object-center"
          width={28}
          height={28}
        />
      </span>
      <span className="group-hover:underline">{article.author.name}</span>
    </Link>
  );
};

export default Avatar;

================
File: app/blog/_assets/components/BadgeCategory.js
================
import Link from "next/link";

// This is the category badge that appears in the article page and in <CardArticle /> component
const Category = ({ category, extraStyle }) => {
  return (
    <Link
      href={`/blog/category/${category.slug}`}
      className={`badge badge-sm md:badge-md hover:badge-primary ${
        extraStyle ? extraStyle : ""
      }`}
      title={`Posts in ${category.title}`}
      rel="tag"
    >
      {category.titleShort}
    </Link>
  );
};

export default Category;

================
File: app/blog/_assets/components/CardArticle.js
================
import Link from "next/link";
import Image from "next/image";
import BadgeCategory from "./BadgeCategory";
import Avatar from "./Avatar";

// This is the article card that appears in the home page, in the category page, and in the author's page
const CardArticle = ({
  article,
  tag = "h2",
  showCategory = true,
  isImagePriority = false,
}) => {
  const TitleTag = tag;

  return (
    <article className="card bg-base-200 rounded-box overflow-hidden">
      {article.image?.src && (
        <Link
          href={`/blog/${article.slug}`}
          className="link link-hover hover:link-primary"
          title={article.title}
          rel="bookmark"
        >
          <figure>
            <Image
              src={article.image.src}
              alt={article.image.alt}
              width={600}
              height={338}
              priority={isImagePriority}
              placeholder="blur"
              className="aspect-video object-center object-cover hover:scale-[1.03] duration-200 ease-in-out"
            />
          </figure>
        </Link>
      )}
      <div className="card-body">
        {/* CATEGORIES */}
        {showCategory && (
          <div className="flex flex-wrap gap-2">
            {article.categories.map((category) => (
              <BadgeCategory category={category} key={category.slug} />
            ))}
          </div>
        )}

        {/* TITLE WITH RIGHT TAG */}
        <TitleTag className="mb-1 text-xl md:text-2xl font-bold">
          <Link
            href={`/blog/${article.slug}`}
            className="link link-hover hover:link-primary"
            title={article.title}
            rel="bookmark"
          >
            {article.title}
          </Link>
        </TitleTag>

        <div className=" text-base-content/80 space-y-4">
          {/* DESCRIPTION */}
          <p className="">{article.description}</p>

          {/* AUTHOR & DATE */}
          <div className="flex items-center gap-4 text-sm">
            <Avatar article={article} />

            <span itemProp="datePublished">
              {new Date(article.publishedAt).toLocaleDateString("en-US", {
                month: "long",
                day: "numeric",
              })}
            </span>
          </div>
        </div>
      </div>
    </article>
  );
};

export default CardArticle;

================
File: app/blog/_assets/components/CardCategory.js
================
import Link from "next/link";

// This is the category card that appears in the home page and in the category page
const CardCategory = ({ category, tag = "h2" }) => {
  const TitleTag = tag;

  return (
    <Link
      className="p-4 bg-base-200 text-base-content rounded-box duration-200 hover:bg-neutral hover:text-neutral-content"
      href={`/blog/category/${category.slug}`}
      title={category.title}
      rel="tag"
    >
      <TitleTag className="md:text-lg font-medium">
        {category?.titleShort || category.title}
      </TitleTag>
    </Link>
  );
};

export default CardCategory;

================
File: app/blog/_assets/components/HeaderBlog.js
================
"use client";

import { useState, useEffect } from "react";
import { useSearchParams } from "next/navigation";
import { Popover, Transition } from "@headlessui/react";
import Link from "next/link";
import Image from "next/image";
import logo from "@/app/icon.png";
import config from "@/config";
import { categories } from "../content";
import ButtonSignin from "@/components/ButtonSignin";

const links = [
  {
    href: "/blog/",
    label: "All Posts",
  },
];

const cta = (
  <ButtonSignin text="Get Cooking" extraStyle="btn-primary md:btn-sm" />
);

const ButtonPopoverCategories = () => {
  return (
    <Popover className="relative z-30">
      {({ open }) => (
        <>
          <Popover.Button
            className="link no-underline flex flex-nowrap items-center gap-1 text-base-content/80 hover:text-base-content active:text-base-content focus:text-base-content duration-100"
            title="Open Blog categories"
          >
            Categories
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className={`w-5 h-5 duration-200 ${
                open ? "transform rotate-180 " : ""
              }`}
            >
              <path
                fillRule="evenodd"
                d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
                clipRule="evenodd"
              />
            </svg>
          </Popover.Button>
          <Transition
            enter="transition duration-100 ease-out"
            enterFrom="transform scale-95 opacity-0"
            enterTo="transform scale-100 opacity-100"
            leave="transition duration-75 ease-out"
            leaveFrom="transform scale-100 opacity-100"
            leaveTo="transform scale-95 opacity-0"
          >
            <Popover.Panel className="absolute left-0 z-30 mt-3 w-screen max-w-full sm:max-w-sm transform">
              {({ close }) => (
                <div className="overflow-hidden rounded-box shadow-lg ring-1 ring-base-content ring-opacity-5">
                  <div className="relative grid gap-2 bg-base-100 p-2 overflow-hidden">
                    {categories.map((category) => (
                      <div key={category.slug} onClick={() => close()}>
                        <Link
                          className="block text-left p-3 -m-1 cursor-pointer hover:bg-base-200 rounded-box duration-200"
                          href={`/blog/category/${category.slug}`}
                        >
                          <div className="">
                            <p className="font-medium mb-0.5">
                              {category?.titleShort || category.title}
                            </p>
                            <p className="text-sm opacity-80">
                              {category?.descriptionShort ||
                                category.description}
                            </p>
                          </div>
                        </Link>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </Popover.Panel>
          </Transition>
        </>
      )}
    </Popover>
  );
};

const ButtonAccordionCategories = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <>
      <button
        onClick={(e) => {
          e.preventDefault();
          setIsOpen(!isOpen);
        }}
        aria-expanded={isOpen}
        type="button"
        className="link no-underline flex justify-between items-center w-full "
      >
        Categories
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          className={`w-5 h-5 duration-200 ${
            isOpen ? "transform rotate-180 " : ""
          }`}
        >
          <path
            fillRule="evenodd"
            d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
            clipRule="evenodd"
          />
        </svg>
      </button>

      {isOpen && (
        <ul className="space-y-4">
          {categories.map((category) => (
            <li key={category.slug}>
              <Link
                href={`/blog/category/${category.slug}`}
                className="text-base-content/80 hover:text-base-content duration-100 link link-hover"
              >
                {category?.titleShort || category.title}
              </Link>
            </li>
          ))}
        </ul>
      )}
    </>
  );
};

// This is the header that appears on all pages in the /blog folder.
// By default it shows the logo, the links, and the CTA.
// In the links, there's a popover with the categories.
const HeaderBlog = () => {
  const searchParams = useSearchParams();
  const [isOpen, setIsOpen] = useState(false);

  // setIsOpen(false) when the route changes (i.e: when the user clicks on a link on mobile)
  useEffect(() => {
    setIsOpen(false);
  }, [searchParams]);

  return (
    <header className="bg-base-200">
      <nav className="max-w-7xl flex items-center justify-between px-8 py-3 mx-auto">
        {/* Your logo/name on large screens */}
        <div className="flex lg:flex-1">
          <Link
            className="flex items-center gap-2 shrink-0 "
            href="/"
            title={`${config.appName} hompage`}
          >
            <Image
              src={logo}
              alt={`${config.appName} logo`}
              className="w-8"
              priority={true}
              width={32}
              height={32}
            />
            <span className="font-extrabold text-lg">{config.appName}</span>
          </Link>
        </div>
        {/* Burger button to open menu on mobile */}
        <div className="flex lg:hidden">
          <button
            type="button"
            className="-m-2.5 inline-flex items-center justify-center rounded-box p-2.5"
            onClick={() => setIsOpen(true)}
          >
            <span className="sr-only">Open main menu</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={1.5}
              stroke="currentColor"
              className="w-6 h-6 text-base-content"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
              />
            </svg>
          </button>
        </div>

        {/* Your links on large screens */}
        <div className="hidden lg:flex lg:justify-center lg:gap-12 lg:items-center">
          {links.map((link) => (
            <Link
              href={link.href}
              key={link.href}
              className="link link-hover text-base-content/80 hover:text-base-content active:text-base-content focus:text-base-content duration-100"
              title={link.label}
            >
              {link.label}
            </Link>
          ))}

          <ButtonPopoverCategories />
        </div>

        {/* CTA on large screens */}
        <div className="hidden lg:flex lg:justify-end lg:flex-1">{cta}</div>
      </nav>

      {/* Mobile menu, show/hide based on menu state. */}
      <div className={`relative z-50 ${isOpen ? "" : "hidden"}`}>
        <div
          className={`fixed inset-y-0 right-0 z-10 w-full px-8 py-3 overflow-y-auto bg-base-200 sm:max-w-sm sm:ring-1 sm:ring-neutral/10 transform origin-right transition ease-in-out duration-300`}
        >
          {/* Your logo/name on small screens */}
          <div className="flex items-center justify-between">
            <Link
              className="flex items-center gap-2 shrink-0 "
              title={`${config.appName} hompage`}
              href="/"
            >
              <Image
                src={logo}
                alt={`${config.appName} logo`}
                className="w-8"
                placeholder="blur"
                priority={true}
                width={32}
                height={32}
              />
              <span className="font-extrabold text-lg">{config.appName}</span>
            </Link>
            <button
              type="button"
              className="-m-2.5 rounded-box p-2.5"
              onClick={() => setIsOpen(false)}
            >
              <span className="sr-only">Close menu</span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="w-6 h-6"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>

          {/* Your links on small screens */}
          <div className="flow-root mt-6">
            <div className="py-4">
              <div className="flex flex-col gap-y-4 items-start">
                {links.map((link) => (
                  <Link
                    href={link.href}
                    key={link.href}
                    className="link link-hover"
                    title={link.label}
                  >
                    {link.label}
                  </Link>
                ))}
                <ButtonAccordionCategories />
              </div>
            </div>
            <div className="divider"></div>
            {/* Your CTA on small screens */}
            <div className="flex flex-col">{cta}</div>
          </div>
        </div>
      </div>
    </header>
  );
};

export default HeaderBlog;

================
File: app/blog/_assets/content.js
================
import Image from "next/image";
import authorImg from "@/app/blog/_assets/images/authors/author.png";

// Import blog post header images
import prospectingStrategiesImg from "@/public/blog/prospecting-strategies/header.jpg";
import linkedinTipsImg from "@/public/blog/linkedin-tips/header.jpg";
import emailOutreachImg from "@/public/blog/email-outreach/header.jpg";
import salesAutomationImg from "@/public/blog/sales-automation/header.jpg";

// ==================================================================================================================================================================
// BLOG CATEGORIES 🏷️
// ==================================================================================================================================================================

// These slugs are used to generate pages in the /blog/category/[categoryI].js. It's a way to group articles by category.
const categorySlugs = {
  strategy: "strategy",
  tutorial: "tutorial",
  insights: "insights",
  automation: "automation",
};

// All the blog categories data display in the /blog/category/[categoryI].js pages.
export const categories = [
  {
    // The slug to use in the URL, from the categorySlugs object above.
    slug: categorySlugs.strategy,
    // The title to display the category title (h1), the category badge, the category filter, and more. Less than 60 characters.
    title: "Prospecting Strategies",
    // A short version of the title above, display in small components like badges. 1 or 2 words
    titleShort: "Strategies",
    // The description of the category to display in the category page. Up to 160 characters.
    description:
      "Learn effective B2B prospecting strategies to identify and connect with your ideal customers.",
    // A short version of the description above, only displayed in the <Header /> on mobile. Up to 60 characters.
    descriptionShort: "Effective B2B prospecting strategies.",
  },
  {
    slug: categorySlugs.tutorial,
    title: "How-To Guides",
    titleShort: "Tutorials",
    description:
      "Step-by-step tutorials on using Prospectr and implementing successful prospecting techniques.",
    descriptionShort: "Learn how to prospect effectively with our guides.",
  },
  {
    slug: categorySlugs.insights,
    title: "Industry Insights",
    titleShort: "Insights",
    description:
      "Stay updated with the latest trends, best practices, and insights in B2B prospecting and lead generation.",
    descriptionShort: "Latest trends in B2B prospecting.",
  },
  {
    slug: categorySlugs.automation,
    title: "Sales Automation",
    titleShort: "Automation",
    description:
      "Discover how to automate your prospecting workflow and scale your outreach efforts efficiently.",
    descriptionShort: "Automate your prospecting workflow.",
  },
];

// ==================================================================================================================================================================
// BLOG AUTHORS 📝
// ==================================================================================================================================================================

// Social icons used in the author's bio.
const socialIcons = {
  twitter: {
    name: "Twitter",
    svg: (
      <svg
        version="1.1"
        id="svg5"
        x="0px"
        y="0px"
        viewBox="0 0 1668.56 1221.19"
        className="w-9 h-9"
        // Using a dark theme? ->  className="w-9 h-9 fill-white"
      >
        <g id="layer1" transform="translate(52.390088,-25.058597)">
          <path
            id="path1009"
            d="M283.94,167.31l386.39,516.64L281.5,1104h87.51l340.42-367.76L984.48,1104h297.8L874.15,558.3l361.92-390.99   h-87.51l-313.51,338.7l-253.31-338.7H283.94z M412.63,231.77h136.81l604.13,807.76h-136.81L412.63,231.77z"
          />
        </g>
      </svg>
    ),
  },
  linkedin: {
    name: "LinkedIn",
    svg: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        className="w-6 h-6"
        // Using a dark theme? ->  className="w-6 h-6 fill-white"
        viewBox="0 0 24 24"
      >
        <path d="M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z" />
      </svg>
    ),
  },
  github: {
    name: "GitHub",
    svg: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        className="w-6 h-6"
        // Using a dark theme? ->  className="w-6 h-6 fill-white"
        viewBox="0 0 24 24"
      >
        <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
      </svg>
    ),
  },
};

// These slugs are used to generate pages in the /blog/author/[authorId].js. It's a way to show all articles from an author.
const authorSlugs = {
  main: "prospectr-team",
};

// All the blog authors data display in the /blog/author/[authorId].js pages.
export const authors = [
  {
    // The slug to use in the URL, from the authorSlugs object above.
    slug: authorSlugs.main,
    // The name to display in the author's bio. Up to 60 characters.
    name: "Prospectr Team",
    // The job to display in the author's bio. Up to 60 characters.
    job: "B2B Prospecting Experts",
    // The description of the author to display in the author's bio. Up to 160 characters.
    description:
      "The Prospectr team consists of experienced B2B sales professionals and growth experts who have helped thousands of businesses improve their prospecting and lead generation efforts.",
    // The avatar of the author to display in the author's bio and avatar badge. It's better to use a local image, but you can also use an external image (https://...)
    avatar: authorImg,
    // A list of social links to display in the author's bio.
    socials: [
      {
        name: socialIcons.twitter.name,
        icon: socialIcons.twitter.svg,
        url: "https://twitter.com/prospectr",
      },
      {
        name: socialIcons.linkedin.name,
        icon: socialIcons.linkedin.svg,
        url: "https://www.linkedin.com/company/prospectr",
      },
    ],
  },
];

// ==================================================================================================================================================================
// BLOG ARTICLES 📚
// ==================================================================================================================================================================

// These styles are used in the content of the articles. When you update them, all articles will be updated.
const styles = {
  h2: "text-2xl lg:text-4xl font-bold tracking-tight mb-4 text-base-content",
  h3: "text-xl lg:text-2xl font-bold tracking-tight mb-2 text-base-content",
  p: "text-base-content/90 leading-relaxed mb-6",
  ul: "list-inside list-disc text-base-content/90 leading-relaxed mb-6",
  li: "list-item mb-2",
  // Altnernatively, you can use the library react-syntax-highlighter to display code snippets.
  code: "text-sm font-mono bg-neutral text-neutral-content p-6 rounded-box my-4 overflow-x-scroll select-all",
  codeInline:
    "text-sm font-mono bg-base-300 px-1 py-0.5 rounded-box select-all",
};

// All the blog articles data display in the /blog/[articleId].js pages.
export const articles = [
  {
    // The unique slug to use in the URL. It's also used to generate the canonical URL.
    slug: "effective-prospecting-strategies-2024",
    // The title to display in the article page (h1). Less than 60 characters. It's also used to generate the meta title.
    title: "10 Effective B2B Prospecting Strategies for 2024",
    // The description of the article to display in the article page. Up to 160 characters. It's also used to generate the meta description.
    description:
      "Discover the most effective B2B prospecting strategies that will help you identify, connect with, and convert high-quality leads in 2024.",
    // An array of categories of the article. It's used to generate the category badges, the category filter, and more.
    categories: [
      categories.find((category) => category.slug === categorySlugs.strategy),
    ],
    // The author of the article. It's used to generate a link to the author's bio page.
    author: authors.find((author) => author.slug === authorSlugs.main),
    // The date of the article. It's used to generate the meta date.
    publishedAt: "2024-03-13",
    image: {
      // The image to display in <CardArticle /> components.
      src: prospectingStrategiesImg,
      // The relative URL of the same image to use in the Open Graph meta tags & the Schema Markup JSON-LD.
      urlRelative: "/blog/prospecting-strategies/header.jpg",
      alt: "B2B Prospecting Strategies Illustration",
    },
    // The actual content of the article that will be shown under the <h1> title in the article page.
    content: (
      <>
        <Image
          src={prospectingStrategiesImg}
          alt="B2B Prospecting Strategies Illustration"
          width={700}
          height={500}
          priority={true}
          className="rounded-box mb-8"
          placeholder="blur"
        />
        <section>
          <h2 className={styles.h2}>The Evolution of B2B Prospecting</h2>
          <p className={styles.p}>
            As we move further into 2024, B2B prospecting continues to evolve with new technologies, 
            changing buyer behaviors, and emerging best practices. This guide will help you stay ahead 
            of the curve with proven strategies that deliver results.
          </p>
        </section>

        <section>
          <h2 className={styles.h2}>Top 10 Prospecting Strategies</h2>
          
          <h3 className={styles.h3}>1. Data-Driven Prospect Identification</h3>
          <p className={styles.p}>
            Use advanced data analytics and AI to identify prospects that match your ideal customer profile. 
            Focus on companies showing buying signals and growth indicators.
          </p>

          <h3 className={styles.h3}>2. Multi-Channel Outreach</h3>
          <p className={styles.p}>
            Combine LinkedIn, email, and phone outreach in a coordinated sequence to increase response rates 
            and engagement.
          </p>

          <h3 className={styles.h3}>3. Personalized Value Propositions</h3>
          <p className={styles.p}>
            Craft tailored messages that address specific pain points and challenges of each prospect segment.
          </p>
        </section>
      </>
    ),
  },
  {
    slug: "linkedin-prospecting-tips",
    title: "LinkedIn Prospecting: A Complete Guide",
    description:
      "Master LinkedIn prospecting with our comprehensive guide. Learn how to find, connect with, and engage potential clients effectively.",
    categories: [
      categories.find((category) => category.slug === categorySlugs.tutorial),
    ],
    author: authors.find((author) => author.slug === authorSlugs.main),
    publishedAt: "2024-03-12",
    image: {
      src: linkedinTipsImg,
      urlRelative: "/blog/linkedin-tips/header.jpg",
      alt: "LinkedIn Prospecting Guide",
    },
    content: (
      <>
        <Image
          src={linkedinTipsImg}
          alt="LinkedIn Prospecting Guide"
          width={700}
          height={500}
          priority={true}
          className="rounded-box mb-8"
          placeholder="blur"
        />
        <section>
          <h2 className={styles.h2}>Why LinkedIn is Essential for B2B Prospecting</h2>
          <p className={styles.p}>
            LinkedIn has become the go-to platform for B2B prospecting, offering unparalleled access to 
            decision-makers and valuable business insights.
          </p>
        </section>
      </>
    ),
  },
  {
    slug: "email-outreach-best-practices",
    title: "Email Outreach Best Practices That Get Responses",
    description:
      "Learn how to craft compelling email sequences that engage prospects and drive responses. Includes templates and real-world examples.",
    categories: [
      categories.find((category) => category.slug === categorySlugs.strategy),
    ],
    author: authors.find((author) => author.slug === authorSlugs.main),
    publishedAt: "2024-03-11",
    image: {
      src: emailOutreachImg,
      urlRelative: "/blog/email-outreach/header.jpg",
      alt: "Email Outreach Strategies",
    },
    content: (
      <>
        <Image
          src={emailOutreachImg}
          alt="Email Outreach Strategies"
          width={700}
          height={500}
          priority={true}
          className="rounded-box mb-8"
          placeholder="blur"
        />
        <section>
          <h2 className={styles.h2}>The Art of Email Prospecting</h2>
          <p className={styles.p}>
            Email remains one of the most effective channels for B2B prospecting when done right. 
            Learn how to cut through the noise and get responses.
          </p>
        </section>
      </>
    ),
  },
  {
    slug: "sales-automation-guide",
    title: "The Complete Guide to Sales Automation",
    description:
      "Discover how to automate your sales processes without losing the personal touch. Learn about tools, workflows, and best practices.",
    categories: [
      categories.find((category) => category.slug === categorySlugs.automation),
    ],
    author: authors.find((author) => author.slug === authorSlugs.main),
    publishedAt: "2024-03-10",
    image: {
      src: salesAutomationImg,
      urlRelative: "/blog/sales-automation/header.jpg",
      alt: "Sales Automation Guide",
    },
    content: (
      <>
        <Image
          src={salesAutomationImg}
          alt="Sales Automation Guide"
          width={700}
          height={500}
          priority={true}
          className="rounded-box mb-8"
          placeholder="blur"
        />
        <section>
          <h2 className={styles.h2}>Automating Your Sales Process</h2>
          <p className={styles.p}>
            Learn how to leverage automation to scale your prospecting efforts while maintaining 
            personalization and quality of engagement.
          </p>
        </section>
      </>
    ),
  },
];

================
File: app/blog/[articleId]/page.js
================
import Link from "next/link";
import Script from "next/script";
import { articles } from "../_assets/content";
import BadgeCategory from "../_assets/components/BadgeCategory";
import Avatar from "../_assets/components/Avatar";
import { getSEOTags } from "@/libs/seo";
import config from "@/config";

export async function generateMetadata(props) {
  const params = await props.params;
  const article = articles.find((article) => article.slug === params.articleId);

  return getSEOTags({
    title: article.title,
    description: article.description,
    canonicalUrlRelative: `/blog/${article.slug}`,
    extraTags: {
      openGraph: {
        title: article.title,
        description: article.description,
        url: `/blog/${article.slug}`,
        images: [
          {
            url: article.image.urlRelative,
            width: 1200,
            height: 660,
          },
        ],
        locale: "en_US",
        type: "website",
      },
    },
  });
}

export default async function Article(props) {
  const params = await props.params;
  const article = articles.find((article) => article.slug === params.articleId);
  const articlesRelated = articles
    .filter(
      (a) =>
        a.slug !== params.articleId &&
        a.categories.some((c) =>
          article.categories.map((c) => c.slug).includes(c.slug)
        )
    )
    .sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt))
    .slice(0, 3);

  return (
    <>
      {/* SCHEMA JSON-LD MARKUP FOR GOOGLE */}
      <Script
        type="application/ld+json"
        id={`json-ld-article-${article.slug}`}
        dangerouslySetInnerHTML={{
          __html: JSON.stringify({
            "@context": "https://schema.org",
            "@type": "Article",
            mainEntityOfPage: {
              "@type": "WebPage",
              "@id": `https://${config.domainName}/blog/${article.slug}`,
            },
            name: article.title,
            headline: article.title,
            description: article.description,
            image: `https://${config.domainName}${article.image.urlRelative}`,
            datePublished: article.publishedAt,
            dateModified: article.publishedAt,
            author: {
              "@type": "Person",
              name: article.author.name,
            },
          }),
        }}
      />

      {/* GO BACK LINK */}
      <div>
        <Link
          href="/blog"
          className="link !no-underline text-base-content/80 hover:text-base-content inline-flex items-center gap-1"
          title="Back to Blog"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            className="w-5 h-5"
          >
            <path
              fillRule="evenodd"
              d="M15 10a.75.75 0 01-.75.75H7.612l2.158 1.96a.75.75 0 11-1.04 1.08l-3.5-3.25a.75.75 0 010-1.08l3.5-3.25a.75.75 0 111.04 1.08L7.612 9.25h6.638A.75.75 0 0115 10z"
              clipRule="evenodd"
            />
          </svg>
          Back to Blog
        </Link>
      </div>

      <article>
        {/* HEADER WITH CATEGORIES AND DATE AND TITLE */}
        <section className="my-12 md:my-20 max-w-[800px]">
          <div className="flex items-center gap-4 mb-6">
            {article.categories.map((category) => (
              <BadgeCategory
                category={category}
                key={category.slug}
                extraStyle="!badge-lg"
              />
            ))}
            <span className="text-base-content/80" itemProp="datePublished">
              {new Date(article.publishedAt).toLocaleDateString("en-US", {
                month: "long",
                day: "numeric",
                year: "numeric",
              })}
            </span>
          </div>

          <h1 className="text-4xl md:text-5xl lg:text-6xl font-extrabold tracking-tight mb-6 md:mb-8">
            {article.title}
          </h1>

          <p className="text-base-content/80 md:text-lg max-w-[700px]">
            {article.description}
          </p>
        </section>
        
        <div className="flex flex-col md:flex-row">
          {/* SIDEBAR WITH AUTHORS AND 3 RELATED ARTICLES */}
          <section className="max-md:pb-4 md:pl-12 max-md:border-b md:border-l md:order-last md:w-72 shrink-0 border-base-content/10">
            <p className="text-base-content/80 text-sm mb-2 md:mb-3">
              Posted by
            </p>
            <Avatar article={article} />

            {articlesRelated.length > 0 && (
              <div className="hidden md:block mt-12">
                <p className=" text-base-content/80 text-sm  mb-2 md:mb-3">
                  Related reading
                </p>
                <div className="space-y-2 md:space-y-5">
                  {articlesRelated.map((article) => (
                    <div className="" key={article.slug}>
                      <p className="mb-0.5">
                        <Link
                          href={`/blog/${article.slug}`}
                          className="link link-hover hover:link-primary font-medium"
                          title={article.title}
                          rel="bookmark"
                        >
                          {article.title}
                        </Link>
                      </p>
                      <p className="text-base-content/80 max-w-full text-sm">
                        {article.description}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </section>

          {/* ARTICLE CONTENT */}
          <section className="w-full max-md:pt-4 md:pr-20 space-y-12 md:space-y-20">
            {article.content}
          </section>
        </div>
      </article>
    </>
  );
}

================
File: app/blog/author/[authorId]/page.js
================
import Image from "next/image";
import { authors, articles } from "../../_assets/content";
import CardArticle from "../../_assets/components/CardArticle";
import { getSEOTags } from "@/libs/seo";
import config from "@/config";

export async function generateMetadata(props) {
  const params = await props.params;
  const author = authors.find((author) => author.slug === params.authorId);

  return getSEOTags({
    title: `${author.name}, Author at ${config.appName}'s Blog`,
    description: `${author.name}, Author at ${config.appName}'s Blog`,
    canonicalUrlRelative: `/blog/author/${author.slug}`,
  });
}

export default async function Author(props) {
  const params = await props.params;
  const author = authors.find((author) => author.slug === params.authorId);
  const articlesByAuthor = articles
    .filter((article) => article.author.slug === author.slug)
    .sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt));

  return (
    <>
      <section className="max-w-3xl mx-auto flex flex-col md:flex-row gap-8 mt-12 mb-24 md:mb-32">
        <div>
          <p className="text-xs uppercase tracking-wide text-base-content/80 mb-2">
            Authors
          </p>
          <h1 className="font-extrabold text-3xl lg:text-5xl tracking-tight mb-2">
            {author.name}
          </h1>
          <p className="md:text-lg mb-6 md:mb-10 font-medium">{author.job}</p>
          <p className="md:text-lg text-base-content/80">
            {author.description}
          </p>
        </div>

        <div className="max-md:order-first flex md:flex-col gap-4 shrink-0">
          <Image
            src={author.avatar}
            width={256}
            height={256}
            alt={author.name}
            priority={true}
            className="rounded-box w-[12rem] md:w-[16rem] "
          />

          {author.socials?.length > 0 && (
            <div className="flex flex-col md:flex-row gap-4">
              {author.socials.map((social) => (
                <a
                  key={social.name}
                  href={social.url}
                  className="btn btn-square"
                  // Using a dark theme? -> className="btn btn-square btn-neutral"
                  title={`Go to ${author.name} profile on ${social.name}`}
                  target="_blank"
                >
                  {social.icon}
                </a>
              ))}
            </div>
          )}
        </div>
      </section>

      <section>
        <h2 className="font-bold text-2xl lg:text-4xl tracking-tight text-center mb-8 md:mb-12">
          Most recent articles by {author.name}
        </h2>

        <div className="grid lg:grid-cols-2 gap-8">
          {articlesByAuthor.map((article) => (
            <CardArticle key={article.slug} article={article} />
          ))}
        </div>
      </section>
    </>
  );
}

================
File: app/blog/category/[categoryId]/page.js
================
import { categories, articles } from "../../_assets/content";
import CardArticle from "../../_assets/components/CardArticle";
import CardCategory from "../../_assets/components/CardCategory";
import { getSEOTags } from "@/libs/seo";
import config from "@/config";

export async function generateMetadata(props) {
  const params = await props.params;
  const category = categories.find(
    (category) => category.slug === params.categoryId
  );

  return getSEOTags({
    title: `${category.title} | Blog by ${config.appName}`,
    description: category.description,
    canonicalUrlRelative: `/blog/category/${category.slug}`,
  });
}

export default async function Category(props) {
  const params = await props.params;
  const category = categories.find(
    (category) => category.slug === params.categoryId
  );
  const articlesInCategory = articles
    .filter((article) =>
      article.categories.map((c) => c.slug).includes(category.slug)
    )
    .sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt))
    .slice(0, 3);

  return (
    <>
      <section className="mt-12 mb-24 md:mb-32 max-w-3xl mx-auto text-center">
        <h1 className="font-extrabold text-3xl lg:text-5xl tracking-tight mb-6 md:mb-12">
          {category.title}
        </h1>
        <p className="md:text-lg opacity-80 max-w-xl mx-auto">
          {category.description}
        </p>
      </section>

      <section className="mb-24">
        <h2 className="font-bold text-2xl lg:text-4xl tracking-tight text-center mb-8 md:mb-12">
          Most recent articles in {category.title}
        </h2>

        <div className="grid lg:grid-cols-2 gap-8">
          {articlesInCategory.map((article) => (
            <CardArticle
              key={article.slug}
              article={article}
              tag="h3"
              showCategory={false}
            />
          ))}
        </div>
      </section>

      <section>
        <h2 className="font-bold text-2xl lg:text-4xl tracking-tight text-center mb-8 md:mb-12">
          Other categories you might like
        </h2>

        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {categories
            .filter((c) => c.slug !== category.slug)
            .map((category) => (
              <CardCategory key={category.slug} category={category} tag="h3" />
            ))}
        </div>
      </section>
    </>
  );
}

================
File: app/blog/layout.js
================
import { Suspense } from "react";
import HeaderBlog from "./_assets/components/HeaderBlog";
import Footer from "@/components/Footer";

export default async function LayoutBlog({ children }) {
  return (
    <div>
      <Suspense>
        <HeaderBlog />
      </Suspense>

      <main className="min-h-screen max-w-6xl mx-auto p-8">{children}</main>

      <div className="h-24" />

      <Footer />
    </div>
  );
}

================
File: app/blog/page.js
================
import { categories, articles } from "./_assets/content";
import CardArticle from "./_assets/components/CardArticle";
import CardCategory from "./_assets/components/CardCategory";
import config from "@/config";
import { getSEOTags } from "@/libs/seo";

export const metadata = getSEOTags({
  title: `${config.appName} Blog | Lead Generation and Prospecting Tips`,
  description:
    "Learn about effective B2B prospecting, lead generation strategies, and how to grow your business with actionable insights and tips.",
  canonicalUrlRelative: "/blog",
});

export default async function Blog() {
  const articlesToDisplay = articles
    .sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt))
    .slice(0, 6);

  return (
    <div className="min-h-screen bg-base-100">
      {/* Hero Section */}
      <section className="relative bg-black from-primary to-secondary text-white py-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center max-w-3xl mx-auto">
            <h1 className="font-extrabold text-4xl lg:text-6xl tracking-tight mb-6">
              Insights for Growth
            </h1>
            <p className="text-xl opacity-90 leading-relaxed mb-8">
              Expert strategies, tips, and insights to supercharge your B2B prospecting 
              and lead generation efforts.
            </p>
          </div>
        </div>
      </section>

      {/* Featured Articles */}
      <section className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
        <h2 className="text-2xl font-bold mb-8">Latest Articles</h2>
        <div className="grid lg:grid-cols-3 gap-8">
          {articlesToDisplay.slice(0, 3).map((article, i) => (
            <CardArticle
              article={article}
              key={article.slug}
              isImagePriority={i === 0}
              className="h-full"
            />
          ))}
        </div>
      </section>

      {/* Categories Section */}
      <section className="bg-base-200 py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 className="text-2xl font-bold mb-8 text-center">
            Explore Topics
          </h2>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {categories.map((category) => (
              <CardCategory key={category.slug} category={category} tag="div" />
            ))}
          </div>
        </div>
      </section>

      {/* More Articles */}
      <section className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
        <h2 className="text-2xl font-bold mb-8">More Resources</h2>
        <div className="grid lg:grid-cols-3 gap-8">
          {articlesToDisplay.slice(3).map((article, i) => (
            <CardArticle
              article={article}
              key={article.slug}
              isImagePriority={false}
              className="h-full"
            />
          ))}
        </div>
      </section>

      {/* Newsletter Section */}
      <section className="bg-base-200 py-16">
        <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-2xl font-bold mb-4">Stay Updated</h2>
          <p className="text-base-content/80 mb-8">
            Get the latest prospecting strategies and industry insights delivered to your inbox.
          </p>
          <form className="flex flex-col sm:flex-row gap-4 justify-center">
            <input
              type="email"
              placeholder="Enter your email"
              className="input input-bordered w-full max-w-xs"
            />
            <button className="btn btn-primary">Subscribe</button>
          </form>
        </div>
      </section>
    </div>
  );
}

================
File: app/components/SectionBiography.tsx
================
'use client'

import { Play } from 'lucide-react'
import Image from 'next/image'
import { motion } from 'framer-motion'

function SectionBiography() {
  return (
    <section className="relative w-full py-16 md:py-24 bg-base-200/50">
      <div className="container px-4 md:px-6">
        <div className="grid gap-10 lg:grid-cols-2 lg:gap-16 items-center">
          {/* Biography Content */}
          <div className="space-y-8">
            <div className="inline-flex items-center gap-2 px-3 py-1 text-sm rounded-full bg-primary/10 text-primary">
              <span className="relative flex h-2 w-2">
                <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-primary opacity-75"></span>
                <span className="relative inline-flex rounded-full h-2 w-2 bg-primary"></span>
              </span>
              Maker of the Year 2023
            </div>
            
            <div className="space-y-4">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
                Hey, I&apos;m Marc 👋
              </h2>
              <p className="text-gray-500 dark:text-gray-400 text-lg">
                I&apos;m an entrepreneur who ships fast and needs to make decisions fast too. 
                After building 24 startups in 2 years, I&apos;ve learned that data-driven decisions 
                are crucial for success.
              </p>
              <p className="text-gray-500 dark:text-gray-400 text-lg">
                That&apos;s why I built DataFast - to help entrepreneurs like you:
              </p>
              <ul className="space-y-2 text-gray-500 dark:text-gray-400 text-lg">
                <li className="flex items-center gap-2">
                  <svg className="w-5 h-5 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                  </svg>
                  Understand traffic without complexity
                </li>
                <li className="flex items-center gap-2">
                  <svg className="w-5 h-5 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                  </svg>
                  Find growth opportunities in existing channels
                </li>
                <li className="flex items-center gap-2">
                  <svg className="w-5 h-5 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                  </svg>
                  Make revenue-driven decisions quickly
                </li>
              </ul>
            </div>
          </div>

          {/* Video Section */}
          <div className="relative aspect-video rounded-xl overflow-hidden bg-base-300">
            <div className="absolute inset-0 flex items-center justify-center">
              <button 
                className="relative z-10 inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary text-white hover:bg-primary/90 transition-colors"
                onClick={() => {
                  // Add video play logic here
                }}
              >
                <Play className="w-8 h-8" />
              </button>
            </div>
            <Image
              src="/demo-thumbnail.webp"
              alt="Product Demo Thumbnail"
              className="object-cover"
              fill
              sizes="(max-width: 768px) 100vw, 50vw"
              priority
            />
          </div>
        </div>
      </div>
    </section>
  )
}

export default SectionBiography

================
File: app/components/UpdateFrequencyInfo.jsx
================
import { Info } from "lucide-react";

export default function UpdateFrequencyInfo() {
  return (
    <div className="bg-[#0F0F0F] rounded-lg border border-[#1A1A1A] p-4">
      <div className="flex items-start gap-3">
        <Info className="w-5 h-5 text-blue-400 mt-0.5" />
        <div>
          <h4 className="text-sm font-medium text-white mb-1">Campaign Update Frequencies</h4>
          <div className="space-y-2 text-sm text-[#A1A1AA]">
            <p>• Connection requests are checked every 2 hours</p>
            <p>• Response tracking updates every 4 hours</p>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/dashboard/analytics/page.js
================
"use client";

import { useRouter } from "next/navigation";
import { useState } from "react";
import { useAnalytics } from "@/components/contexts/AnalyticsContext";
import { Suspense } from "react";

function AnalyticsContent() {
  const router = useRouter();
  const { analyticsData, refreshAnalyticsData } = useAnalytics();
  const [timeframe, setTimeframe] = useState("all");

  // Helper function to format numbers with commas
  const formatNumber = (num) => {
    return num ? num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") : "0";
  };

  // Handle refresh button click
  const handleRefresh = async () => {
    await refreshAnalyticsData();
  };

  // Handle timeframe change
  const handleTimeframeChange = (e) => {
    setTimeframe(e.target.value);
  };

  return (
    <div className="space-y-6">
      {/* Header Section */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-white">Analytics</h1>
          <p className="text-sm text-[#A1A1AA]">Track your campaign performance and metrics</p>
        </div>
        <div className="flex gap-2">
          <select 
            className="bg-[#0F0F0F] border border-[#1A1A1A] text-[#A1A1AA] rounded-md px-3 py-2 text-sm"
            value={timeframe}
            onChange={handleTimeframeChange}
          >
            <option value="7">Last 7 days</option>
            <option value="30">Last 30 days</option>
            <option value="90">Last 3 months</option>
            <option value="all">All time</option>
          </select>
          <button 
            className="btn btn-sm btn-outline" 
            onClick={handleRefresh}
            disabled={analyticsData.isLoading}
          >
            {analyticsData.isLoading ? (
              <span className="loading loading-spinner loading-xs"></span>
            ) : (
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="w-4 h-4">
                <path strokeLinecap="round" strokeLinejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
              </svg>
            )}
          </button>
        </div>
      </div>

      {/* Loading State */}
      {analyticsData.isLoading && (
        <div className="w-full flex justify-center py-12">
          <span className="loading loading-spinner loading-lg"></span>
        </div>
      )}

      {/* Error State */}
      {!analyticsData.isLoading && analyticsData.error && (
        <div className="bg-[#0F0F0F] border border-red-500 rounded-lg p-6 text-center">
          <p className="text-red-500">{analyticsData.error}</p>
          <button 
            className="mt-4 text-sm text-white hover:underline"
            onClick={handleRefresh}
          >
            Try again
          </button>
        </div>
      )}

      {/* Content when data is loaded */}
      {!analyticsData.isLoading && !analyticsData.error && analyticsData.data && (
        <>
          {/* Key Metrics */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-[#0F0F0F] border border-[#1A1A1A] p-6 rounded-lg hover:border-[#2A2A2A] transition-colors">
              <h3 className="text-sm font-medium text-white">Connection Rate</h3>
              <p className="text-2xl font-bold mt-2 text-white">
                {analyticsData.data.summary?.response_rate || "0"}%
              </p>
              <p className="text-xs text-[#A1A1AA] mt-1">Average connection rate</p>
            </div>
            <div className="bg-[#0F0F0F] border border-[#1A1A1A] p-6 rounded-lg hover:border-[#2A2A2A] transition-colors">
              <h3 className="text-sm font-medium text-white">Total Connections</h3>
              <p className="text-2xl font-bold mt-2 text-white">
                {formatNumber(analyticsData.data.summary?.total_connections || 0)}
              </p>
              <p className="text-xs text-[#A1A1AA] mt-1">Connections accepted</p>
            </div>
            <div className="bg-[#0F0F0F] border border-[#1A1A1A] p-6 rounded-lg hover:border-[#2A2A2A] transition-colors">
              <h3 className="text-sm font-medium text-white">Total Invitations</h3>
              <p className="text-2xl font-bold mt-2 text-white">
                {formatNumber(analyticsData.data.summary?.total_invitations || 0)}
              </p>
              <p className="text-xs text-[#A1A1AA] mt-1">Invitations sent</p>
            </div>
            <div className="bg-[#0F0F0F] border border-[#1A1A1A] p-6 rounded-lg hover:border-[#2A2A2A] transition-colors">
              <h3 className="text-sm font-medium text-white">Active Campaigns</h3>
              <p className="text-2xl font-bold mt-2 text-white">
                {analyticsData.data.summary?.active_campaigns || "0"}
              </p>
              <p className="text-xs text-[#A1A1AA] mt-1">
                Out of {analyticsData.data.summary?.total_campaigns || "0"} total
              </p>
            </div>
          </div>

          {/* Charts Section */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Campaign Progress */}
            <div className="bg-[#0F0F0F] border border-[#1A1A1A] p-6 rounded-lg">
              <h3 className="text-lg font-medium text-white mb-4">Campaign Progress</h3>
              {analyticsData.data.campaigns && analyticsData.data.campaigns.length > 0 ? (
                <div className="space-y-4">
                  {analyticsData.data.campaigns.slice(0, 5).map((campaign) => (
                    <div key={campaign.job_id}>
                      <div className="flex justify-between text-sm mb-1">
                        <span className="text-[#A1A1AA]">{campaign.name || `Campaign ${campaign.job_id}`}</span>
                        <span className="text-white">{campaign.response_rate || "0"}%</span>
                      </div>
                      <div className="w-full bg-[#1A1A1A] rounded-full h-2">
                        <div 
                          className="bg-green-500 h-2 rounded-full" 
                          style={{width: `${Math.min(100, parseFloat(campaign.response_rate) || 0)}%`}}
                        ></div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-center py-8 text-[#A1A1AA]">No campaign data available</p>
              )}
            </div>

            {/* Monthly Trends */}
            <div className="bg-[#0F0F0F] border border-[#1A1A1A] p-6 rounded-lg">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-medium text-white">Monthly Trends</h3>
              </div>
              {analyticsData.data.monthly_trends && analyticsData.data.monthly_trends.length > 0 ? (
                <div className="space-y-4">
                  {analyticsData.data.monthly_trends.slice(0, 5).map((month) => (
                    <div key={month.month} className="flex items-center justify-between py-2 border-b border-[#1A1A1A]">
                      <div>
                        <p className="text-sm font-medium text-white">{month.month}</p>
                        <p className="text-xs text-[#A1A1AA]">{month.invitations_sent || 0} invitations sent</p>
                      </div>
                      <div>
                        <p className="text-sm text-white">{month.connections_accepted || 0} connections</p>
                        <p className="text-xs text-[#A1A1AA] text-right">
                          {month.invitations_sent > 0 
                            ? ((month.connections_accepted / month.invitations_sent) * 100).toFixed(1) 
                            : 0}% rate
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-center py-8 text-[#A1A1AA]">No monthly data available</p>
              )}
            </div>
          </div>

          {/* Campaign Performance Table */}
          <div className="bg-[#0F0F0F] border border-[#1A1A1A] rounded-lg p-6">
            <h3 className="text-lg font-medium text-white mb-4">Campaign Performance</h3>
            {analyticsData.data.campaigns && analyticsData.data.campaigns.length > 0 ? (
              <div className="overflow-x-auto">
                <table className="w-full text-sm text-left">
                  <thead className="text-xs text-[#A1A1AA] uppercase">
                    <tr>
                      <th scope="col" className="px-4 py-3">Campaign</th>
                      <th scope="col" className="px-4 py-3">Status</th>
                      <th scope="col" className="px-4 py-3">Invitations</th>
                      <th scope="col" className="px-4 py-3">Connections</th>
                      <th scope="col" className="px-4 py-3">Rate</th>
                      <th scope="col" className="px-4 py-3">Created</th>
                    </tr>
                  </thead>
                  <tbody>
                    {analyticsData.data.campaigns.map((campaign) => (
                      <tr key={campaign.job_id} className="border-b border-[#1A1A1A]">
                        <td className="px-4 py-3 font-medium text-white">{campaign.name || `Campaign ${campaign.job_id}`}</td>
                        <td className="px-4 py-3">
                          <span className={`px-2 py-1 rounded-full text-xs ${
                            campaign.status === 'completed' ? 'bg-green-900 text-green-300' : 
                            campaign.status === 'processing' ? 'bg-blue-900 text-blue-300' : 
                            'bg-gray-800 text-gray-300'
                          }`}>
                            {campaign.status || "pending"}
                          </span>
                        </td>
                        <td className="px-4 py-3">{campaign.total_invitations || 0}</td>
                        <td className="px-4 py-3">{campaign.accepted_connections || 0}</td>
                        <td className="px-4 py-3">{campaign.response_rate || 0}%</td>
                        <td className="px-4 py-3">
                          {campaign.created_at ? new Date(campaign.created_at).toLocaleDateString() : "-"}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="text-center py-8">
                <p className="text-[#A1A1AA]">No campaign data available</p>
                <button 
                  className="mt-4 text-sm text-white hover:underline"
                  onClick={() => router.push('/dashboard/campaigns/new/leads')}
                >
                  Create your first campaign
                </button>
              </div>
            )}
          </div>
        </>
      )}

      {/* No Data State */}
      {!analyticsData.isLoading && !analyticsData.error && !analyticsData.data && (
        <div className="bg-[#0F0F0F] border border-[#1A1A1A] rounded-lg p-6 text-center py-12">
          <p className="text-[#A1A1AA]">No analytics data available</p>
          <button 
            className="mt-4 text-sm text-white hover:underline"
            onClick={() => router.push('/dashboard/campaigns/new/leads')}
          >
            Create your first campaign
          </button>
        </div>
      )}
    </div>
  );
}

export default function AnalyticsPage() {
  return (
    <Suspense fallback={
      <div className="w-full flex justify-center py-12">
        <span className="loading loading-spinner loading-lg"></span>
      </div>
    }>
      <AnalyticsContent />
    </Suspense>
  );
}

================
File: app/dashboard/campaigns/[id]/page.js
================
"use client";
import { use } from "react";

import { Button } from "@/components/ui/button";
import { ArrowLeft, Users, BarChart2, Calendar, Clock } from "lucide-react";
import { useRouter } from "next/navigation";
import UpdateFrequencyInfo from "../../../components/UpdateFrequencyInfo";

// Mock data - replace with real data later
const mockCampaigns = {
  1: {
    id: "1",
    name: "Q1 Outreach",
    status: "active",
    prospects: 250,
    progress: 45,
    replies: 42,
    replyRate: 16.8,
    startDate: "2025-01-01",
    lastActive: "2025-01-23",
    description: "Q1 outreach campaign targeting tech decision makers",
  },
  2: {
    id: "2",
    name: "Tech Founders",
    status: "draft",
    lastEdited: "2 days ago",
    description: "Campaign targeting startup founders in the tech industry",
  },
  3: {
    id: "3",
    name: "December Outreach",
    status: "completed",
    prospects: 500,
    replies: 89,
    replyRate: 17.8,
    startDate: "2024-12-01",
    completedDate: "2024-12-31",
    description: "End of year outreach campaign",
  },
};

export default function CampaignDetailsPage(props) {
  const params = use(props.params);
  const router = useRouter();
  const campaign = mockCampaigns[params.id];

  if (!campaign) {
    return (
      <div className="space-y-4">
        <Button
          variant="ghost"
          onClick={() => router.back()}
          className="text-[#C9E5FF]"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back to Campaigns
        </Button>
        <div className="text-[#C9E5FF]">Campaign not found</div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="space-y-4">
        <Button
          variant="ghost"
          onClick={() => router.back()}
          className="text-[#C9E5FF]"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back to Campaigns
        </Button>
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-2xl font-bold text-[#C9E5FF]">
              {campaign.name}
            </h1>
            <p className="text-sm text-[#A3A3A3]">{campaign.description}</p>
          </div>
          <div className="flex gap-2">
            {campaign.status === "draft" && (
              <>
                <Button variant="outline">Edit</Button>
                <Button variant="ghost">Delete</Button>
              </>
            )}
            {campaign.status === "active" && (
              <Button variant="outline">Pause Campaign</Button>
            )}
          </div>
        </div>
      </div>

      {/* Campaign Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="bg-[#0C0C0C] rounded-lg border border-[#2A2A2A] p-6">
          <h3 className="text-lg font-medium text-[#C9E5FF] mb-4">
            Campaign Overview
          </h3>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Users className="w-4 h-4 text-[#A3A3A3]" />
                <span className="text-[#A3A3A3]">Total Prospects</span>
              </div>
              <span className="text-[#C9E5FF] font-medium">
                {campaign.prospects || "N/A"}
              </span>
            </div>
            {campaign.status === "active" && (
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <BarChart2 className="w-4 h-4 text-[#A3A3A3]" />
                  <span className="text-[#A3A3A3]">Progress</span>
                </div>
                <span className="text-[#C9E5FF] font-medium">
                  {campaign.progress}%
                </span>
              </div>
            )}
            {(campaign.status === "active" ||
              campaign.status === "completed") && (
              <>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Calendar className="w-4 h-4 text-[#A3A3A3]" />
                    <span className="text-[#A3A3A3]">Start Date</span>
                  </div>
                  <span className="text-[#C9E5FF] font-medium">
                    {campaign.startDate}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-[#A3A3A3]" />
                    <span className="text-[#A3A3A3]">
                      {campaign.status === "active"
                        ? "Last Active"
                        : "Completed Date"}
                    </span>
                  </div>
                  <span className="text-[#C9E5FF] font-medium">
                    {campaign.status === "active"
                      ? campaign.lastActive
                      : campaign.completedDate}
                  </span>
                </div>
              </>
            )}
          </div>
        </div>

        {(campaign.status === "active" || campaign.status === "completed") && (
          <div className="bg-[#0C0C0C] rounded-lg border border-[#2A2A2A] p-6">
            <h3 className="text-lg font-medium text-[#C9E5FF] mb-4">
              Performance
            </h3>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-[#A3A3A3]">Total Replies</span>
                <span className="text-[#C9E5FF] font-medium">
                  {campaign.replies}
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-[#A3A3A3]">Reply Rate</span>
                <span className="text-[#C9E5FF] font-medium">
                  {campaign.replyRate}%
                </span>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Update Frequency Info */}
      <UpdateFrequencyInfo />
    </div>
  );
}

================
File: app/dashboard/campaigns/new/leads/page.js
================
"use client";

import { useState, useEffect, useCallback, useRef } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  ChevronRight,
  ChevronDown,
  ArrowRight,
  Search,
  ChevronLeft,
  AlertCircle,
  LinkIcon,
} from "lucide-react";
import { useLinkedIn } from "@/components/contexts/LinkedInContext";
import { useCampaignStore } from "@/app/store/campaignStore";
import { useQuery } from "@tanstack/react-query";
import {
  PARAMETER_TYPES,
  fetchLinkedInParameterIds,
} from "@/app/utils/linkedin/searchParameters";
export default function AddLeadsPage() {
  const router = useRouter();
  const { linkedInStatus } = useLinkedIn();
  const {
    selectedLeads,
    setSelectedLeads,
    addSelectedLead,
    removeSelectedLead,
  } = useCampaignStore();
  const [searchQuery, setSearchQuery] = useState("");
  const [expandedSections, setExpandedSections] = useState({});
  const [maxLeads, setMaxLeads] = useState(0);
  const [exclusions, setExclusions] = useState({
    excludeProfilesWithoutPhotos: false,
    excludeFirstDegreeConnections: false,
    premiumUsersOnly: false,
    includeLeadsFromOtherCampaigns: false,
  });

  const [currentPage, setCurrentPage] = useState(1);
  const [totalResults, setTotalResults] = useState(0);
  const resultsPerPage = 10;

  // Advanced search parameters
  const [advancedSearch, setAdvancedSearch] = useState({
    company: "",
    location: "",
    industry: "",
    school: "",
    networkDistance: [],
    sortBy: "relevance",
  });

  // Parameter IDs for search
  const [parameterIds, setParameterIds] = useState({
    locationIds: [],
    companyIds: [],
    industryIds: [],
    schoolIds: [],
  });

  // Debounce timers for parameter searches
  const locationTimer = useRef(null);
  const companyTimer = useRef(null);
  const industryTimer = useRef(null);
  const schoolTimer = useRef(null);

  // Track selected profiles
  const [selectedProfiles, setSelectedProfiles] = useState([]);

  // Add state for checkout URL
  const [checkoutUrl, setCheckoutUrl] = useState(null);

  // Add loading states for parameters
  const [parameterLoading, setParameterLoading] = useState({
    location: false,
    company: false,
    industry: false,
    school: false,
  });

  // Modified debounced parameter search function
  const debouncedParameterSearch = useCallback(
    async (type, field, value, timer) => {
      if (timer.current) {
        clearTimeout(timer.current);
      }

      if (!value || value.trim().length < 2) {
        setParameterIds((prev) => ({
          ...prev,
          [`${field}Ids`]: [],
        }));
        return;
      }

      // Set loading state for this parameter
      setParameterLoading((prev) => ({
        ...prev,
        [field]: true,
      }));

      timer.current = setTimeout(async () => {
        try {
          const results = await fetchLinkedInParameterIds(type, value);
          if (results && results.length > 0) {
            setParameterIds((prev) => ({
              ...prev,
              [`${field}Ids`]: [results[0].id],
            }));
          } else {
            // Clear IDs if no results found
            setParameterIds((prev) => ({
              ...prev,
              [`${field}Ids`]: [],
            }));
          }
        } catch (error) {
          console.error(`Error fetching ${type} parameters:`, error);
          // Clear IDs on error
          setParameterIds((prev) => ({
            ...prev,
            [`${field}Ids`]: [],
          }));
        } finally {
          setParameterLoading((prev) => ({
            ...prev,
            [field]: false,
          }));
        }
      }, 1000); // Increased debounce time to 1 second
    },
    []
  );

  // Effect to update parameter IDs when advanced search changes
  useEffect(() => {
    if (advancedSearch.location) {
      debouncedParameterSearch(
        PARAMETER_TYPES.LOCATION,
        "location",
        advancedSearch.location,
        locationTimer
      );
    }

    if (advancedSearch.company) {
      debouncedParameterSearch(
        PARAMETER_TYPES.COMPANY,
        "company",
        advancedSearch.company,
        companyTimer
      );
    }

    if (advancedSearch.industry) {
      debouncedParameterSearch(
        PARAMETER_TYPES.INDUSTRY,
        "industry",
        advancedSearch.industry,
        industryTimer
      );
    }

    if (advancedSearch.school) {
      debouncedParameterSearch(
        PARAMETER_TYPES.SCHOOL,
        "school",
        advancedSearch.school,
        schoolTimer
      );
    }
  }, [advancedSearch, debouncedParameterSearch]);

  // Modified search query
  const {
    data: searchResults = { results: [] },
    isLoading,
    error,
    refetch,
  } = useQuery({
    queryKey: [
      "linkedinSearch",
      searchQuery,
      advancedSearch,
      parameterIds,
      exclusions,
      currentPage,
    ],
    queryFn: async () => {
      if (!searchQuery.trim()) {
        return { results: [] };
      }

      // Check LinkedIn status before performing search
      if (!linkedInStatus.connected) {
        throw new Error(
          "LinkedIn account not connected. Please connect your LinkedIn account in settings."
        );
      }

      // Check if we're still loading parameters
      const isLoadingParams = Object.values(parameterLoading).some(
        (loading) => loading
      );
      if (isLoadingParams) {
        throw new Error("Still loading search parameters...");
      }

      // Prepare search parameters based on form values
      const searchParams = {
        keywords: searchQuery,
      };

      // Add parameter IDs if available, otherwise fall back to text values
      if (parameterIds.locationIds.length > 0) {
        searchParams.locationIds = parameterIds.locationIds;
      } else if (advancedSearch.location) {
        searchParams.location = advancedSearch.location;
      }

      if (parameterIds.companyIds.length > 0) {
        searchParams.companyIds = parameterIds.companyIds;
      } else if (advancedSearch.company) {
        searchParams.company = advancedSearch.company;
      }

      if (parameterIds.industryIds.length > 0) {
        searchParams.industryIds = parameterIds.industryIds;
      } else if (advancedSearch.industry) {
        searchParams.industry = advancedSearch.industry;
      }

      if (parameterIds.schoolIds.length > 0) {
        searchParams.schoolIds = parameterIds.schoolIds;
      } else if (advancedSearch.school) {
        searchParams.school = advancedSearch.school;
      }

      // Only add network distance if there are options selected
      if (advancedSearch.networkDistance.length > 0) {
        searchParams.networkDistance = advancedSearch.networkDistance;
      }

      // Apply exclusions
      if (
        exclusions.excludeFirstDegreeConnections &&
        !searchParams.networkDistance
      ) {
        searchParams.networkDistance = [
          "SECOND_DEGREE",
          "THIRD_DEGREE_AND_BEYOND",
        ];
      }

      if (advancedSearch.sortBy) {
        searchParams.sortBy = advancedSearch.sortBy;
      }

      const response = await fetch("/api/linkedin/search", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(searchParams),
      });

      if (!response.ok) {
        const errorData = await response.json();

        // Check if this is a subscription required error with checkout URL
        if (
          errorData.error === "Subscription required" &&
          errorData.checkoutUrl
        ) {
          // Store the checkout URL in state to handle the redirect
          setCheckoutUrl(errorData.checkoutUrl);
          throw new Error("Subscription required");
        }

        throw new Error(
          errorData.error ||
            `Search failed: ${response.status} ${response.statusText}`
        );
      }

      const results = await response.json();

      // Check if results indicate subscription required
      if (results.error === "Subscription required" && results.checkoutUrl) {
        // Store the checkout URL in state to handle the redirect
        setCheckoutUrl(results.checkoutUrl);
        throw new Error("Subscription required");
      }

      // Update total results count
      if (results.results) {
        setTotalResults(results.results.length);
      }

      return results;
    },
    enabled: false, // Don't run query on mount
    retry: false, // Don't retry on failure
  });

  // Handle redirect to checkout when needed
  useEffect(() => {
    if (checkoutUrl) {
      router.push(checkoutUrl);
    }
  }, [checkoutUrl, router]);

  // Toggle section expansion
  const toggleSection = (section) => {
    setExpandedSections((prev) => ({
      ...prev,
      [section]: !prev[section],
    }));
  };

  // Handle exclusion checkbox changes
  const handleExclusionChange = (exclusion) => {
    setExclusions((prev) => ({
      ...prev,
      [exclusion]: !prev[exclusion],
    }));
  };

  // Handle advanced search parameter changes
  const handleAdvancedSearchChange = (field, value) => {
    setAdvancedSearch((prev) => ({
      ...prev,
      [field]: value,
    }));

    // Clear the corresponding parameter IDs when the text field changes
    if (
      field === "location" ||
      field === "company" ||
      field === "industry" ||
      field === "school"
    ) {
      setParameterIds((prev) => ({
        ...prev,
        [`${field}Ids`]: [],
      }));
    }
  };

  // Modified handleSearch to wait for parameter loading
  const handleSearch = async (e) => {
    e?.preventDefault();

    // Check if any parameters are still loading
    const isLoadingParams = Object.values(parameterLoading).some(
      (loading) => loading
    );
    if (isLoadingParams) {
      // Wait a bit and try again
      setTimeout(() => refetch(), 1000);
      return;
    }

    refetch();
    setCurrentPage(1);
  };

  // Toggle lead selection
  const toggleLeadSelection = (profile) => {
    if (selectedProfiles.some((p) => p.identifier === profile.identifier)) {
      setSelectedProfiles(
        selectedProfiles.filter((p) => p.identifier !== profile.identifier)
      );
      removeSelectedLead(profile.identifier);
    } else {
      setSelectedProfiles([...selectedProfiles, profile]);
      addSelectedLead(profile);
    }
  };

  // Save selected leads and go to next step
  const goToNextStep = () => {
    setSelectedLeads(selectedProfiles);
    router.push("/dashboard/campaigns/new/sequence");
  };

  // Initialize selected profiles from store on mount
  useEffect(() => {
    setSelectedProfiles(selectedLeads);
  }, [selectedLeads]);

  // Change page
  const handlePageChange = (newPage) => {
    if (newPage < 1 || newPage > Math.ceil(totalResults / resultsPerPage))
      return;
    setCurrentPage(newPage);
  };

  // Get current page results
  const getCurrentPageResults = () => {
    if (!searchResults || !searchResults.results) return [];

    const startIndex = (currentPage - 1) * resultsPerPage;
    const endIndex = startIndex + resultsPerPage;
    return searchResults.results.slice(startIndex, endIndex);
  };

  // Filter sections
  const filterSections = [
    {
      id: "connections",
      title: "Connections",
      content: (
        <div className="space-y-2">
          <div className="flex flex-col space-y-1">
            <label className="text-[#A3A3A3] text-sm">Network Distance</label>
            <div className="flex flex-wrap gap-2">
              {["FIRST_DEGREE", "SECOND_DEGREE", "THIRD_DEGREE_AND_BEYOND"].map(
                (distance) => {
                  const distLabel =
                    distance === "FIRST_DEGREE"
                      ? "1st connections"
                      : distance === "SECOND_DEGREE"
                      ? "2nd connections"
                      : "3rd+ connections";
                  return (
                    <div key={distance} className="flex items-center">
                      <input
                        type="checkbox"
                        id={`distance-${distance}`}
                        checked={advancedSearch.networkDistance.includes(
                          distance
                        )}
                        onChange={() => {
                          if (
                            advancedSearch.networkDistance.includes(distance)
                          ) {
                            handleAdvancedSearchChange(
                              "networkDistance",
                              advancedSearch.networkDistance.filter(
                                (d) => d !== distance
                              )
                            );
                          } else {
                            handleAdvancedSearchChange("networkDistance", [
                              ...advancedSearch.networkDistance,
                              distance,
                            ]);
                          }
                        }}
                        className="h-4 w-4 rounded border-[#2A2A2A] bg-black text-blue-600"
                      />
                      <label
                        htmlFor={`distance-${distance}`}
                        className="ml-2 text-[#A3A3A3] text-sm"
                      >
                        {distLabel}
                      </label>
                    </div>
                  );
                }
              )}
            </div>
          </div>
        </div>
      ),
    },
    {
      id: "companies",
      title: "Companies",
      content: (
        <div className="space-y-3">
          <div>
            <label className="block text-[#A3A3A3] text-sm mb-1">
              Current Company
            </label>
            <Input
              type="text"
              value={advancedSearch.company}
              onChange={(e) =>
                handleAdvancedSearchChange("company", e.target.value)
              }
              placeholder="Enter company name"
              className="bg-black border-[#2A2A2A] text-white"
            />
          </div>
        </div>
      ),
    },
    {
      id: "locations",
      title: "Locations",
      content: (
        <div>
          <label className="block text-[#A3A3A3] text-sm mb-1">Location</label>
          <Input
            type="text"
            value={advancedSearch.location}
            onChange={(e) =>
              handleAdvancedSearchChange("location", e.target.value)
            }
            placeholder="Enter location"
            className="bg-black border-[#2A2A2A] text-white"
          />
        </div>
      ),
    },
    {
      id: "industries",
      title: "Industries",
      content: (
        <div>
          <label className="block text-[#A3A3A3] text-sm mb-1">Industry</label>
          <Input
            type="text"
            value={advancedSearch.industry}
            onChange={(e) =>
              handleAdvancedSearchChange("industry", e.target.value)
            }
            placeholder="Enter industry"
            className="bg-black border-[#2A2A2A] text-white"
          />
        </div>
      ),
    },
    {
      id: "schools",
      title: "Schools",
      content: (
        <div>
          <label className="block text-[#A3A3A3] text-sm mb-1">School</label>
          <Input
            type="text"
            value={advancedSearch.school}
            onChange={(e) =>
              handleAdvancedSearchChange("school", e.target.value)
            }
            placeholder="Enter school name"
            className="bg-black border-[#2A2A2A] text-white"
          />
        </div>
      ),
    },
    {
      id: "sortOptions",
      title: "Sort Options",
      content: (
        <div>
          <label className="block text-[#A3A3A3] text-sm mb-1">Sort By</label>
          <select
            value={advancedSearch.sortBy}
            onChange={(e) =>
              handleAdvancedSearchChange("sortBy", e.target.value)
            }
            className="w-full p-2 bg-black border border-[#2A2A2A] rounded-md text-white"
          >
            <option value="relevance">Relevance</option>
            <option value="date">Date</option>
          </select>
        </div>
      ),
    },
  ];

  // Add loading indicator to the search button
  const isSearching =
    isLoading || Object.values(parameterLoading).some((loading) => loading);

  return (
    <div className="space-y-6 p-6 bg-black">
      {/* Step Indicator */}
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center space-x-4">
          <div className="flex items-center">
            <div className="w-8 h-8 rounded-full bg-[#C9E5FF] text-black flex items-center justify-center font-bold">
              1
            </div>
            <span className="ml-2 text-white font-medium">Add Leads</span>
          </div>
          <div className="w-8 h-0.5 bg-[#2A2A2A]"></div>
          <div className="flex items-center">
            <div className="w-8 h-8 rounded-full bg-[#2A2A2A] text-[#A3A3A3] flex items-center justify-center font-bold">
              2
            </div>
            <span className="ml-2 text-[#A3A3A3] font-medium">
              Set Sequence
            </span>
          </div>
          <div className="w-8 h-0.5 bg-[#2A2A2A]"></div>
          <div className="flex items-center">
            <div className="w-8 h-8 rounded-full bg-[#2A2A2A] text-[#A3A3A3] flex items-center justify-center font-bold">
              3
            </div>
            <span className="ml-2 text-[#A3A3A3] font-medium">
              Review And Publish
            </span>
          </div>
        </div>
        <Button
          onClick={goToNextStep}
          className="bg-blue-600 hover:bg-blue-700 text-white"
        >
          Next
        </Button>
      </div>

      {/* LinkedIn Connection Warning */}
      {linkedInStatus.checked && !linkedInStatus.connected && (
        <div className="p-4 bg-yellow-900/20 border border-yellow-800 rounded-md text-yellow-200 mb-6 flex items-center">
          <AlertCircle className="h-5 w-5 mr-2 flex-shrink-0" />
          <div className="flex-1">
            <p className="font-medium">LinkedIn account not connected</p>
            <p className="text-sm mt-1">
              You need to connect your LinkedIn account to search for leads.
            </p>
          </div>
          <Button
            className="bg-yellow-600 hover:bg-yellow-700 text-white ml-4"
            onClick={() => router.push("/dashboard/settings/")}
          >
            <LinkIcon className="h-4 w-4 mr-2" />
            Connect LinkedIn
          </Button>
        </div>
      )}

      {/* Main Content */}
      <div className="space-y-6">
        {/* Search Form */}
        <form onSubmit={handleSearch} className="space-y-4">
          <div className="space-y-2">
            <label className="block text-white font-medium">
              Who would you like to find? (eg. Job title, company name, etc.)
            </label>
            <div className="relative">
              <Input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="eg. project manager OR manager OR senior project manager"
                className="bg-black border-[#2A2A2A] text-white pr-10"
              />
              <button
                type="submit"
                className="absolute right-2 top-1/2 transform -translate-y-1/2 text-[#A3A3A3] hover:text-white"
                disabled={isSearching}
              >
                <Search className="h-5 w-5" />
              </button>
            </div>
          </div>

          <div className="flex justify-end">
            <Button
              type="submit"
              disabled={isSearching}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              {isSearching ? (
                <>
                  <span className="animate-pulse">Searching...</span>
                  {Object.values(parameterLoading).some(
                    (loading) => loading
                  ) && (
                    <span className="text-xs ml-2">
                      (Loading parameters...)
                    </span>
                  )}
                </>
              ) : (
                <>
                  Search LinkedIn <ArrowRight className="ml-2 h-4 w-4" />
                </>
              )}
            </Button>
          </div>
        </form>

        {/* Error Message */}
        {error && error.message !== "Subscription required" && (
          <div className="p-3 bg-red-900/20 border border-red-800 rounded-md text-red-400">
            {error.message || String(error)}
            {typeof error === "string"
              ? error
              : error instanceof Error
              ? error.message
              : "An error occurred during search"}
          </div>
        )}

        {/* Subscription Required Message - Optional if you want to show something before redirect */}
        {error && error.message === "Subscription required" && !checkoutUrl && (
          <div className="p-3 bg-yellow-900/20 border border-yellow-800 rounded-md text-yellow-400">
            Subscription required. Redirecting to checkout...
          </div>
        )}

        {/* Search Results */}
        {searchResults &&
          searchResults.results &&
          searchResults.results.length > 0 && (
            <div className="mt-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-white text-lg font-medium">
                  Search Results
                </h3>
                <div className="flex items-center">
                  <span className="text-[#A3A3A3] mr-4">
                    {totalResults} leads found
                  </span>
                  <span className="text-blue-400">
                    {selectedProfiles.length} selected
                  </span>
                </div>
              </div>

              <div className="space-y-4">
                {getCurrentPageResults().map((profile) => (
                  <div
                    key={profile.identifier || profile.id}
                    className={`p-4 border rounded-lg transition-colors ${
                      selectedProfiles.some(
                        (p) => p.identifier === profile.identifier
                      )
                        ? "bg-blue-900/20 border-blue-800"
                        : "bg-[#0C0C0C] border-[#2A2A2A] hover:border-[#3A3A3A]"
                    }`}
                  >
                    <div className="flex">
                      <div className="mr-4 flex items-center">
                        <input
                          type="checkbox"
                          checked={selectedProfiles.some(
                            (p) => p.identifier === profile.identifier
                          )}
                          onChange={() => toggleLeadSelection(profile)}
                          className="h-5 w-5 rounded border-[#2A2A2A] bg-black text-blue-600"
                        />
                      </div>

                      {profile.profile_picture && (
                        <div className="mr-4 flex-shrink-0">
                          <img
                            src={profile.profile_picture}
                            alt={profile.name}
                            className="w-12 h-12 rounded-full object-cover"
                          />
                        </div>
                      )}

                      <div className="flex-1">
                        <div className="flex justify-between">
                          <div>
                            <h4 className="text-white font-medium">
                              {profile.name}
                            </h4>
                            <p className="text-[#A3A3A3] text-sm">
                              {profile.headline}
                            </p>
                            <div className="flex items-center mt-1">
                              <span className="text-[#A3A3A3] text-xs">
                                {profile.location}
                              </span>
                              {profile.company && (
                                <>
                                  <span className="mx-1 text-[#A3A3A3]">•</span>
                                  <span className="text-[#A3A3A3] text-xs">
                                    {profile.company}
                                  </span>
                                </>
                              )}
                            </div>
                          </div>
                          <div className="flex flex-col items-end">
                            <div className="text-xs px-2 py-1 bg-[#1A1A1A] rounded-full text-[#A3A3A3]">
                              {profile.network_distance === "FIRST_DEGREE"
                                ? "1st"
                                : profile.network_distance === "SECOND_DEGREE"
                                ? "2nd"
                                : profile.network_distance ===
                                  "THIRD_DEGREE_AND_BEYOND"
                                ? "3rd+"
                                : profile.network_distance}
                            </div>
                            {profile.shared_connections_count > 0 && (
                              <span className="text-xs text-[#A3A3A3] mt-1">
                                {profile.shared_connections_count} shared
                                connection
                                {profile.shared_connections_count !== 1
                                  ? "s"
                                  : ""}
                              </span>
                            )}
                          </div>
                        </div>
                        {profile.profile_url && (
                          <div className="mt-2">
                            <a
                              href={profile.profile_url}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-xs text-blue-400 hover:underline"
                            >
                              View LinkedIn Profile
                            </a>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Pagination */}
              {totalResults > resultsPerPage && (
                <div className="flex justify-center items-center mt-6 space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="border-[#2A2A2A] text-[#A3A3A3] hover:text-white"
                  >
                    <ChevronLeft className="h-4 w-4" />
                  </Button>

                  <div className="flex items-center space-x-1">
                    {Array.from(
                      {
                        length: Math.min(
                          5,
                          Math.ceil(totalResults / resultsPerPage)
                        ),
                      },
                      (_, i) => {
                        const pageNumber = i + 1;
                        return (
                          <Button
                            key={pageNumber}
                            variant={
                              currentPage === pageNumber ? "default" : "outline"
                            }
                            size="sm"
                            onClick={() => handlePageChange(pageNumber)}
                            className={
                              currentPage === pageNumber
                                ? "bg-blue-600 text-white"
                                : "border-[#2A2A2A] text-[#A3A3A3] hover:text-white"
                            }
                          >
                            {pageNumber}
                          </Button>
                        );
                      }
                    )}

                    {Math.ceil(totalResults / resultsPerPage) > 5 && (
                      <span className="text-[#A3A3A3]">...</span>
                    )}
                  </div>

                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={
                      currentPage === Math.ceil(totalResults / resultsPerPage)
                    }
                    className="border-[#2A2A2A] text-[#A3A3A3] hover:text-white"
                  >
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </div>
              )}
            </div>
          )}

        {/* Advanced Filters */}
        <div className="mt-6">
          <h3 className="text-white font-medium mb-4">
            Want to be more precise?
          </h3>

          {/* Filter Sections */}
          <div className="space-y-2">
            {filterSections.map((section) => (
              <div
                key={section.id}
                className="border border-[#2A2A2A] rounded-md overflow-hidden"
              >
                <button
                  type="button"
                  className="w-full p-3 flex items-center justify-between bg-[#0C0C0C] text-left"
                  onClick={() => toggleSection(section.id)}
                >
                  <span className="text-white">{section.title}</span>
                  {expandedSections[section.id] ? (
                    <ChevronDown className="h-5 w-5 text-[#A3A3A3]" />
                  ) : (
                    <ChevronRight className="h-5 w-5 text-[#A3A3A3]" />
                  )}
                </button>

                {expandedSections[section.id] && (
                  <div className="p-3 bg-black border-t border-[#2A2A2A]">
                    {section.content}
                  </div>
                )}
              </div>
            ))}
          </div>

          {/* Apply Filters Button */}
          <div className="mt-4 flex justify-end">
            <Button
              onClick={handleSearch}
              className="bg-[#2A2A2A] hover:bg-[#3A3A3A] text-white"
            >
              Apply Filters
            </Button>
          </div>
        </div>

        {/* Maximum amount of leads */}
        <div className="mt-6">
          <h3 className="text-white font-medium mb-2">
            Maximum amount of leads:
          </h3>
          <div className="flex items-center space-x-4">
            <input
              type="range"
              min="0"
              max="2000"
              value={maxLeads}
              onChange={(e) => setMaxLeads(parseInt(e.target.value))}
              className="w-full h-2 bg-[#2A2A2A] rounded-lg appearance-none cursor-pointer"
              style={{
                background: `linear-gradient(to right, #0066FF 0%, #0066FF ${
                  maxLeads / 20
                }%, #2A2A2A ${maxLeads / 20}%, #2A2A2A 100%)`,
              }}
            />
            <span className="text-white font-medium min-w-[50px]">
              {maxLeads}
            </span>
          </div>
        </div>

        {/* Exclusion Options */}
        <div className="mt-6 space-y-3">
          <div className="flex items-center">
            <input
              type="checkbox"
              id="excludeProfilesWithoutPhotos"
              checked={exclusions.excludeProfilesWithoutPhotos}
              onChange={() =>
                handleExclusionChange("excludeProfilesWithoutPhotos")
              }
              className="h-4 w-4 rounded border-[#2A2A2A] bg-black text-blue-600"
            />
            <label
              htmlFor="excludeProfilesWithoutPhotos"
              className="ml-2 text-[#A3A3A3]"
            >
              Exclude profiles without photos.
            </label>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              id="excludeFirstDegreeConnections"
              checked={exclusions.excludeFirstDegreeConnections}
              onChange={() =>
                handleExclusionChange("excludeFirstDegreeConnections")
              }
              className="h-4 w-4 rounded border-[#2A2A2A] bg-black text-blue-600"
            />
            <label
              htmlFor="excludeFirstDegreeConnections"
              className="ml-2 text-[#A3A3A3]"
            >
              Exclude 1st degree connections.
            </label>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              id="premiumUsersOnly"
              checked={exclusions.premiumUsersOnly}
              onChange={() => handleExclusionChange("premiumUsersOnly")}
              className="h-4 w-4 rounded border-[#2A2A2A] bg-black text-blue-600"
            />
            <label htmlFor="premiumUsersOnly" className="ml-2 text-[#A3A3A3]">
              Premium users only.
            </label>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              id="includeLeadsFromOtherCampaigns"
              checked={exclusions.includeLeadsFromOtherCampaigns}
              onChange={() =>
                handleExclusionChange("includeLeadsFromOtherCampaigns")
              }
              className="h-4 w-4 rounded border-[#2A2A2A] bg-black text-blue-600"
            />
            <label
              htmlFor="includeLeadsFromOtherCampaigns"
              className="ml-2 text-[#A3A3A3]"
            >
              Include leads from other campaigns.
            </label>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/dashboard/campaigns/new/review/page.js
================
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import {
  ChevronLeft,
  ArrowRight,
  CheckCircle,
  AlertCircle,
  Loader2,
} from "lucide-react";
import { useCampaignStore } from "@/app/store/campaignStore";
import { useMutation } from "@tanstack/react-query";
import UpdateFrequencyInfo from "../../../../components/UpdateFrequencyInfo";

export default function ReviewPage() {
  const router = useRouter();
  const {
    selectedLeads,
    connectionMessage,
    followUpMessage,
    templateName,
    isPublishing,
    publishError,
    publishSuccess,
    setPublishingStatus,
    setPublishError,
    setPublishSuccess,
    resetCampaign,
  } = useCampaignStore();

  // Check if we have leads (but messages are now optional)
  useEffect(() => {
    if (selectedLeads.length === 0) {
      router.push("/dashboard/campaigns/new/leads");
    }
  }, [selectedLeads, router]);

  // Send connection requests mutation
  const sendConnectionsMutation = useMutation({
    mutationFn: async () => {
      setPublishingStatus(true);
      setPublishError(null);

      const response = await fetch("/api/linkedin/invitations/send", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          recipients: selectedLeads,
          message: connectionMessage,
          templateName: templateName || "LinkedIn Campaign",
          followUpMessage: followUpMessage || "",
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          errorData.error || "Failed to send connection requests"
        );
      }

      return await response.json();
    },
    onSuccess: () => {
      setPublishSuccess(true);
      setPublishingStatus(false);
    },
    onError: (error) => {
      // Convert the error to a string to avoid the React child error
      setPublishError(error.message || String(error));
      setPublishingStatus(false);
    },
  });

  // Go to previous step
  const goToPreviousStep = () => {
    router.push("/dashboard/campaigns/new/sequence");
  };

  // Publish campaign
  const publishCampaign = () => {
    sendConnectionsMutation.mutate();
  };

  // Start a new campaign
  const startNewCampaign = () => {
    resetCampaign();
    router.push("/dashboard/campaigns/new/leads");
  };

  // Go to campaigns dashboard
  const goToCampaignsDashboard = () => {
    resetCampaign();
    router.push("/dashboard/campaigns");
  };

  return (
    <div className="space-y-6 p-6 bg-black">
      {/* Step Indicator */}
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center space-x-4">
          <div className="flex items-center">
            <div className="w-8 h-8 rounded-full bg-[#2A2A2A] text-[#A3A3A3] flex items-center justify-center font-bold">
              1
            </div>
            <span className="ml-2 text-[#A3A3A3] font-medium">Add Leads</span>
          </div>
          <div className="w-8 h-0.5 bg-[#2A2A2A]"></div>
          <div className="flex items-center">
            <div className="w-8 h-8 rounded-full bg-[#2A2A2A] text-[#A3A3A3] flex items-center justify-center font-bold">
              2
            </div>
            <span className="ml-2 text-[#A3A3A3] font-medium">
              Set Sequence
            </span>
          </div>
          <div className="w-8 h-0.5 bg-[#2A2A2A]"></div>
          <div className="flex items-center">
            <div className="w-8 h-8 rounded-full bg-[#C9E5FF] text-black flex items-center justify-center font-bold">
              3
            </div>
            <span className="ml-2 text-white font-medium">
              Review And Publish
            </span>
          </div>
        </div>
      </div>

      {/* Success Message */}
      {publishSuccess && (
        <div className="p-4 bg-green-900/20 border border-green-800 rounded-md text-green-400 mb-6 flex items-center">
          <CheckCircle className="h-5 w-5 mr-2 flex-shrink-0" />
          <div>
            <p className="font-medium">Campaign published successfully!</p>
            <p className="text-sm mt-1">
              Your connection requests will be sent to {selectedLeads.length}{" "}
              leads.
            </p>
          </div>
        </div>
      )}

      {/* Error Message */}
      {publishError && (
        <div className="p-4 bg-red-900/20 border border-red-800 rounded-md text-red-400 mb-6 flex items-center">
          <AlertCircle className="h-5 w-5 mr-2 flex-shrink-0" />
          <div>
            <p className="font-medium">Error publishing campaign</p>
            <p className="text-sm mt-1">
              {typeof publishError === "string"
                ? publishError
                : "An unexpected error occurred"}
            </p>
          </div>
        </div>
      )}

      {/* Main Content */}
      {!publishSuccess ? (
        <div className="space-y-8">
          <div>
            <h2 className="text-xl font-bold text-white mb-6">
              Review your campaign
            </h2>

            {/* Campaign Summary */}
            <div className="bg-[#0C0C0C] border border-[#2A2A2A] rounded-lg p-6 mb-6">
              <h3 className="text-white font-medium mb-4">Campaign Summary</h3>

              <div className="space-y-4">
                <div>
                  <p className="text-[#A3A3A3]">Template Name</p>
                  <p className="text-white">
                    {templateName || "LinkedIn Campaign"}
                  </p>
                </div>

                <div>
                  <p className="text-[#A3A3A3]">Leads</p>
                  <p className="text-white">
                    {selectedLeads.length} leads selected
                  </p>
                </div>

                {connectionMessage ? (
                  <div>
                    <p className="text-[#A3A3A3]">Connection Message</p>
                    <div className="bg-[#1A1A1A] p-3 rounded-md text-white mt-1">
                      {connectionMessage}
                    </div>
                  </div>
                ) : (
                  <div>
                    <p className="text-[#A3A3A3]">Connection Message</p>
                    <div className="bg-[#1A1A1A] p-3 rounded-md text-[#A3A3A3] italic mt-1">
                      No connection message (LinkedIn default will be used)
                    </div>
                  </div>
                )}

                {followUpMessage ? (
                  <div>
                    <p className="text-[#A3A3A3]">Follow-up Message</p>
                    <div className="bg-[#1A1A1A] p-3 rounded-md text-white mt-1">
                      {followUpMessage}
                    </div>
                  </div>
                ) : (
                  <div>
                    <p className="text-[#A3A3A3]">Follow-up Message</p>
                    <div className="bg-[#1A1A1A] p-3 rounded-md text-[#A3A3A3] italic mt-1">
                      No follow-up message
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Selected Leads */}
            <div className="bg-[#0C0C0C] border border-[#2A2A2A] rounded-lg p-6">
              <h3 className="text-white font-medium mb-4">
                Selected Leads ({selectedLeads.length})
              </h3>

              <div className="max-h-60 overflow-y-auto space-y-3">
                {selectedLeads.map((lead) => (
                  <div
                    key={lead.identifier}
                    className="flex items-center p-2 bg-[#1A1A1A] rounded-md"
                  >
                    {lead.profile_picture && (
                      <img
                        src={lead.profile_picture}
                        alt={lead.name}
                        className="w-8 h-8 rounded-full mr-3"
                      />
                    )}
                    <div>
                      <p className="text-white font-medium">{lead.name}</p>
                      <p className="text-[#A3A3A3] text-sm">
                        {lead.headline || lead.company || ""}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Navigation Buttons */}
          <div className="flex justify-between pt-4">
            <Button
              onClick={goToPreviousStep}
              variant="outline"
              className="border-[#2A2A2A] text-white hover:bg-[#2A2A2A]"
              disabled={isPublishing}
            >
              <ChevronLeft className="mr-2 h-4 w-4" />
              Back to Sequence
            </Button>

            <Button
              onClick={publishCampaign}
              className="bg-blue-600 hover:bg-blue-700 text-white"
              disabled={isPublishing}
            >
              {isPublishing ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Publishing...
                </>
              ) : (
                <>
                  Publish Campaign
                  <ArrowRight className="ml-2 h-4 w-4" />
                </>
              )}
            </Button>
          </div>
        </div>
      ) : (
        <div className="space-y-8">
          <div className="text-center py-8">
            <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-white mb-2">
              Campaign Published!
            </h2>
            <p className="text-[#A3A3A3] max-w-md mx-auto mb-6">
              Your connection requests will be sent to {selectedLeads.length}{" "}
              leads. You can track the progress in your campaigns dashboard.
            </p>
            <div className="max-w-md mx-auto">
              <UpdateFrequencyInfo />
            </div>
          </div>

          <div className="flex justify-center space-x-4">
            <Button
              onClick={startNewCampaign}
              variant="outline"
              className="border-[#2A2A2A] text-white hover:bg-[#2A2A2A]"
            >
              Start New Campaign
            </Button>

            <Button
              onClick={goToCampaignsDashboard}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              Go to Campaigns Dashboard
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}

================
File: app/dashboard/campaigns/new/sequence/page.js
================
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Input } from "@/components/ui/input";
import { ArrowRight, ChevronLeft, AlertCircle } from "lucide-react";
import { useCampaignStore } from "@/app/store/campaignStore";

export default function SequencePage() {
  const router = useRouter();
  const {
    selectedLeads,
    connectionMessage,
    setConnectionMessage,
    followUpMessage,
    setFollowUpMessage,
    templateName,
    setTemplateName,
  } = useCampaignStore();

  const [errors, setErrors] = useState({});

  // Check if we have leads
  useEffect(() => {
    if (selectedLeads.length === 0) {
      router.push("/dashboard/campaigns/new/leads");
    }
  }, [selectedLeads, router]);

  // Validate form
  const validateForm = () => {
    const newErrors = {};

    // Connection message is now optional, but still has a character limit
    if (connectionMessage && connectionMessage.length > 300) {
      newErrors.connectionMessage =
        "Connection message must be less than 300 characters";
    }

    // Follow-up message is still optional with a character limit
    if (followUpMessage && followUpMessage.length > 1000) {
      newErrors.followUpMessage =
        "Follow-up message must be less than 1000 characters";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Go to previous step
  const goToPreviousStep = () => {
    router.push("/dashboard/campaigns/new/leads");
  };

  // Go to next step
  const goToNextStep = () => {
    if (validateForm()) {
      router.push("/dashboard/campaigns/new/review");
    }
  };

  return (
    <div className="space-y-6 p-6 bg-black">
      {/* Step Indicator */}
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center space-x-4">
          <div className="flex items-center">
            <div className="w-8 h-8 rounded-full bg-[#2A2A2A] text-[#A3A3A3] flex items-center justify-center font-bold">
              1
            </div>
            <span className="ml-2 text-[#A3A3A3] font-medium">Add Leads</span>
          </div>
          <div className="w-8 h-0.5 bg-[#2A2A2A]"></div>
          <div className="flex items-center">
            <div className="w-8 h-8 rounded-full bg-[#C9E5FF] text-black flex items-center justify-center font-bold">
              2
            </div>
            <span className="ml-2 text-white font-medium">Set Sequence</span>
          </div>
          <div className="w-8 h-0.5 bg-[#2A2A2A]"></div>
          <div className="flex items-center">
            <div className="w-8 h-8 rounded-full bg-[#2A2A2A] text-[#A3A3A3] flex items-center justify-center font-bold">
              3
            </div>
            <span className="ml-2 text-[#A3A3A3] font-medium">
              Review And Publish
            </span>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="space-y-8">
        <div>
          <h2 className="text-xl font-bold text-white mb-6">
            Set up your connection sequence
          </h2>

          {/* Template Name */}
          <div className="mb-6">
            <label className="block text-white font-medium mb-2">
              Template Name (for your reference)
            </label>
            <Input
              type="text"
              value={templateName}
              onChange={(e) => setTemplateName(e.target.value)}
              placeholder="My LinkedIn Campaign"
              className="bg-black border-[#2A2A2A] text-white"
            />
          </div>

          {/* Connection Message */}
          <div className="mb-6">
            <label className="block text-white font-medium mb-2">
              Connection Message (Optional)
            </label>
            <div className="mb-1 flex justify-between">
              <span className="text-[#A3A3A3] text-sm">
                This message will be sent with your connection request
              </span>
              <span
                className={`text-sm ${
                  connectionMessage.length > 300
                    ? "text-red-500"
                    : "text-[#A3A3A3]"
                }`}
              >
                {connectionMessage.length}/300
              </span>
            </div>
            <textarea
              value={connectionMessage}
              onChange={(e) => setConnectionMessage(e.target.value)}
              placeholder="Hi {{name}}, I noticed we're both in the same industry. I'd love to connect!"
              className="bg-black border-[#2A2A2A] text-white h-32 w-full p-2 rounded-md"
            />
            {errors.connectionMessage && (
              <p className="mt-1 text-red-500 text-sm">
                {errors.connectionMessage}
              </p>
            )}
            <div className="mt-2 text-[#A3A3A3] text-sm">
              <p>Available variables:</p>
              <ul className="list-disc list-inside ml-2 mt-1">
                <li>{`{{name}}`} - Recipient&apos;s name</li>
                <li>{`{{company}}`} - Recipient&apos;s company</li>
                <li>{`{{position}}`} - Recipient&apos;s job title</li>
              </ul>
            </div>
          </div>

          {/* Follow-up Message */}
          <div>
            <label className="block text-white font-medium mb-2">
              Follow-up Message (Optional)
            </label>
            <div className="mb-1 flex justify-between">
              <span className="text-[#A3A3A3] text-sm">
                This message will be sent after the connection is accepted
              </span>
              <span
                className={`text-sm ${
                  followUpMessage.length > 1000
                    ? "text-red-500"
                    : "text-[#A3A3A3]"
                }`}
              >
                {followUpMessage.length}/1000
              </span>
            </div>
            <textarea
              value={followUpMessage}
              onChange={(e) => setFollowUpMessage(e.target.value)}
              placeholder="Thanks for connecting {{name}}! I'd love to learn more about your work at {{company}}."
              className="bg-black border-[#2A2A2A] text-white h-32 w-full p-2 rounded-md"
            />
            {errors.followUpMessage && (
              <p className="mt-1 text-red-500 text-sm">
                {errors.followUpMessage}
              </p>
            )}
          </div>
        </div>

        {/* Navigation Buttons */}
        <div className="flex justify-between pt-4">
          <button
            onClick={goToPreviousStep}
            className="border border-[#2A2A2A] text-white hover:bg-[#2A2A2A] px-4 py-2 rounded-md flex items-center"
          >
            <ChevronLeft className="mr-2 h-4 w-4" />
            Back to Leads
          </button>

          <button
            onClick={goToNextStep}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md flex items-center"
          >
            Review Campaign
            <ArrowRight className="ml-2 h-4 w-4" />
          </button>
        </div>
      </div>
    </div>
  );
}

================
File: app/dashboard/campaigns/new/page.js
================
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";

export default function NewCampaignPage() {
  const router = useRouter();

  useEffect(() => {
    // Redirect to the first step of campaign creation
    router.push('/dashboard/campaigns/new/leads');
  }, [router]);

  return (
    <div className="flex items-center justify-center h-screen bg-black">
      <div className="text-white">Redirecting to campaign creation...</div>
    </div>
  );
}

================
File: app/dashboard/campaigns/page.js
================
"use client";

import { Button } from "@/components/ui/button";
import { Users, BarChart2 } from "lucide-react";
import { useState, Suspense } from "react";
import { useRouter } from "next/navigation";
import { useAnalytics } from "@/components/contexts/AnalyticsContext";
import UpdateFrequencyInfo from "../../components/UpdateFrequencyInfo";

function CampaignsContent() {
  const [activeTab, setActiveTab] = useState("all");
  const router = useRouter();
  const { analyticsData } = useAnalytics();

  // Helper function to transform analytics data into the format we need
  const getCampaignData = () => {
    if (!analyticsData.data || !analyticsData.data.campaigns) {
      return { active: [], drafts: [], completed: [] };
    }

    const campaigns = analyticsData.data.campaigns || [];

    return {
      active: campaigns.filter((camp) => camp.status === "processing"),
      drafts: campaigns.filter((camp) => camp.status === "pending"),
      completed: campaigns.filter((camp) => camp.status === "completed"),
    };
  };

  const campaigns = getCampaignData();

  const handleViewDetails = (campaignId) => {
    router.push(`/dashboard/campaigns/${campaignId}`);
  };

  return (
    <div className="space-y-6">
      {/* Header Section */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-white">Campaigns</h1>
          <p className="text-sm text-[#A1A1AA]">
            Manage your LinkedIn outreach campaigns
          </p>
        </div>
        <Button
          variant="outline"
          onClick={() => router.push("/dashboard/campaigns/new/leads")}
        >
          New Campaign
        </Button>
      </div>

      {/* Update Frequency Info */}
      <UpdateFrequencyInfo />

      {/* Campaign Filters */}
      <div className="flex gap-4 pb-4 border-b border-[#1A1A1A]">
        <Button
          variant="ghost"
          className={`pb-4 px-2 rounded-none ${
            activeTab === "all"
              ? "text-white border-b-2 border-white"
              : "text-[#A1A1AA] hover:text-white"
          }`}
          onClick={() => setActiveTab("all")}
        >
          All Campaigns
        </Button>
        <Button
          variant="ghost"
          className={`pb-4 px-2 rounded-none ${
            activeTab === "active"
              ? "text-white border-b-2 border-white"
              : "text-[#A1A1AA] hover:text-white"
          }`}
          onClick={() => setActiveTab("active")}
        >
          Active
        </Button>
        <Button
          variant="ghost"
          className={`pb-4 px-2 rounded-none ${
            activeTab === "drafts"
              ? "text-white border-b-2 border-white"
              : "text-[#A1A1AA] hover:text-white"
          }`}
          onClick={() => setActiveTab("drafts")}
        >
          Drafts
        </Button>
        <Button
          variant="ghost"
          className={`pb-4 px-2 rounded-none ${
            activeTab === "completed"
              ? "text-white border-b-2 border-white"
              : "text-[#A1A1AA] hover:text-white"
          }`}
          onClick={() => setActiveTab("completed")}
        >
          Completed
        </Button>
      </div>

      {/* Loading State */}
      {analyticsData.isLoading && (
        <div className="w-full flex justify-center py-12">
          <span className="loading loading-spinner loading-lg"></span>
        </div>
      )}

      {/* Campaign List */}
      {!analyticsData.isLoading && (
        <div className="space-y-4">
          {/* Active Campaigns */}
          {(activeTab === "all" || activeTab === "active") &&
            campaigns.active.length > 0 && (
              <div className="bg-[#0F0F0F] rounded-lg border border-[#1A1A1A]">
                <div className="p-6">
                  <div className="flex items-center justify-between mb-4">
                    <div>
                      <h3 className="text-lg font-medium text-white">
                        Active Campaigns
                      </h3>
                      <p className="text-sm text-[#A1A1AA]">
                        Currently running campaigns
                      </p>
                    </div>
                  </div>
                  <div className="space-y-4">
                    {campaigns.active.map((campaign) => (
                      <div
                        key={campaign.job_id}
                        className="flex items-center justify-between p-4 bg-black rounded-lg border border-[#1A1A1A]"
                      >
                        <div className="flex items-center gap-4">
                          <div className="w-10 h-10 bg-[#1A1A1A] rounded-full flex items-center justify-center">
                            <Users className="w-5 h-5 text-white" />
                          </div>
                          <div>
                            <h4 className="text-white font-medium">
                              {campaign.name}
                            </h4>
                            <p className="text-sm text-[#A1A1AA]">
                              {campaign.total_invitations} prospects •{" "}
                              {Math.min(
                                100,
                                (campaign.accepted_connections /
                                  campaign.total_invitations) *
                                  100
                              ).toFixed(0)}
                              % complete
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center gap-4">
                          <div className="text-right">
                            <p className="text-sm text-white">
                              {campaign.accepted_connections} connections
                            </p>
                            <p className="text-xs text-[#A1A1AA]">
                              {campaign.response_rate}% rate
                            </p>
                          </div>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleViewDetails(campaign.job_id)}
                          >
                            <BarChart2 className="w-4 h-4 text-[#A1A1AA]" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

          {/* Draft Campaigns */}
          {(activeTab === "all" || activeTab === "drafts") &&
            campaigns.drafts.length > 0 && (
              <div className="bg-[#0F0F0F] rounded-lg border border-[#1A1A1A]">
                <div className="p-6">
                  <div className="flex items-center justify-between mb-4">
                    <div>
                      <h3 className="text-lg font-medium text-white">
                        Draft Campaigns
                      </h3>
                      <p className="text-sm text-[#A1A1AA]">
                        Campaigns in preparation
                      </p>
                    </div>
                  </div>
                  <div className="space-y-4">
                    {campaigns.drafts.map((campaign) => (
                      <div
                        key={campaign.job_id}
                        className="flex items-center justify-between p-4 bg-black rounded-lg border border-[#1A1A1A]"
                      >
                        <div className="flex items-center gap-4">
                          <div className="w-10 h-10 bg-[#1A1A1A] rounded-full flex items-center justify-center">
                            <Users className="w-5 h-5 text-white" />
                          </div>
                          <div>
                            <h4 className="text-white font-medium">
                              {campaign.name}
                            </h4>
                            <p className="text-sm text-[#A1A1AA]">
                              Draft • Last edited{" "}
                              {campaign.created_at
                                ? new Date(
                                    campaign.created_at
                                  ).toLocaleDateString()
                                : "recently"}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleViewDetails(campaign.job_id)}
                          >
                            Edit
                          </Button>
                          <Button variant="ghost" size="sm">
                            Delete
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

          {/* Completed Campaigns */}
          {(activeTab === "all" || activeTab === "completed") &&
            campaigns.completed.length > 0 && (
              <div className="bg-[#0F0F0F] rounded-lg border border-[#1A1A1A]">
                <div className="p-6">
                  <div className="flex items-center justify-between mb-4">
                    <div>
                      <h3 className="text-lg font-medium text-white">
                        Completed
                      </h3>
                      <p className="text-sm text-[#A1A1AA]">Past campaigns</p>
                    </div>
                  </div>
                  <div className="space-y-4">
                    {campaigns.completed.map((campaign) => (
                      <div
                        key={campaign.job_id}
                        className="flex items-center justify-between p-4 bg-black rounded-lg border border-[#1A1A1A]"
                      >
                        <div className="flex items-center gap-4">
                          <div className="w-10 h-10 bg-[#1A1A1A] rounded-full flex items-center justify-center">
                            <Users className="w-5 h-5 text-white" />
                          </div>
                          <div>
                            <h4 className="text-white font-medium">
                              {campaign.name}
                            </h4>
                            <p className="text-sm text-[#A1A1AA]">
                              {campaign.total_invitations} prospects • Completed
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center gap-4">
                          <div className="text-right">
                            <p className="text-sm text-white">
                              {campaign.accepted_connections} connections
                            </p>
                            <p className="text-xs text-[#A1A1AA]">
                              {campaign.response_rate}% rate
                            </p>
                          </div>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleViewDetails(campaign.job_id)}
                          >
                            <BarChart2 className="w-4 h-4 text-[#A1A1AA]" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

          {/* No Campaigns State */}
          {!analyticsData.isLoading &&
            analyticsData.data &&
            (!analyticsData.data.campaigns ||
              analyticsData.data.campaigns.length === 0) && (
              <div className="bg-[#0F0F0F] rounded-lg border border-[#1A1A1A] p-12 text-center">
                <p className="text-[#A1A1AA] mb-4">
                  You don&apos;t have any campaigns yet
                </p>
                <Button
                  onClick={() => router.push("/dashboard/campaigns/new/leads")}
                >
                  Create your first campaign
                </Button>
              </div>
            )}
        </div>
      )}
    </div>
  );
}

export default function CampaignsPage() {
  return (
    <Suspense
      fallback={
        <div className="flex items-center justify-center h-screen">
          <span className="loading loading-spinner loading-lg"></span>
        </div>
      }
    >
      <CampaignsContent />
    </Suspense>
  );
}

================
File: app/dashboard/settings/page.js
================
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import ButtonLinkedin from "@/components/ButtonLinkedin";
import { useLinkedIn } from "@/components/contexts/LinkedInContext";
import ButtonCheckout from "@/components/ButtonCheckout";
import config from "@/config";
import { ArrowRight, Check, Zap } from "lucide-react";

export default function SettingsPage() {
  const { linkedInStatus, refreshLinkedInStatus } = useLinkedIn();
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  // Get the pro plan
  const proPlan = config.stripe.plans[0];

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        setIsLoading(true);
        const res = await fetch("/api/users");
        if (!res.ok) throw new Error("Failed to fetch user data");
        const data = await res.json();
        setUser(data.user);
        setIsSubscribed(data.user?.isSubscribed || false);
      } catch (error) {
        console.error("Error fetching user data:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchUserData();
  }, []);

  const handleManageBilling = async () => {
    try {
      const response = await fetch("/api/stripe/create-portal", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        throw new Error("Failed to create billing portal session");
      }

      const { url } = await response.json();
      window.location.href = url;
    } catch (error) {
      console.error("Error opening billing portal:", error);
    }
  };

  return (
    <div className="container max-w-5xl mx-auto px-4 sm:px-6 space-y-8">
      {/* Header Section */}
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-white">Settings</h1>
        <p className="text-sm text-[#A1A1AA]">
          Manage your account and preferences
        </p>
      </div>

      {/* Settings Sections */}
      <div className="space-y-8">
        {/* Subscription Management */}
        <div className="bg-[#0F0F0F] rounded-lg p-5 sm:p-6 border border-[#1A1A1A]">
          <h2 className="text-lg font-medium text-white mb-4">Subscription</h2>
          {isLoading ? (
            <div className="flex justify-center py-4">
              <div className="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-red-500"></div>
            </div>
          ) : (
            <div className="space-y-6">
              <div className="flex flex-col sm:flex-row sm:items-start justify-between gap-6">
                <div className="space-y-2">
                  <div>
                    <p className="text-white font-medium">Current Plan</p>
                    <p className="text-sm text-[#A1A1AA] mt-1">
                      {isSubscribed
                        ? "You are currently on the Pro plan"
                        : "You don't have an active subscription"}
                    </p>
                  </div>

                  {isSubscribed && (
                    <div className="mt-2">
                      <p className="text-sm text-white">
                        <span className="text-red-500 font-medium">
                          {proPlan.connectionLimit}
                        </span>{" "}
                        connection requests per month
                      </p>
                    </div>
                  )}
                </div>

                <div className="flex-shrink-0">
                  <div className="flex flex-col gap-2 w-full sm:w-auto">
                    {isSubscribed && (
                      <button
                        onClick={handleManageBilling}
                        className="btn btn-sm h-9 min-h-0 px-4 btn-outline w-full sm:w-auto"
                      >
                        Manage Billing
                      </button>
                    )}

                    {!isSubscribed && (
                      <ButtonCheckout
                        priceId={proPlan?.priceId}
                        productLink={proPlan?.link}
                        className="btn btn-sm h-9 min-h-0 px-4 bg-gradient-to-r from-red-500 to-red-700 border-0 text-white hover:from-red-600 hover:to-red-800 w-full sm:w-auto"
                      >
                        <span className="flex items-center justify-center gap-1">
                          <Zap className="w-3 h-3" />
                          Subscribe to Pro Plan
                        </span>
                      </ButtonCheckout>
                    )}
                  </div>
                </div>
              </div>

              {/* Plan Features - Only show if user is not subscribed */}
              {!isSubscribed && (
                <div className="pt-5 mt-2 border-t border-[#1A1A1A]">
                  <h3 className="text-sm font-medium text-white mb-4">
                    Pro Plan Features
                  </h3>
                  <div className="bg-zinc-900/50 p-5 rounded-lg border border-[#1A1A1A]">
                    <div className="flex justify-between items-center mb-4">
                      <h4 className="font-medium text-white">{proPlan.name}</h4>
                      <span className="text-red-500 font-bold">
                        ${proPlan.price}
                        {proPlan.priceDetails}
                      </span>
                    </div>
                    {proPlan.description && (
                      <p className="text-sm text-white/80 mb-4">
                        {proPlan.description}
                      </p>
                    )}
                    <ul className="space-y-2.5 text-sm">
                      {proPlan.features &&
                        proPlan.features.map((feature, i) => (
                          <li key={i} className="flex items-start gap-2">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              viewBox="0 0 20 20"
                              fill="currentColor"
                              className="w-[18px] h-[18px] text-red-500 shrink-0 mt-0.5"
                            >
                              <path
                                fillRule="evenodd"
                                d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                                clipRule="evenodd"
                              />
                            </svg>
                            <span className="text-gray-300">
                              {typeof feature === "string"
                                ? feature
                                : feature.name}
                            </span>
                          </li>
                        ))}
                    </ul>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* LinkedIn Integration */}
        <div className="bg-[#0F0F0F] rounded-lg p-5 sm:p-6 border border-[#1A1A1A]">
          <h2 className="text-lg font-medium text-white mb-4">
            LinkedIn Integration
          </h2>
          <div className="space-y-4">
            <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
              <div>
                <p className="text-white">Connection Status</p>
                <p className="text-sm text-[#A1A1AA]">
                  {linkedInStatus.connected
                    ? `Your LinkedIn account is connected${
                        linkedInStatus.lastChecked
                          ? ` (Last checked: ${new Date(
                              linkedInStatus.lastChecked
                            ).toLocaleString()})`
                          : ""
                      }`
                    : "Your LinkedIn account is not connected"}
                </p>
              </div>
              <div className="flex items-center gap-3">
                {linkedInStatus.checked && (
                  <button
                    onClick={refreshLinkedInStatus}
                    className="btn btn-sm h-9 min-h-0 btn-ghost"
                    title="Refresh status"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-4 w-4"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                      />
                    </svg>
                  </button>
                )}
                <ButtonLinkedin
                  variant="outline"
                  text={
                    linkedInStatus.connected
                      ? "Reconnect LinkedIn"
                      : "Connect LinkedIn"
                  }
                  className="h-9 min-h-0 px-4"
                />
              </div>
            </div>
            <div className="pt-4 border-t border-[#1A1A1A]">
              <p className="text-sm text-[#A1A1AA]">
                Connecting your LinkedIn account allows Prospectr to send
                connection requests and messages on your behalf.
              </p>
            </div>
          </div>
        </div>

        {/* Account Settings */}
        <div className="bg-[#0F0F0F] rounded-lg p-5 sm:p-6 border border-[#1A1A1A]">
          <h2 className="text-lg font-medium text-white mb-4">
            Account Settings
          </h2>
          <div className="space-y-4">
            <div className="pt-2 text-center text-[#A1A1AA]">
              <p>
                Account settings are managed through your authentication
                provider.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/dashboard/layout.js
================
import { redirect } from "next/navigation";
import config from "@/config";
import { cookies } from "next/headers";
import { createServerClient } from "@supabase/ssr";
import DashboardShell from "@/components/dashboard/DashboardShell";

// This is a server-side component to ensure the user is logged in.
// If not, it will redirect to the login page.
// It's applied to all subpages of /dashboard in /app/dashboard/*** pages
// You can also add custom static UI elements like a Navbar, Sidebar, Footer, etc..
// See https://shipfa.st/docs/tutorials/private-page
export default async function LayoutPrivate({ children }) {
  const cookieStore = await cookies();
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            );
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  );

  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (!session) {
    redirect(config.auth.loginUrl);
  }

  return <DashboardShell>{children}</DashboardShell>;
}

================
File: app/dashboard/page.js
================
"use client";

import { useState, useEffect, Suspense } from "react";
import { Button } from "@/components/ui/button";
import ButtonAccount from "@/components/ButtonAccount";
import { createClient } from "@/utils/supabase/client";
import { useRouter } from "next/navigation";
import config from "@/config";
import { Zap, BarChart2, Users } from "lucide-react";
import { useAnalytics } from "@/components/contexts/AnalyticsContext";

function DashboardContent() {
  const router = useRouter();
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [subscriptionTier, setSubscriptionTier] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [connectionStats, setConnectionStats] = useState({
    total: 0,
    used: 0,
    remaining: 0,
  });
  const { analyticsData } = useAnalytics();

  // Helper function to format numbers with commas
  const formatNumber = (num) => {
    return num ? num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") : "0";
  };

  // Get the pro plan
  const proPlan = config.stripe.plans[0];

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        setIsLoading(true);
        const res = await fetch("/api/users");
        if (!res.ok) throw new Error("Failed to fetch user data");
        const data = await res.json();

        setIsSubscribed(data.user?.isSubscribed || false);
        setSubscriptionTier(data.user?.subscriptionTier || null);

        // Calculate connection stats based on subscription tier
        const limit =
          data.user?.subscriptionTier === "pro" ? proPlan.connectionLimit : 0;

        // For demo purposes, let's assume some connections have been used
        const used = Math.floor(Math.random() * 30); // Random number for demo

        setConnectionStats({
          total: limit,
          used: used,
          remaining: limit - used,
        });
      } catch (error) {
        console.error("Error fetching user data:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchUserData();
  }, []);

  return (
    <div className="space-y-4 sm:space-y-6" suppressHydrationWarning>
      {/* Header Section */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 sm:gap-0">
        <div>
          <h1 className="text-xl sm:text-2xl font-bold text-white">
            Welcome back!
          </h1>
          <p className="text-sm text-[#A1A1AA]">
            Here&apos;s what&apos;s happening with your campaigns
          </p>
        </div>
        <div className="mt-2 sm:mt-0">
          <ButtonAccount />
        </div>
      </div>

      {/* Connection Limit */}
      {!isLoading && isSubscribed && (
        <div className="bg-[#0F0F0F] rounded-lg p-4 border border-[#1A1A1A]">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
            <div>
              <h3 className="text-white font-medium">Pro Plan</h3>
              <p className="text-sm text-white/70 mt-1">
                {connectionStats.used} of {connectionStats.total} connection
                requests used this month
              </p>
            </div>
          </div>
          <div className="mt-3">
            <div className="w-full bg-zinc-800 rounded-full h-2">
              <div
                className="h-2 rounded-full bg-blue-500"
                style={{
                  width: `${
                    (connectionStats.used / connectionStats.total) * 100
                  }%`,
                }}
              ></div>
            </div>
          </div>
        </div>
      )}

      {/* Stats Overview */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 sm:gap-4">
        <div className="bg-[#0F0F0F] p-4 sm:p-6 rounded-lg border border-[#1A1A1A]">
          <h3 className="text-base sm:text-lg font-medium text-white">
            Total Connections
          </h3>
          <p className="text-2xl sm:text-3xl font-bold mt-2 text-white">
            {!analyticsData.isLoading && analyticsData.data
              ? formatNumber(analyticsData.data.summary?.total_connections || 0)
              : "0"}
          </p>
          <p className="text-xs sm:text-sm text-[#A1A1AA] mt-1">
            From all campaigns
          </p>
        </div>
        <div className="bg-[#0F0F0F] p-4 sm:p-6 rounded-lg border border-[#1A1A1A]">
          <h3 className="text-base sm:text-lg font-medium text-white">
            Active Campaigns
          </h3>
          <p className="text-2xl sm:text-3xl font-bold mt-2 text-white">
            {!analyticsData.isLoading && analyticsData.data
              ? analyticsData.data.summary?.active_campaigns || "0"
              : "0"}
          </p>
          <p className="text-xs sm:text-sm text-[#A1A1AA] mt-1">
            Currently running
          </p>
        </div>
        <div className="bg-[#0F0F0F] p-4 sm:p-6 rounded-lg border border-[#1A1A1A] sm:col-span-2 md:col-span-1">
          <h3 className="text-base sm:text-lg font-medium text-white">
            Response Rate
          </h3>
          <p className="text-2xl sm:text-3xl font-bold mt-2 text-white">
            {!analyticsData.isLoading && analyticsData.data
              ? `${analyticsData.data.summary?.response_rate || "0"}%`
              : "0%"}
          </p>
          <p className="text-xs sm:text-sm text-[#A1A1AA] mt-1">
            Average across campaigns
          </p>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="flex gap-4">
        <Button
          variant="outline"
          onClick={() => router.push("/dashboard/campaigns/new/leads")}
          className="text-sm sm:text-base py-2 px-3 sm:px-4"
        >
          New Campaign
        </Button>
      </div>

      {/* Recent Activity */}
      <div>
        <h2 className="text-lg sm:text-xl font-semibold text-white mb-3 sm:mb-4">
          Recent Activity
        </h2>
        <div className="bg-[#0F0F0F] rounded-lg p-4 sm:p-6 border border-[#1A1A1A]">
          {analyticsData.isLoading ? (
            <div className="text-center py-6 sm:py-8">
              <span className="loading loading-spinner loading-md"></span>
            </div>
          ) : analyticsData.data &&
            analyticsData.data.campaigns &&
            analyticsData.data.campaigns.length > 0 ? (
            <div className="space-y-4">
              {analyticsData.data.campaigns.slice(0, 3).map((campaign) => (
                <div
                  key={campaign.job_id}
                  className="flex items-center justify-between p-4 bg-black rounded-lg border border-[#1A1A1A]"
                >
                  <div className="flex items-center gap-4">
                    <div className="w-10 h-10 bg-[#1A1A1A] rounded-full flex items-center justify-center">
                      <Users className="w-5 h-5 text-white" />
                    </div>
                    <div>
                      <h4 className="text-white font-medium">
                        {campaign.name || `Campaign ${campaign.job_id}`}
                      </h4>
                      <p className="text-sm text-[#A1A1AA]">
                        {campaign.total_invitations} invitations •{" "}
                        {campaign.status}
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center gap-4">
                    <div className="text-right">
                      <p className="text-sm text-white">
                        {campaign.accepted_connections} connections
                      </p>
                      <p className="text-xs text-[#A1A1AA]">
                        {campaign.response_rate}% rate
                      </p>
                    </div>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() =>
                        router.push(`/dashboard/campaigns/${campaign.job_id}`)
                      }
                    >
                      <BarChart2 className="w-4 h-4 text-[#A1A1AA]" />
                    </Button>
                  </div>
                </div>
              ))}
              <div className="text-center mt-4">
                <Button
                  variant="link"
                  className="text-white hover:text-[#A1A1AA] text-sm"
                  onClick={() => router.push("/dashboard/campaigns")}
                >
                  View all campaigns
                </Button>
              </div>
            </div>
          ) : (
            <div className="text-center py-6 sm:py-8">
              <p className="text-[#A1A1AA] text-sm sm:text-base">
                No recent activity
              </p>
              <Button
                variant="link"
                className="mt-3 sm:mt-4 text-white hover:text-[#A1A1AA] text-sm sm:text-base"
                onClick={() => router.push("/dashboard/campaigns/new/leads")}
                disabled={!isSubscribed}
              >
                Start your first campaign
              </Button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default function Dashboard() {
  return (
    <Suspense
      fallback={
        <div className="flex items-center justify-center h-screen">
          <span className="loading loading-spinner loading-lg"></span>
        </div>
      }
    >
      <DashboardContent />
    </Suspense>
  );
}

================
File: app/privacy-policy/page.js
================
import Link from "next/link";
import { getSEOTags } from "@/libs/seo";
import config from "@/config";

export const metadata = getSEOTags({
  title: `Privacy Policy | ${config.appName}`,
  canonicalUrlRelative: "/privacy-policy",
});

const PrivacyPolicy = () => {
  return (
    <main className="max-w-xl mx-auto">
      <div className="p-5">
        <Link href="/" className="btn btn-ghost">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            className="w-5 h-5"
          >
            <path
              fillRule="evenodd"
              d="M15 10a.75.75 0 01-.75.75H7.612l2.158 1.96a.75.75 0 11-1.04 1.08l-3.5-3.25a.75.75 0 010-1.08l3.5-3.25a.75.75 0 111.04 1.08L7.612 9.25h6.638A.75.75 0 0115 10z"
              clipRule="evenodd"
            />
          </svg>{" "}
          Back
        </Link>
        <h1 className="text-3xl font-extrabold pb-6">
          Privacy Policy for {config.appName}
        </h1>

        <pre
          className="leading-relaxed whitespace-pre-wrap"
          style={{ fontFamily: "sans-serif" }}
        >
          {`Last Updated: March 13, 2024

Privacy Policy for Prospectr

At Prospectr ("we," "us," or "our"), we are committed to protecting your privacy and ensuring the security of your personal information. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our prospecting and lead generation service.

1. Information We Collect

1.1. Personal Information
We collect the following types of personal information:
- Name and contact details
- Business information
- Email address
- Payment information
- Account credentials
- Usage data and preferences
- Communication history

1.2. Professional Network Information
- LinkedIn profile data (when connected)
- Professional connections
- Business relationships
- Industry and role information

1.3. Automated Information Collection
- Log data and analytics
- Device information
- IP addresses
- Cookies and similar technologies
- Usage patterns and preferences

2. How We Use Your Information

2.1. Core Service Functionality
- Providing prospecting and lead generation services
- Managing your account
- Processing payments
- Sending service notifications
- Improving our services

2.2. Communication
- Sending product updates
- Providing customer support
- Sharing relevant marketing materials
- Responding to your requests

2.3. Service Improvement
- Analyzing usage patterns
- Developing new features
- Enhancing user experience
- Troubleshooting issues

3. Data Sharing and Disclosure

3.1. We may share your information with:
- Service providers and partners
- Payment processors
- Analytics providers
- Cloud storage providers

3.2. We do NOT:
- Sell your personal information
- Share your data with unauthorized third parties
- Use your data for purposes other than stated

4. Data Security

4.1. Security Measures
- Encryption of sensitive data
- Regular security audits
- Access controls
- Secure data storage

4.2. Data Retention
- We retain data as long as necessary
- You can request data deletion
- Some data may be retained for legal purposes

5. Your Rights and Choices

You have the right to:
- Access your personal information
- Correct inaccurate data
- Request data deletion
- Opt-out of marketing communications
- Export your data
- Restrict data processing

6. Children's Privacy

We do not knowingly collect or maintain information from persons under 16 years of age. If we learn that personal information of persons under 16 has been collected on our Service, we will take appropriate steps to delete this information.

7. International Data Transfers

If we transfer your data internationally, we ensure appropriate safeguards are in place to protect your information and comply with applicable data protection laws.

8. Cookie Policy

We use cookies and similar technologies to:
- Maintain your session
- Remember your preferences
- Analyze usage patterns
- Improve our service
You can control cookie settings through your browser preferences.

9. Changes to This Policy

9.1. We may update this Privacy Policy periodically to reflect:
- Changes in our practices
- New features or services
- Legal requirements

9.2. We will notify you of significant changes by:
- Email notification
- Website announcement
- In-app notification

10. Contact Us

If you have questions about this Privacy Policy or our privacy practices, please contact us:
- Through our website contact form
- Via our support channels

11. Legal Compliance

We comply with applicable data protection laws and regulations, including:
- GDPR (where applicable)
- CCPA (where applicable)
- Local data protection laws

Your trust is important to us, and we are committed to protecting your privacy and security while using Prospectr.`}
        </pre>
      </div>
    </main>
  );
};

export default PrivacyPolicy;

================
File: app/signin/layout.js
================
import config from "@/config";
import { getSEOTags } from "@/libs/seo";

export const metadata = getSEOTags({
  title: `Sign-in to ${config.appName}`,
  canonicalUrlRelative: "/auth/signin",
});

export default function Layout({ children }) {
  return <>{children}</>;
}

================
File: app/signin/page.js
================
"use client";

import Link from "next/link";
import { useState } from "react";
import { createClient } from "@/utils/supabase/client";
import toast from "react-hot-toast";
import config from "@/config";
import { signInWithGoogle } from "@/utils/action";

// This a login/singup page for Supabase Auth.
// Successfull login redirects to /api/auth/callback where the Code Exchange is processed (see app/api/auth/callback/route.js).
export default function Login() {
  const [isLoading, setIsLoading] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);

  const handleEmailSignIn = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const supabase = createClient();
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
        options: {
          redirectTo: `${process.env.NEXT_PUBLIC_APP_URL}/auth/callback`,
          persistSession: true,
        },
      });

      if (error) {
        // Check for unverified account error
        if (error.message.includes("Email not confirmed")) {
          toast.error("Please verify your email before signing in");
          // Add option to resend verification email
          const { error: resendError } = await supabase.auth.resend({
            type: "signup",
            email,
          });
          if (!resendError) {
            toast.success(
              "Verification email resent. Please check your inbox."
            );
          }
        } else {
          toast.error(error.message);
        }
      }
    } catch (error) {
      console.log(error);
      toast.error("An error occurred during sign in");
    } finally {
      setIsLoading(false);
    }
  };

  // Handler for Google sign-in to properly prepare form data
  const handleGoogleSignIn = async () => {
    // Create an empty FormData object for the server action
    const formData = new FormData();
    // No special parameters needed for basic sign-in
    await signInWithGoogle(formData);
  };

  return (
    <main
      className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white p-8 md:p-24"
      data-theme={config.colors.theme}
    >
      <div className="max-w-md mx-auto">
        {/* Navigation Links */}
        <div className="flex justify-center gap-4 mb-8">
          <Link
            href="/signin"
            className="px-6 py-2 bg-green-500 text-white rounded-lg font-medium"
          >
            Sign In
          </Link>
          <Link
            href="/signup"
            className="px-6 py-2 bg-gray-600 text-white rounded-lg font-medium hover:bg-gray-700"
          >
            Sign Up
          </Link>
        </div>

        <h1 className="text-4xl md:text-5xl font-extrabold tracking-tight text-center mb-12 bg-gradient-to-r from-white to-gray-400 text-transparent bg-clip-text">
          Sign In
        </h1>

        <div className="space-y-6">
          {/* Google Sign In */}
          <button
            className="flex items-center justify-center w-full px-4 py-3 text-gray-900 bg-white rounded-lg hover:bg-gray-100 transition-colors"
            onClick={handleGoogleSignIn}
            disabled={isLoading}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="w-6 h-6 mr-2"
              viewBox="0 0 48 48"
            >
              <path
                fill="#FFC107"
                d="M43.611 20.083H42V20H24v8h11.303c-1.649 4.657-6.08 8-11.303 8-6.627 0-12-5.373-12-12s5.373-12 12-12c3.059 0 5.842 1.154 7.961 3.039l5.657-5.657C34.046 6.053 29.268 4 24 4 12.955 4 4 12.955 4 24s8.955 20 20 20 20-8.955 20-20c0-1.341-.138-2.65-.389-3.917z"
              />
              <path
                fill="#FF3D00"
                d="m6.306 14.691 6.571 4.819C14.655 15.108 18.961 12 24 12c3.059 0 5.842 1.154 7.961 3.039l5.657-5.657C34.046 6.053 29.268 4 24 4 16.318 4 9.656 8.337 6.306 14.691z"
              />
              <path
                fill="#4CAF50"
                d="M24 44c5.166 0 9.86-1.977 13.409-5.192l-6.19-5.238A11.91 11.91 0 0 1 24 36c-5.202 0-9.619-3.317-11.283-7.946l-6.522 5.025C9.505 39.556 16.227 44 24 44z"
              />
              <path
                fill="#1976D2"
                d="M43.611 20.083H42V20H24v8h11.303a12.04 12.04 0 0 1-4.087 5.571l.003-.002 6.19 5.238C36.971 39.205 44 34 44 24c0-1.341-.138-2.65-.389-3.917z"
              />
            </svg>
            Sign in with Google
          </button>

          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-600"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-gradient-to-b from-gray-900 to-black text-gray-400">
                OR
              </span>
            </div>
          </div>

          {/* Email/Password Form */}
          <form onSubmit={handleEmailSignIn} className="space-y-4">
            <div>
              <input
                type="email"
                placeholder="Email address"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full px-4 py-3 rounded-lg bg-gray-800 border border-gray-700 text-white placeholder-gray-400 focus:outline-none focus:border-green-500"
                required
              />
            </div>
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full px-4 py-3 rounded-lg bg-gray-800 border border-gray-700 text-white placeholder-gray-400 focus:outline-none focus:border-green-500"
                required
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400"
              >
                {showPassword ? (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                    <path
                      fillRule="evenodd"
                      d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
                      clipRule="evenodd"
                    />
                  </svg>
                ) : (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z"
                      clipRule="evenodd"
                    />
                    <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                  </svg>
                )}
              </button>
            </div>
            <button
              type="submit"
              disabled={isLoading}
              className="w-full px-4 py-3 bg-green-500 text-white rounded-lg font-medium hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-gray-900"
            >
              {isLoading ? "Signing in..." : "Sign in"}
            </button>
          </form>

          <div className="text-center">
            <button
              onClick={() => (window.location.href = "/reset-password")}
              className="text-sm text-gray-400 hover:text-white"
            >
              Forgot your password?
            </button>
          </div>

          <p className="mt-8 text-center text-sm text-gray-400">
            By signing in, you agree to our{" "}
            <Link href="/tos" className="text-white hover:underline">
              Terms of Service
            </Link>{" "}
            and{" "}
            <Link href="/privacy-policy" className="text-white hover:underline">
              Privacy Policy
            </Link>
          </p>
        </div>
      </div>
    </main>
  );
}

================
File: app/signup/layout.js
================
import config from "@/config";
import { getSEOTags } from "@/libs/seo";

export const metadata = getSEOTags({
  title: `Create account - ${config.appName}`,
  canonicalUrlRelative: "/auth/signup",
});

export default function Layout({ children }) {
  return <>{children}</>;
}

================
File: app/signup/page.js
================
import { Suspense } from "react";
import SignupForm from "./SignupForm";

export default function SignupPage() {
  return (
    <Suspense
      fallback={
        <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white p-8 md:p-24 flex items-center justify-center">
          <div className="loading loading-spinner loading-lg"></div>
        </div>
      }
    >
      <SignupForm />
    </Suspense>
  );
}

================
File: app/signup/SignupForm.js
================
"use client";

import Link from "next/link";
import { useState, useEffect } from "react";
import { createClient } from "@/utils/supabase/client";
import { useRouter, useSearchParams } from "next/navigation";
import toast from "react-hot-toast";
import config from "@/config";
import { signInWithGoogle } from "@/utils/action";
import { createCheckoutSession } from "@/utils/stripe-client";

export default function SignupForm() {
  const [isLoading, setIsLoading] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const router = useRouter();
  const searchParams = useSearchParams();
  const isPendingCheckout = searchParams.get("checkout") === "pending";

  // Load checkout data from localStorage if redirected from pricing
  const [selectedPlanId, setSelectedPlanId] = useState(null);

  useEffect(() => {
    // If we're in checkout flow, check localStorage for plan ID
    if (isPendingCheckout) {
      const storedPlanId = localStorage.getItem("selectedPlanId");
      if (storedPlanId) {
        setSelectedPlanId(storedPlanId);
      }
    }
  }, [isPendingCheckout]);

  // Function to handle checkout after signup if needed
  const handleCheckoutAfterSignup = async () => {
    try {
      // Check if there was a pending checkout
      const selectedPlanId = localStorage.getItem("selectedPlanId");
      const returnUrl = localStorage.getItem("checkoutReturnUrl");

      if (selectedPlanId) {
        // Clear localStorage items
        localStorage.removeItem("selectedPlanId");
        localStorage.removeItem("checkoutReturnUrl");

        // Create a checkout session with the saved plan
        const { url } = await createCheckoutSession({
          priceId: selectedPlanId,
          successUrl: `${window.location.origin}/dashboard?checkout=success`,
          cancelUrl: `${window.location.origin}${
            returnUrl || "/"
          }?checkout=cancel`,
        });

        // Redirect to checkout
        window.location.href = url;
      } else {
        // Normal redirect to dashboard if no pending checkout
        router.push("/dashboard");
      }
    } catch (error) {
      console.error("Error handling checkout after signup:", error);
      toast.error("Could not process checkout. Please try again.");
      router.push("/dashboard");
    }
  };

  const handleEmailSignUp = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const supabase = createClient();
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          emailRedirectTo: `${window.location.origin}/auth/callback`,
          data: {
            // User metadata can be added here
          },
          emailConfirmationRequired: true, // Explicitly require email confirmation
          persistSession: true,
        },
      });

      if (error) {
        toast.error(error.message);
        console.log(error);
      } else {
        toast.success("Check your email to confirm your account!");

        // If this was part of a checkout flow, handle it
        if (isPendingCheckout && data?.user) {
          await handleCheckoutAfterSignup();
        }
      }
    } catch (error) {
      console.log(error);
      toast.error("An error occurred during sign up");
    } finally {
      setIsLoading(false);
    }
  };

  // Custom Google sign-in that handles checkout after auth
  const handleGoogleSignIn = async () => {
    // Create a FormData object to pass data to the server action
    const formData = new FormData();

    if (isPendingCheckout) {
      formData.append("redirectToCheckout", "true");

      // Get the selected plan ID from localStorage
      const planId = localStorage.getItem("selectedPlanId");
      if (planId) {
        formData.append("selectedPlanId", planId);

        // Clear localStorage after submitting to server action
        localStorage.removeItem("selectedPlanId");
        localStorage.removeItem("checkoutReturnUrl");
      }
    }

    // Call the server action with the form data
    await signInWithGoogle(formData);
  };

  return (
    <main
      className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white p-8 md:p-24"
      data-theme={config.colors.theme}
    >
      <div className="max-w-md mx-auto">
        {/* Navigation Links */}
        <div className="flex justify-center gap-4 mb-8">
          <Link
            href="/signin"
            className="px-6 py-2 bg-gray-600 text-white rounded-lg font-medium hover:bg-gray-700"
          >
            Sign In
          </Link>
          <Link
            href="/signup"
            className="px-6 py-2 bg-green-500 text-white rounded-lg font-medium"
          >
            Sign Up
          </Link>
        </div>

        <h1 className="text-4xl md:text-5xl font-extrabold tracking-tight text-center mb-12 bg-gradient-to-r from-white to-gray-400 text-transparent bg-clip-text">
          Create Account
        </h1>

        {isPendingCheckout && (
          <div className="alert alert-info mb-6">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              className="stroke-current shrink-0 w-6 h-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              ></path>
            </svg>
            <span>Create an account to continue with your subscription</span>
          </div>
        )}

        <div className="space-y-6">
          {/* Google Sign Up */}
          <button
            className="flex items-center justify-center w-full px-4 py-3 text-gray-900 bg-white rounded-lg hover:bg-gray-100 transition-colors"
            onClick={handleGoogleSignIn}
            disabled={isLoading}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="w-6 h-6 mr-2"
              viewBox="0 0 48 48"
            >
              <path
                fill="#FFC107"
                d="M43.611 20.083H42V20H24v8h11.303c-1.649 4.657-6.08 8-11.303 8-6.627 0-12-5.373-12-12s5.373-12 12-12c3.059 0 5.842 1.154 7.961 3.039l5.657-5.657C34.046 6.053 29.268 4 24 4 12.955 4 4 12.955 4 24s8.955 20 20 20 20-8.955 20-20c0-1.341-.138-2.65-.389-3.917z"
              />
              <path
                fill="#FF3D00"
                d="m6.306 14.691 6.571 4.819C14.655 15.108 18.961 12 24 12c3.059 0 5.842 1.154 7.961 3.039l5.657-5.657C34.046 6.053 29.268 4 24 4 16.318 4 9.656 8.337 6.306 14.691z"
              />
              <path
                fill="#4CAF50"
                d="M24 44c5.166 0 9.86-1.977 13.409-5.192l-6.19-5.238A11.91 11.91 0 0 1 24 36c-5.202 0-9.619-3.317-11.283-7.946l-6.522 5.025C9.505 39.556 16.227 44 24 44z"
              />
              <path
                fill="#1976D2"
                d="M43.611 20.083H42V20H24v8h11.303a12.04 12.04 0 0 1-4.087 5.571l.003-.002 6.19 5.238C36.971 39.205 44 34 44 24c0-1.341-.138-2.65-.389-3.917z"
              />
            </svg>
            Sign up with Google
          </button>

          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-600"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-gradient-to-b from-gray-900 to-black text-gray-400">
                OR
              </span>
            </div>
          </div>

          {/* Email/Password Form */}
          <form onSubmit={handleEmailSignUp} className="space-y-4">
            <div>
              <input
                type="email"
                placeholder="Email address"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full px-4 py-3 rounded-lg bg-gray-800 border border-gray-700 text-white placeholder-gray-400 focus:outline-none focus:border-green-500"
                required
              />
            </div>
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full px-4 py-3 rounded-lg bg-gray-800 border border-gray-700 text-white placeholder-gray-400 focus:outline-none focus:border-green-500"
                required
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400"
              >
                {showPassword ? (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                    <path
                      fillRule="evenodd"
                      d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
                      clipRule="evenodd"
                    />
                  </svg>
                ) : (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z"
                      clipRule="evenodd"
                    />
                    <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                  </svg>
                )}
              </button>
            </div>
            <button
              type="submit"
              disabled={isLoading}
              className="w-full px-4 py-3 bg-green-500 text-white rounded-lg font-medium hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-gray-900"
            >
              {isLoading ? "Creating account..." : "Create account"}
            </button>
          </form>

          <p className="mt-8 text-center text-sm text-gray-400">
            By signing up, you agree to our{" "}
            <Link href="/tos" className="text-white hover:underline">
              Terms of Service
            </Link>{" "}
            and{" "}
            <Link href="/privacy-policy" className="text-white hover:underline">
              Privacy Policy
            </Link>
          </p>
        </div>
      </div>
    </main>
  );
}

================
File: app/store/campaignStore.js
================
import { create } from "zustand";
import { persist } from "zustand/middleware";

export const useCampaignStore = create(
  persist(
    (set) => ({
      // Selected leads from search
      selectedLeads: [],

      // Connection message details
      connectionMessage: "",
      followUpMessage: "",
      templateName: "",

      // Campaign status
      isPublishing: false,
      publishError: null,
      publishSuccess: false,

      // Actions
      setSelectedLeads: (leads) => set({ selectedLeads: leads }),
      addSelectedLead: (lead) =>
        set((state) => ({
          selectedLeads: [...state.selectedLeads, lead],
        })),
      removeSelectedLead: (leadId) =>
        set((state) => ({
          selectedLeads: state.selectedLeads.filter(
            (lead) => lead.identifier !== leadId
          ),
        })),
      clearSelectedLeads: () => set({ selectedLeads: [] }),

      setConnectionMessage: (message) => set({ connectionMessage: message }),
      setFollowUpMessage: (message) => set({ followUpMessage: message }),
      setTemplateName: (name) => set({ templateName: name }),

      setPublishingStatus: (status) => set({ isPublishing: status }),
      setPublishError: (error) => set({ publishError: error }),
      setPublishSuccess: (success) => set({ publishSuccess: success }),

      resetCampaign: () =>
        set({
          selectedLeads: [],
          connectionMessage: "",
          followUpMessage: "",
          templateName: "",
          isPublishing: false,
          publishError: null,
          publishSuccess: false,
        }),
    }),
    {
      name: "campaign-storage",
    }
  )
);

================
File: app/survey/_assets/components/SurveyTable.js
================
import Link from "next/link";
// This is the article card that appears in the home page, in the category page, and in the author's page
const UserSurveyID = ({surveyObject}) => {
    
    return (
        <div>
        {{surveyObject}}
        </div>
    )
}

================
File: app/survey/page.js
================
import React from "react";

function page() {
  return <div>page</div>;
}

export default page;

================
File: app/testPage/page.jsx
================
"use client";
import React, { useEffect, useState } from "react";

import {
  PARAMETER_TYPES,
  fetchLinkedInParameterIds,
} from "../utils/linkedin/searchParameters";

function Test() {
  const [data, setData] = useState([]);
  const [parameterResults, setParameterResults] = useState([]);
  const [searchResults, setSearchResults] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  // Test parameter search
  const testParameterSearch = async () => {
    try {
      setIsLoading(true);
      setError(null);

      // Test location parameter search
      const locationParams = await fetchLinkedInParameterIds(
        PARAMETER_TYPES.LOCATION,
        "New York"
      );

      // Test company parameter search
      const companyParams = await fetchLinkedInParameterIds(
        PARAMETER_TYPES.COMPANY,
        "Google"
      );

      // Test industry parameter search
      const industryParams = await fetchLinkedInParameterIds(
        PARAMETER_TYPES.INDUSTRY,
        "Software"
      );

      setParameterResults({
        locations: locationParams,
        companies: companyParams,
        industries: industryParams,
      });
    } catch (err) {
      setError(err.message || "Failed to fetch parameters");
    } finally {
      setIsLoading(false);
    }
  };

  // Test search with parameter IDs
  const testSearchWithParameters = async () => {
    try {
      setIsLoading(true);
      setError(null);

      // First get some parameter IDs
      const locationParams = await fetchLinkedInParameterIds(
        PARAMETER_TYPES.LOCATION,
        "San Francisco"
      );

      const companyParams = await fetchLinkedInParameterIds(
        PARAMETER_TYPES.COMPANY,
        "Microsoft"
      );

      // Use the first ID from each result (if available)
      const locationIds =
        locationParams.length > 0 ? [locationParams[0].id] : [];
      const companyIds = companyParams.length > 0 ? [companyParams[0].id] : [];

      // Perform search with parameter IDs
      const res = await fetch("/api/linkedin/search", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          jobTitle: "software developer",
          locationIds: locationIds,
          companyIds: companyIds,
          networkDistance: [1, 2, 3],
        }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || `Search failed: ${res.status}`);
      }

      const data = await res.json();
      setSearchResults(data);
    } catch (err) {
      setError(err.message || "Failed to search with parameters");
    } finally {
      setIsLoading(false);
    }
  };

  // Original search test
  const testOriginalSearch = async () => {
    try {
      setIsLoading(true);
      setError(null);

      const res = await fetch("/api/linkedin/search", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          jobTitle: "software developer",
          location: "USA",
          company: "apple",
        }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || `Search failed: ${res.status}`);
      }

      const data = await res.json();
      setData(data);
    } catch (err) {
      setError(err.message || "Failed to search");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">LinkedIn API Test Page</h1>

      <div className="space-y-8">
        {/* Parameter Search Test */}
        <div className="border p-4 rounded-lg">
          <h2 className="text-xl font-semibold mb-4">Parameter Search Test</h2>
          <button
            onClick={testParameterSearch}
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 mr-4"
            disabled={isLoading}
          >
            {isLoading ? "Loading..." : "Test Parameter Search"}
          </button>

          {parameterResults && Object.keys(parameterResults).length > 0 && (
            <div className="mt-4">
              <h3 className="text-lg font-medium mb-2">Parameter Results:</h3>

              {/* Locations */}
              {parameterResults.locations &&
                parameterResults.locations.length > 0 && (
                  <div className="mb-4">
                    <h4 className="font-medium">Locations:</h4>
                    <ul className="list-disc pl-5">
                      {parameterResults.locations.map((item) => (
                        <li key={item.id}>
                          {item.title} (ID: {item.id})
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

              {/* Companies */}
              {parameterResults.companies &&
                parameterResults.companies.length > 0 && (
                  <div className="mb-4">
                    <h4 className="font-medium">Companies:</h4>
                    <ul className="list-disc pl-5">
                      {parameterResults.companies.map((item) => (
                        <li key={item.id}>
                          {item.title} (ID: {item.id})
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

              {/* Industries */}
              {parameterResults.industries &&
                parameterResults.industries.length > 0 && (
                  <div className="mb-4">
                    <h4 className="font-medium">Industries:</h4>
                    <ul className="list-disc pl-5">
                      {parameterResults.industries.map((item) => (
                        <li key={item.id}>
                          {item.title} (ID: {item.id})
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
            </div>
          )}
        </div>

        {/* Search with Parameters Test */}
        <div className="border p-4 rounded-lg">
          <h2 className="text-xl font-semibold mb-4">
            Search with Parameters Test
          </h2>
          <button
            onClick={testSearchWithParameters}
            className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 mr-4"
            disabled={isLoading}
          >
            {isLoading ? "Loading..." : "Test Search with Parameters"}
          </button>

          {searchResults && searchResults.results && (
            <div className="mt-4">
              <h3 className="text-lg font-medium mb-2">Search Results:</h3>
              <p>Found {searchResults.results.length} profiles</p>

              <ul className="mt-2 space-y-2">
                {searchResults.results.map((profile) => (
                  <li key={profile.id} className="border p-2 rounded">
                    <div className="font-medium">{profile.name}</div>
                    <div className="text-sm">{profile.headline}</div>
                    <div className="text-xs text-gray-500">
                      {profile.location} • {profile.company || "No company"}
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>

        {/* Original Search Test */}
        <div className="border p-4 rounded-lg">
          <h2 className="text-xl font-semibold mb-4">Original Search Test</h2>
          <button
            onClick={testOriginalSearch}
            className="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700"
            disabled={isLoading}
          >
            {isLoading ? "Loading..." : "Test Original Search"}
          </button>

          {data && data.results && (
            <div className="mt-4">
              <h3 className="text-lg font-medium mb-2">
                Original Search Results:
              </h3>
              <p>Found {data.results.length} profiles</p>
            </div>
          )}
        </div>
      </div>

      {/* Error Display */}
      {error && (
        <div className="mt-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
          <strong>Error:</strong> {error}
        </div>
      )}
    </div>
  );
}

export default Test;

================
File: app/thankyou/page.js
================
import React from 'react';

const ThankYouPage = () => {
    return (
      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '100vh', textAlign: 'center' }}>
        <h1 style={{ fontSize: '3em', fontWeight: 'bold' }}>Thank You!</h1>
        <p style={{ fontSize: '2em' }}>Your vote has been submitted successfully.</p>
      </div>
    );
  };

export default ThankYouPage;

================
File: app/tos/page.js
================
import Link from "next/link";
import { getSEOTags } from "@/libs/seo";
import config from "@/config";

// CHATGPT PROMPT TO GENERATE YOUR TERMS & SERVICES — replace with your own data 👇

// 1. Go to https://chat.openai.com/
// 2. Copy paste bellow
// 3. Replace the data with your own (if needed)
// 4. Paste the answer from ChatGPT directly in the <pre> tag below

// You are an excellent lawyer.

// I need your help to write a simple Terms & Services for my website. Here is some context:
// - Website: https://shipfa.st
// - Name: ShipFast
// - Contact information: marc@shipfa.st
// - Description: A JavaScript code boilerplate to help entrepreneurs launch their startups faster
// - Ownership: when buying a package, users can download code to create apps. They own the code but they do not have the right to resell it. They can ask for a full refund within 7 day after the purchase.
// - User data collected: name, email and payment information
// - Non-personal data collection: web cookies
// - Link to privacy-policy: https://shipfa.st/privacy-policy
// - Governing Law: France
// - Updates to the Terms: users will be updated by email

// Please write a simple Terms & Services for my site. Add the current date. Do not add or explain your reasoning. Answer:

export const metadata = getSEOTags({
  title: `Terms and Conditions | ${config.appName}`,
  canonicalUrlRelative: "/tos",
});

const TOS = () => {
  return (
    <main className="max-w-xl mx-auto">
      <div className="p-5">
        <Link href="/" className="btn btn-ghost">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            className="w-5 h-5"
          >
            <path
              fillRule="evenodd"
              d="M15 10a.75.75 0 01-.75.75H7.612l2.158 1.96a.75.75 0 11-1.04 1.08l-3.5-3.25a.75.75 0 010-1.08l3.5-3.25a.75.75 0 111.04 1.08L7.612 9.25h6.638A.75.75 0 0115 10z"
              clipRule="evenodd"
            />
          </svg>
          Back
        </Link>
        <h1 className="text-3xl font-extrabold pb-6">
          Terms and Conditions for {config.appName}
        </h1>

        <pre
          className="leading-relaxed whitespace-pre-wrap"
          style={{ fontFamily: "sans-serif" }}
        >
          {`Last Updated: March 13, 2024

Welcome to Prospectr!

These Terms of Service ("Terms") govern your use of Prospectr's services and website ("Service"). By using our Service, you agree to these Terms.

1. Service Description

Prospectr is a professional prospecting and lead generation platform that helps businesses connect with potential clients and grow their network effectively.

2. User Account and Responsibilities

2.1. You must provide accurate and complete information when creating an account.
2.2. You are responsible for maintaining the security of your account credentials.
2.3. You agree to use the Service in compliance with all applicable laws and regulations.

3. Subscription and Payments

3.1. Access to Prospectr's features requires a paid subscription.
3.2. Subscription fees are billed in advance on a recurring basis.
3.3. We offer a 7-day refund policy for new subscriptions.
3.4. Cancellations will take effect at the end of the current billing period.

4. Acceptable Use

4.1. You agree not to:
- Use the Service for any illegal purposes
- Violate any third-party rights
- Attempt to gain unauthorized access to the Service
- Use the Service to send spam or unsolicited messages
- Reverse engineer or attempt to extract the source code of our software

5. Data and Privacy

5.1. We collect and process user data as described in our Privacy Policy.
5.2. You retain ownership of your data, but grant us license to use it to provide the Service.
5.3. We use cookies and similar technologies to enhance user experience.

6. Intellectual Property

6.1. The Service, including all related software, designs, and content, is owned by Prospectr.
6.2. You may not copy, modify, or create derivative works of our Service or its content.

7. Limitation of Liability

7.1. The Service is provided "as is" without any warranties.
7.2. We are not liable for any indirect, incidental, or consequential damages.
7.3. Our total liability shall not exceed the amount paid by you for the Service in the past 12 months.

8. Termination

8.1. We may suspend or terminate your access to the Service for violations of these Terms.
8.2. You may terminate your account at any time by canceling your subscription.

9. Changes to Terms

9.1. We may modify these Terms at any time.
9.2. We will notify users of significant changes via email.
9.3. Continued use of the Service after changes constitutes acceptance of the new Terms.

10. Governing Law

These Terms are governed by the laws of the jurisdiction in which Prospectr is registered, without regard to its conflict of law provisions.

11. Contact Information

For questions about these Terms, please contact us through our website or support channels.

Thank you for using Prospectr!`}
        </pre>
      </div>
    </main>
  );
};

export default TOS;

================
File: app/utils/linkedin/searchParameters.js
================
/**
 * Fetches LinkedIn parameter IDs based on keywords and type
 *
 * @param {string} type - The type of parameter (LOCATION, COMPANY, INDUSTRY, etc.)
 * @param {string} keywords - The search keywords
 * @param {number} limit - Optional limit for results (default: 10)
 * @returns {Promise<Array>} - Array of parameter objects with id and title
 */
export async function fetchLinkedInParameterIds(type, keywords, limit = 10) {
  try {
    // Add retry logic
    const maxRetries = 3;
    let retryCount = 0;
    let lastError = null;

    while (retryCount < maxRetries) {
      try {
        const response = await fetch(
          `/api/linkedin/search/parameters?type=${type}&keywords=${encodeURIComponent(
            keywords
          )}&limit=${limit}`,
          {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          }
        );

        if (!response.ok) {
          const error = await response.json();
          throw new Error(
            error.message || `Failed to fetch ${type} parameters`
          );
        }

        const data = await response.json();
        return data.items || [];
      } catch (error) {
        lastError = error;
        retryCount++;
        if (retryCount < maxRetries) {
          // Wait before retrying (exponential backoff)
          await new Promise((resolve) =>
            setTimeout(resolve, Math.pow(2, retryCount) * 1000)
          );
        }
      }
    }

    // If we've exhausted all retries, throw the last error
    throw lastError;
  } catch (error) {
    console.error(`Error fetching ${type} parameters:`, error);
    throw error;
  }
}

/**
 * Parameter types supported by LinkedIn search
 */
export const PARAMETER_TYPES = {
  LOCATION: "LOCATION",
  COMPANY: "COMPANY",
  INDUSTRY: "INDUSTRY",
  SCHOOL: "SCHOOL",
  FUNCTION: "FUNCTION", // Job function
  TITLE: "TITLE", // Job title
  SKILL: "SKILL",
};

================
File: app/error.js
================
"use client";

import Link from "next/link";
import ButtonSupport from "../components/ButtonSupport";

// A simple error boundary to show a nice error page if something goes wrong (Error Boundary)
// Users can contanct support, go to the main page or try to reset/refresh to fix the error
export default function Error({ error, reset }) {
  return (
    <>
      <div className="h-screen w-full flex flex-col justify-center items-center text-center gap-6 p-6">
        <div className="p-6 bg-white rounded-xl">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            data-name="Layer 1"
            className="w-36 h-36 md:w-64 md:h-64"
            viewBox="0 0 509.04617 507.58297"
          >
            <path
              fill="#f2f2f2"
              d="M504.17 454.213c-6.3 13.08-17.91 22.81-30.08 30.72a189.914 189.914 0 0 1-42.66 20.65c-2.06.71-4.14 1.37-6.23 2h-84.51c-.59-.64-1.15-1.31-1.68-2-5.66-7.25-8.72-16.54-7.61-25.64 1.43-11.69 10.31-22.43 21.81-24.91 11.51-2.49 24.63 4.38 28.13 15.63 1.92-21.68 4.14-44.26 15.66-62.72 10.44-16.71 28.51-28.67 48.09-30.81a60.558 60.558 0 0 1 33.48 6.13c.95.48 1.89.98 2.81 1.5a56.015 56.015 0 0 1 16.14 13.77c12.21 15.46 15.2 37.93 6.65 55.68Z"
            />
            <path
              fill="#fff"
              d="M480.76 386.133a317.08 317.08 0 0 0-90.56 119.45c-.29.66-.58 1.33-.86 2h-3.98c.28-.67.56-1.34.85-2 3.85-9 8.1-17.84 12.77-26.45a321.861 321.861 0 0 1 34.91-51.66 316.97 316.97 0 0 1 44.26-43.95 1.93 1.93 0 0 1 .42-.26 2.032 2.032 0 0 1 2.81 1.5 1.478 1.478 0 0 1-.62 1.37Z"
            />
            <path
              fill="#ffb8b8"
              d="M167.214 293.587a9.497 9.497 0 0 0-1.203-14.513l-4.796-31.62-19.702 6.201 10.793 28.21a9.549 9.549 0 0 0 14.908 11.722Z"
            />
            <path
              className="fill-primary"
              d="m146.919 278.711-12.153-56.756a32.5 32.5 0 0 1 9.281-30.393c15.556-14.99 35.55-33.885 42.455-38.772a35.606 35.606 0 0 1 22.277-6.576l.166.018 10.454 9.88-22.773 37.489-34.571 21.66 3.847 55.63Z"
            />
            <rect
              width={59}
              height={8}
              x={134.48}
              y={201.583}
              fill="#ccc"
              rx={4}
            />
            <rect
              width={59}
              height={8}
              x={134.48}
              y={288.583}
              fill="#ccc"
              rx={4}
            />
            <path
              fill="#ccc"
              d="M164.48 506.583a2 2 0 0 1-1.992-1.823l-25.496-299a2 2 0 1 1 3.984-.354l23.475 276.252L187.26 205.41a2 2 0 1 1 3.985.344l-24.771 299a2 2 0 0 1-1.99 1.828Z"
            />
            <circle cx={221.715} cy={108.007} r={26.239} fill="#ffb8b8" />
            <path
              fill="#ffb8b8"
              d="m143.516 494.591-12.478-3.977 9.402-50.025 18.418 5.87-15.342 48.132z"
            />
            <path
              fill="#2f2e41"
              d="m142.822 505.66-40.172-12.805.332-1.043a15.829 15.829 0 0 1 19.864-10.262l25.109 8.004Z"
            />
            <path
              fill="#ffb8b8"
              d="M234.305 494.332h-13.097l-6.233-50.518h19.33v50.518z"
            />
            <path
              fill="#2f2e41"
              d="M196.45 505.994h40.162V491.09h-25.354a14.826 14.826 0 0 0-14.809 14.81ZM233.922 477.938l-4.42-.66c-13.407-1.997-14.21-2.117-16.339-3.051-1.087-.478-1.163-7.693-.51-48.256.478-29.774 1.075-66.83-.083-86.723a3.5 3.5 0 0 0-6.703-1.18c-9.976 23.037-26.712 74.59-37.787 108.704-3.852 11.866-6.895 21.239-8.82 26.857a4.524 4.524 0 0 1-5.354 2.898c-9.114-2.278-8.504-3.247-21.485-6.604a4.489 4.489 0 0 1-3.282-5.282c2.348-11.072 45.314-190.6 48.603-207.666a4.502 4.502 0 0 1 5.305-3.571c9.674 1.949 15.56 4.017 25.12 6.016 10.315 2.158 20.982 4.39 31.386 6.472a4.463 4.463 0 0 1 2.619 1.605c2.574 3.252 6.392 5.077 10.434 7.01 2.724 1.302-3.45 1.185-1.077 3.063 9.61 7.608-4.21 162.088-12.56 196.978a4.515 4.515 0 0 1-5.047 3.39ZM232.898 130.967c-1.532-6.5 6.212-20.487 4.68-26.987-1.037-4.402-11.388-1.41-13.804-5.233s-6.461-6.921-10.984-6.972c-5.198-.058-10.313 3.798-15.237 2.131-4.978-1.685-6.57-8.503-4.368-13.276s6.942-7.814 11.627-10.197c7.978-4.059 17.266-7.023 25.805-4.337 5.161 1.623 9.477 5.14 13.653 8.58 3.807 3.136 7.678 6.342 10.339 10.495 5.213 8.135 4.899 19.095.444 27.669s-12.574 14.865-21.519 18.517"
            />
            <path
              className="fill-primary"
              d="M168.47 282.233c2.832-4.73 7.132-26.897 12.434-64.103 3.61-25.4 6.755-51.206 8.316-64.389a6.339 6.339 0 0 1 3.56-5.001q1.518-.734 3.02-1.388c12.922-5.621 26.019-7.484 38.923-5.536a70.619 70.619 0 0 1 34.92 15.91l.117.112.03.158c.056.293 5.476 29.498-5.625 49.23-10.948 19.468-11.076 71.026-11.076 71.544v.663l-.637-.182c-17.032-4.866-82.825 3.648-83.488 3.735l-1.025.133Z"
            />
            <rect
              width={59}
              height={8}
              x={212.48}
              y={214.583}
              fill="#ccc"
              rx={4}
            />
            <rect
              width={59}
              height={8}
              x={212.48}
              y={301.583}
              fill="#ccc"
              rx={4}
            />
            <path
              fill="#ccc"
              d="M242.48 507.583a2 2 0 0 1-1.992-1.823l-25.496-287a2 2 0 1 1 3.984-.354l23.475 264.252L265.26 218.41a2 2 0 0 1 3.985.344l-24.771 287a2 2 0 0 1-1.99 1.828Z"
            />
            <path
              fill="#ffb8b8"
              d="M226.013 302.85a9.497 9.497 0 0 1 8.896-11.53l21.208-23.938 13.17 15.91-24.39 17.818a9.549 9.549 0 0 1-18.884 1.74Z"
            />
            <path
              className="fill-primary"
              d="m238.36 286.189 33.458-44.61-17.253-36.97 1.253-43.845 14.144-2.613.15.075a35.606 35.606 0 0 1 15.128 17.624c3.142 7.856 9.659 34.581 14.573 55.619a32.5 32.5 0 0 1-8.723 30.557l-41.043 41.043Z"
            />
            <path
              fill="#ccc"
              d="m98.11 495.178 45.773 11.02a3.922 3.922 0 0 0 4.555-2.125l39.32-104.542a3.221 3.221 0 0 0 .003-2.546 3.644 3.644 0 0 0-2.094-1.961l-34.415-13.143a4.139 4.139 0 0 0-3.374.187 3.511 3.511 0 0 0-1.84 2.252l-.002.005-24.29 92.138-.36.023c-.14.009-14.065.956-20.327 8.472a13.291 13.291 0 0 0-2.949 10.22Z"
            />
            <path
              fill="#3f3d56"
              d="M496 506.583a.997.997 0 0 1-1 1H1a1 1 0 0 1 0-2h494a.997.997 0 0 1 1 1Z"
            />
            <path
              fill="#b3b3b3"
              d="m131.05 438.563.21-1.989 41.733 4.42-.211 1.989zM126.801 454.875l.82-1.824 33.583 15.11-.82 1.824zM177.384 426.985l-39.583-13.11.821-1.824 39.583 13.11-.821 1.824zM181.384 417.985l-39.583-19.11.821-1.824 39.583 19.11-.821 1.824zM122.832 470.232l1.299-1.521 28.54 24.38-1.3 1.52zM114.207 477.62l1.821-.827 11.46 25.27-1.822.825z"
            />
            <path
              fill="#f2f2f2"
              d="M384.34 477.987V22.183c0-6.155.117-12.323 0-18.477-.005-.27 0-.539 0-.808 0-3.86-6-3.867-6 0v455.804c0 6.155-.117 12.323 0 18.477.005.27 0 .539 0 .808 0 3.86 6 3.867 6 0Z"
            />
            <path
              fill="#f2f2f2"
              d="M417.523 130.291h-72a6.508 6.508 0 0 1-6.5-6.5v-87.5a6.508 6.508 0 0 1 6.5-6.5h72a6.508 6.508 0 0 1 6.5 6.5v87.5a6.508 6.508 0 0 1-6.5 6.5Z"
            />
          </svg>
        </div>

        <p className="font-medium md:text-xl md:font-semibold">
          Something went wrong 🥲
        </p>

        <p className="text-red-500">{error?.message}</p>

        <div className="flex flex-wrap gap-4 justify-center">
          <button className="btn btn-sm" onClick={reset}>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className="w-5 h-5"
            >
              <path
                fillRule="evenodd"
                d="M15.312 11.424a5.5 5.5 0 01-9.201 2.466l-.312-.311h2.433a.75.75 0 000-1.5H3.989a.75.75 0 00-.75.75v4.242a.75.75 0 001.5 0v-2.43l.31.31a7 7 0 0011.712-3.138.75.75 0 00-1.449-.39zm1.23-3.723a.75.75 0 00.219-.53V2.929a.75.75 0 00-1.5 0V5.36l-.31-.31A7 7 0 003.239 8.188a.75.75 0 101.448.389A5.5 5.5 0 0113.89 6.11l.311.31h-2.432a.75.75 0 000 1.5h4.243a.75.75 0 00.53-.219z"
                clipRule="evenodd"
              />
            </svg>
            Refresh
          </button>

          <ButtonSupport />

          <Link href="/" className="btn btn-sm">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className="w-5 h-5"
            >
              <path
                fillRule="evenodd"
                d="M9.293 2.293a1 1 0 011.414 0l7 7A1 1 0 0117 11h-1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-3a1 1 0 00-1-1H9a1 1 0 00-1 1v3a1 1 0 01-1 1H5a1 1 0 01-1-1v-6H3a1 1 0 01-.707-1.707l7-7z"
                clipRule="evenodd"
              />
            </svg>
            Home
          </Link>
        </div>
      </div>
    </>
  );
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

html,
body {
  scroll-behavior: smooth !important;
}

/* It makes the HTML progress bar filling smooth when value change. */
progress::-webkit-progress-value {
  transition: 0.6s width ease-out;
}

@layer base {
  .btn-gradient {
    @apply !bg-gradient !bg-[length:300%_300%] hover:saturate-[1.2] shadow duration-100 !border-0 !border-transparent !bg-transparent animate-shimmer disabled:!bg-none disabled:!bg-gray-500/30  !text-white;
  }
  .btn {
    @apply !capitalize;
  }
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --color-1: 0 100% 63%;
    --color-2: 270 100% 63%;
    --color-3: 210 100% 63%;
    --color-4: 195 100% 63%;
    --color-5: 90 100% 63%;
    --swiper-theme-color: #fff !important;
    --swiper-pagination-bullet-inactive-color: #888 !important;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }

  html {
    scroll-behavior: smooth;
    -webkit-tap-highlight-color: transparent;
  }

  /* Improve mobile UX by preventing unwanted zooming on input fields */
  input, select, textarea {
    font-size: 16px;
  }

  /* Ensure proper overflow handling on mobile */
  body {
    overflow-x: hidden;
    width: 100%;
    position: relative;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@keyframes rainbow {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

.animate-rainbow {
  animation: rainbow 5s ease infinite;
}

.bg-gradient {
  background-image: linear-gradient(
    90deg,
    hsl(334deg 99% 64%) 0%,
    hsl(250deg 91% 60%) 17%,
    hsl(199deg 100% 50%) 34%,
    hsl(193deg 100% 50%) 50%,
    hsl(183deg 100% 50%) 66%,
    hsl(30deg 100% 50%) 83%,
    hsl(330deg 100% 50%) 100%
  );
}

/* Hide scrollbar for Chrome, Safari and Opera */
::-webkit-scrollbar {
  display: none;
}

/* Hide scrollbar for IE, Edge and Firefox */
body {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
}

/* Additional responsive utilities */
@media (max-width: 640px) {
  .container {
    padding-left: 1rem;
    padding-right: 1rem;
  }
}

/* Fix touch behavior on mobile */
@media (hover: none) {
  .hover\:scale-105:hover {
    transform: none;
  }
  
  .hover\:text-white:hover {
    color: inherit;
  }
}

.bg-grid-pattern {
  background-image: 
    linear-gradient(to right, rgba(255, 255, 255, 0.05) 1px, transparent 1px),
    linear-gradient(to bottom, rgba(255, 255, 255, 0.05) 1px, transparent 1px);
  background-size: 24px 24px;
}

================
File: app/layout.js
================
import { Inter } from "next/font/google";
import PlausibleProvider from "next-plausible";
import { getSEOTags } from "@/libs/seo";
import ClientLayout from "@/components/LayoutClient";
// import { SpeedInsights } from "@vercel/speed-insights/next";
// import { Analytics } from "@vercel/analytics/react";
import config from "@/config";
import "./globals.css";
import Script from "next/script";

const font = Inter({ subsets: ["latin"] });

export const viewport = {
  // Will use the primary color of your theme to show a nice theme color in the URL bar of supported browsers
  themeColor: config.colors.main,
  width: "device-width",
  initialScale: 1,
  minimumScale: 1,
  maximumScale: 5,
  userScalable: true,
  viewportFit: "cover",
};

// This adds default SEO tags to all pages in our app.
// You can override them in each page passing params to getSOTags() function.
export const metadata = getSEOTags();

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={font.className} suppressHydrationWarning>
      <head>
        <meta name="darkreader-lock" />
        {config.domainName && <PlausibleProvider domain={config.domainName} />}
        {/* Trackdesk tracker begin */}
        <script async src="//cdn.trackdesk.com/tracking.js"></script>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              (function(t,d,k){(t[k]=t[k]||[]).push(d);t[d]=t[d]||t[k].f||function(){(t[d].q=t[d].q||[]).push(arguments)}})(window,"trackdesk","TrackdeskObject");
              trackdesk('leadsprospectr', 'click');
            `,
          }}
        />
        {/* Trackdesk tracker end */}
      </head>
      <body data-theme={config.colors.theme} suppressHydrationWarning>
        {/* Trackdesk tracker script */}
        <Script src="//cdn.trackdesk.com/tracking.js" strategy="afterInteractive" />
        
        {/* ClientLayout contains all the client wrappers (Crisp chat support, toast messages, tooltips, etc.) */}
        <ClientLayout>
          {children}
          {/* <SpeedInsights /> */}
          {/* <Analytices /> */}
        </ClientLayout>
      </body>
    </html>
  );
}

================
File: app/not-found.js
================
import Link from "next/link";
import ButtonSupport from "@/components/ButtonSupport";

// Simple 404 page with a button to go home and a button to contact support
// Show a cute SVG with your primary color
export default function Custom404() {
  return (
    <section className="relative bg-base-100 text-base-content h-screen w-full flex flex-col justify-center gap-8 items-center p-10">
      <div className="p-6 bg-white rounded-xl">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="w-56 h-56"
          viewBox="0 0 860.13137 571.14799"
        >
          <path
            fill="#f2f2f2"
            d="M435.735 160.527c-7.669-12.684-16.757-26.228-30.99-30.37-16.481-4.796-33.412 4.732-47.774 14.135a1392.157 1392.157 0 0 0-123.893 91.283l.043.493 92.451-6.376c22.265-1.535 45.296-3.283 64.972-13.816 7.467-3.996 14.745-9.335 23.206-9.707 10.511-.463 19.677 6.879 26.88 14.549 42.607 45.37 54.937 114.754 102.738 154.616a1516.995 1516.995 0 0 0-107.633-214.807Z"
          />
          <path
            fill="#e4e4e4"
            d="M697.636 545.355c-4.711-5.95-6.637-7.343-11.284-13.347q-56.765-73.417-106.708-151.793-33.924-53.23-64.483-108.504-14.549-26.278-28.3-52.969-10.67-20.695-20.864-41.638a841.984 841.984 0 0 1-5.711-12.009c-4.428-9.442-8.774-18.93-13.44-28.244-5.317-10.616-11.789-21.745-21.552-28.877a29.405 29.405 0 0 0-15.319-5.895c-7.948-.513-15.282 2.769-22.176 6.353-50.438 26.301-97.659 59.276-140.37 96.798A730.778 730.778 0 0 0 133.39 331.82c-1.009 1.44-3.393.064-2.375-1.384q6.01-8.498 12.257-16.813a734.817 734.817 0 0 1 187.6-174.986q18.248-11.825 37.182-22.542c6.362-3.603 12.752-7.16 19.251-10.497 6.372-3.272 13.137-6.215 20.416-6.325 24.77-.385 37.595 27.667 46.405 46.542q4.153 8.911 8.406 17.767 16.075 33.62 33.388 66.628 10.684 20.379 21.837 40.52 34.707 62.717 73.778 122.896c34.506 53.143 68.737 100.089 108.046 149.785 1.082 1.375-.852 3.337-1.944 1.943ZM244.982 191.378c-1.44-1.604-2.87-3.209-4.318-4.813-11.422-12.632-23.679-25.118-39.364-32.36a57.11 57.11 0 0 0-23.927-5.547c-8.562.028-16.932 2.274-24.843 5.418-3.74 1.494-7.399 3.19-11.001 4.996-4.116 2.072-8.16 4.281-12.183 6.51q-11.332 6.27-22.369 13.09-21.96 13.572-42.545 29.216-10.671 8.113-20.902 16.758-9.516 8.03-18.646 16.492c-1.302 1.201-3.245-.742-1.944-1.943a441.255 441.255 0 0 1 4.85-4.446q6.875-6.216 13.971-12.193 12.94-10.918 26.549-20.993 21.162-15.676 43.782-29.226 11.304-6.765 22.919-12.962a198.735 198.735 0 0 1 7.095-3.621 113.116 113.116 0 0 1 16.868-6.867 60.006 60.006 0 0 1 25.476-2.502 66.327 66.327 0 0 1 23.505 8.131c15.401 8.608 27.346 21.92 38.97 34.91 1.174 1.32-.76 3.272-1.943 1.952Z"
          />
          <path
            fill="#e4e4e4"
            d="m560.542 322.285 36.905-13.498 18.323-6.702c5.968-2.183 11.921-4.667 18.09-6.23a28.539 28.539 0 0 1 16.374.208 37.738 37.738 0 0 1 12.77 7.917 103.64 103.64 0 0 1 10.475 11.186c3.99 4.795 7.92 9.64 11.868 14.467q24.442 29.891 48.563 60.042 24.121 30.15 47.92 60.556 23.857 30.48 47.386 61.216 2.882 3.765 5.76 7.534c1.059 1.388 3.449.02 2.374-1.388q-23.702-31.045-47.735-61.835-24.092-30.864-48.516-61.466-24.425-30.601-49.179-60.937-6.167-7.558-12.354-15.099c-3.48-4.24-6.92-8.527-10.737-12.474-7.005-7.245-15.757-13.648-26.234-13.822-6.16-.102-12.121 1.853-17.844 3.923-6.17 2.232-12.325 4.506-18.486 6.76l-37.163 13.592-9.29 3.398c-1.65.603-.937 3.262.73 2.652Z"
          />
          <path
            fill="#f2f2f2"
            d="M196.443 170.1c-18.754-9.639-42.771-7.75-60.005 4.291a855.847 855.847 0 0 1 97.37 22.726c-13.282-7.784-23.672-19.98-37.365-27.017ZM136.253 174.358l-3.61 2.935a53.444 53.444 0 0 1 3.795-2.902c-.062-.01-.123-.022-.185-.033ZM661.615 322.42c-3.633-4.422-7.56-9.052-12.994-10.849l-5.073.2a575.436 575.436 0 0 0 153.267 175.221l-135.2-164.572ZM346.15 285.94a37.481 37.481 0 0 0 14.93 20.96c2.82 1.92 6.157 3.761 7.122 7.034a8.379 8.379 0 0 1-.873 6.15 24.884 24.884 0 0 1-3.862 5.041l-.136.512c-6.999-4.147-13.657-9.393-17.523-16.551s-4.405-16.539.342-23.146M579.15 488.94a37.481 37.481 0 0 0 14.93 20.96c2.82 1.92 6.157 3.761 7.122 7.034a8.379 8.379 0 0 1-.873 6.15 24.884 24.884 0 0 1-3.862 5.041l-.136.512c-6.999-4.147-13.657-9.393-17.523-16.551s-4.405-16.539.342-23.146M114.15 474.94a37.481 37.481 0 0 0 14.93 20.96c2.82 1.92 6.157 3.761 7.122 7.034a8.379 8.379 0 0 1-.873 6.15 24.884 24.884 0 0 1-3.862 5.041l-.136.512c-6.999-4.147-13.657-9.393-17.523-16.551s-4.405-16.539.342-23.146"
          />
          <circle cx={649.249} cy={51} r={51} className="fill-primary" />
          <path
            fill="#f0f0f0"
            d="M741.284 11.87c-24.717-3.34-52.935 10.02-59.341 34.124a21.597 21.597 0 0 0-41.094 2.109l2.83 2.026a372.275 372.275 0 0 0 160.659-.726C787.145 31.334 766 15.21 741.284 11.87ZM635.284 79.87c-24.717-3.34-52.935 10.02-59.341 34.124a21.597 21.597 0 0 0-41.094 2.109l2.83 2.026a372.275 372.275 0 0 0 160.659-.726C681.145 99.334 660 83.21 635.284 79.87Z"
          />
          <path
            fill="#ccc"
            d="M851.011 92.728a.982.982 0 0 1-.302-.047C586.303 9.063 353.265 19.998 204.33 43.895a1294.017 1294.017 0 0 0-60.403 11.161 1196.246 1196.246 0 0 0-15.597 3.378 1023.104 1023.104 0 0 0-18.532 4.306q-3.873.917-7.595 1.849a972.21 972.21 0 0 0-11.66 2.957 930.173 930.173 0 0 0-13.797 3.671.442.442 0 0 1-.051.015v.001a926.363 926.363 0 0 0-15.323 4.325c-2.698.78-5.304 1.548-7.8 2.307-.278.077-.525.151-.776.227l-.536.164c-.31.094-.617.187-.924.275l-.02.006h.001l-.811.253c-.968.293-1.912.579-2.841.864C23.119 87.22 9.626 92.604 9.493 92.656a1 1 0 1 1-.744-1.856c.134-.053 13.693-5.463 38.327-13.058.932-.286 1.88-.572 2.85-.866l.754-.235c.026-.01.051-.017.078-.025.305-.087.61-.18.92-.273l.536-.164c.268-.08.532-.16.802-.235a593.8 593.8 0 0 1 7.797-2.307 932.235 932.235 0 0 1 15.334-4.328c.017-.006.033-.01.05-.014v-.001a941.379 941.379 0 0 1 13.844-3.685 993.766 993.766 0 0 1 11.68-2.962q3.738-.93 7.61-1.852a1026.011 1026.011 0 0 1 18.563-4.313c5.299-1.183 10.555-2.322 15.622-3.383a1295.424 1295.424 0 0 1 60.497-11.178c149.149-23.932 382.52-34.884 647.299 48.854a1 1 0 0 1-.3 1.953Z"
          />
          <path
            fill="#3f3d56"
            d="M262.989 419.84a6.73 6.73 0 0 0-1.7-2.67 6.43 6.43 0 0 0-.92-.71c-2.61-1.74-6.51-2.13-8.99 0a5.81 5.81 0 0 0-.69.71q-1.11 1.365-2.28 2.67a88.226 88.226 0 0 1-3.96 4.24c-.39.38-.78.77-1.18 1.15-.23.23-.46.45-.69.67-.88.84-1.78 1.65-2.69 2.45-.48.43-.96.85-1.45 1.26-.73.61-1.46 1.22-2.2 1.81-.07.05-.14.1-.21.16-.02.01-.03.03-.05.04-.01 0-.02 0-.03.02a.179.179 0 0 0-.07.05c-.22.15-.37.25-.48.34.04-.02.08-.05.12-.07-.18.14-.37.28-.55.42a92.853 92.853 0 0 1-5.37 3.69 99.21 99.21 0 0 1-14.22 7.55c-.33.13-.67.27-1.01.4a85.97 85.97 0 0 1-40.85 6.02q-2.13-.165-4.26-.45c-1.64-.24-3.27-.53-4.89-.86a97.932 97.932 0 0 1-18.02-5.44 118.652 118.652 0 0 1-20.66-12.12c-1-.71-2.01-1.42-3.02-2.11 1.15-2.82 2.28-5.64 3.38-8.48.55-1.37 1.08-2.74 1.6-4.12 4.09-10.63 7.93-21.36 11.61-32.13q5.58-16.365 10.53-32.92.51-1.68.99-3.36 2.595-8.745 4.98-17.53c.15-.57.31-1.13.45-1.7q.69-2.52 1.35-5.04c1-3.79-1.26-8.32-5.24-9.23a7.634 7.634 0 0 0-9.22 5.24c-.43 1.62-.86 3.23-1.3 4.85q-3.165 11.745-6.66 23.41l-1.02 3.36q-7.71 25.41-16.93 50.31-1.11 3.015-2.25 6.01c-.37.98-.74 1.96-1.12 2.94-.73 1.93-1.48 3.86-2.23 5.79-.43 1.13-.87 2.26-1.31 3.38-.29.71-.57 1.42-.85 2.12a41.81 41.81 0 0 0-8.81-2.12l-.48-.06a27.397 27.397 0 0 0-7.01.06 23.914 23.914 0 0 0-17.24 10.66c-4.77 7.51-4.71 18.25 1.98 24.63 6.89 6.57 17.32 6.52 25.43 2.41a28.351 28.351 0 0 0 10.52-9.86 50.57 50.57 0 0 0 2.74-4.65c.21.14.42.28.63.43.8.56 1.6 1.13 2.39 1.69a111.738 111.738 0 0 0 14.51 8.91 108.359 108.359 0 0 0 34.62 10.47c.27.03.53.07.8.1 1.33.17 2.67.3 4.01.41a103.782 103.782 0 0 0 55.58-11.36q2.175-1.125 4.31-2.36 3.315-1.92 6.48-4.08c1.15-.78 2.27-1.57 3.38-2.4a101.042 101.042 0 0 0 13.51-11.95q2.355-2.475 4.51-5.11a8.061 8.061 0 0 0 2.2-5.3 7.564 7.564 0 0 0-.5-2.64Zm-165.59 23.82c.21-.15.42-.31.62-.47-.06.15-.35.32-.62.47Zm3.21-3.23c-.23.26-.44.52-.67.78a23.366 23.366 0 0 1-2.25 2.2c-.11.1-.23.2-.35.29a.01.01 0 0 0-.01.01 3.804 3.804 0 0 0-.42.22q-.645.39-1.32.72a17.005 17.005 0 0 1-2.71.75 16.8 16.8 0 0 1-2.13.02h-.02a14.823 14.823 0 0 1-1.45-.4c-.24-.12-.47-.26-.7-.4-.09-.08-.17-.16-.22-.21a2.44 2.44 0 0 1-.27-.29.01.01 0 0 0-.01-.01c-.11-.2-.23-.4-.34-.6a.031.031 0 0 1-.01-.02c-.08-.25-.15-.51-.21-.77a12.51 12.51 0 0 1 .01-1.37 13.467 13.467 0 0 1 .54-1.88 11.068 11.068 0 0 1 .69-1.26c.02-.04.12-.2.23-.38.01-.01.01-.01.01-.02.15-.17.3-.35.46-.51.27-.3.56-.56.85-.83a18.022 18.022 0 0 1 1.75-1.01 19.48 19.48 0 0 1 2.93-.79 24.99 24.99 0 0 1 4.41.04 30.301 30.301 0 0 1 4.1 1.01 36.945 36.945 0 0 1-2.77 4.54c-.04.06-.08.12-.12.17Zm-11.12-3.29a2.18 2.18 0 0 1-.31.39 1.409 1.409 0 0 1 .31-.39Z"
          />
          <path
            fill="#3f3d56"
            d="m232.929 317.71-.27 9.42q-.285 10.455-.59 20.92-.315 11.775-.66 23.54-.165 6.075-.34 12.15-.465 16.365-.92 32.72c-.03 1.13-.07 2.25-.1 3.38l-.45 16.23q-.255 8.805-.5 17.61-.18 6.6-.37 13.21l-2.7 95.79a7.648 7.648 0 0 1-7.5 7.5 7.561 7.561 0 0 1-7.5-7.5q.75-26.94 1.52-53.88.675-24.36 1.37-48.72l.45-16.06q.345-12.09.68-24.18c.03-1.13.07-2.25.1-3.38.02-.99.05-1.97.08-2.96l1.32-46.96q.27-9.24.52-18.49l.6-21.08c.09-3.09.17-6.17.26-9.26a7.648 7.648 0 0 1 7.5-7.5 7.561 7.561 0 0 1 7.5 7.5ZM644.357 319.791a893.238 893.238 0 0 1-28.161 87.941c-3.007 7.947-6.083 15.877-9.372 23.712l.756-1.791a54.583 54.583 0 0 1-5.59 10.612q-.229.32-.466.636 1.166-1.49.443-.589c-.254.3-.505.602-.768.895a23.664 23.664 0 0 1-2.249 2.204q-.301.257-.612.504l.938-.73c-.109.258-.873.598-1.11.744a18.254 18.254 0 0 1-2.405 1.218l1.791-.756a19.086 19.086 0 0 1-4.23 1.16l1.993-.267a17.02 17.02 0 0 1-4.298.046l1.994.268a14.002 14.002 0 0 1-3.405-.917l1.791.756a12.012 12.012 0 0 1-1.678-.896c-.272-.177-1.106-.809-.015.024 1.133.866.145.075-.088-.155-.194-.192-.37-.4-.56-.595-.882-.905.997 1.556.397.498a18.182 18.182 0 0 1-.878-1.637l.756 1.792a11.925 11.925 0 0 1-.728-2.651l.268 1.993a13.651 13.651 0 0 1-.003-3.404l-.268 1.993a15.964 15.964 0 0 1 .995-3.68l-.756 1.792a16.73 16.73 0 0 1 1.178-2.299 6.73 6.73 0 0 1 .728-1.071c.05.016-1.268 1.513-.57.757.184-.198.355-.406.54-.602.296-.314.613-.6.925-.898 1.045-.994-1.461.966-.256.18a19.049 19.049 0 0 1 2.75-1.5l-1.792.756a20.311 20.311 0 0 1 4.995-1.34l-1.994.268a25.628 25.628 0 0 1 6.46.076l-1.993-.267a33.21 33.21 0 0 1 7.892 2.22l-1.792-.757c5.39 2.314 10.163 5.75 14.928 9.118a111.95 111.95 0 0 0 14.506 8.907 108.388 108.388 0 0 0 34.622 10.474 103.933 103.933 0 0 0 92.586-36.752 8.078 8.078 0 0 0 2.197-5.304 7.632 7.632 0 0 0-2.197-5.303c-2.752-2.526-7.95-3.239-10.607 0a95.636 95.636 0 0 1-8.106 8.727q-2.018 1.914-4.143 3.71-1.213 1.026-2.46 2.011c-.394.31-1.62 1.138.263-.197-.432.306-.845.64-1.27.954a99.269 99.269 0 0 1-20.333 11.565l1.792-.756a96.836 96.836 0 0 1-24.172 6.623l1.994-.268a97.643 97.643 0 0 1-25.753-.038l1.993.268a99.8 99.8 0 0 1-24.857-6.77l1.792.755a116.025 116.025 0 0 1-21.736-12.59 86.877 86.877 0 0 0-11.113-6.995 42.824 42.824 0 0 0-14.438-4.388c-9.44-1.111-19.057 2.565-24.247 10.72-4.775 7.505-4.714 18.244 1.974 24.625 6.888 6.573 17.319 6.517 25.436 2.406 7.817-3.96 12.513-12.186 15.815-19.942 7.43-17.455 14.01-35.314 20.14-53.263q9.096-26.637 16.498-53.813.917-3.366 1.807-6.74c1.001-3.788-1.261-8.32-5.238-9.225a7.633 7.633 0 0 0-9.226 5.238Z"
          />
          <path
            fill="#3f3d56"
            d="m719.19 317.71-2.7 95.793-2.686 95.294-1.518 53.883a7.565 7.565 0 0 0 7.5 7.5 7.65 7.65 0 0 0 7.5-7.5l2.7-95.793 2.685-95.294 1.518-53.883a7.565 7.565 0 0 0-7.5-7.5 7.65 7.65 0 0 0-7.5 7.5Z"
          />
          <path
            d="M459.591 535.935h2.33V429.893h54.328v-2.322H461.92v-44.745h41.956q-.923-1.173-1.899-2.317H461.92v-29.553a65.378 65.378 0 0 0-2.329-.943v30.496H413.94v-37.865c-.782.036-1.552.09-2.329.155v37.71h-36.42v-28.25a54.63 54.63 0 0 0-2.317 1.092v27.158h-30.615v2.317h30.615v44.744h-30.615v2.323h30.615v106.042h2.317V429.893a36.413 36.413 0 0 1 36.42 36.42v69.622h2.33V429.893h45.651Zm-84.4-108.365v-44.744h36.42v44.745Zm38.748 0v-44.744h.914a44.741 44.741 0 0 1 44.738 44.745Z"
            opacity={0.2}
          />
          <path
            fill="#3f3d56"
            d="M445.369 504.14a63.059 63.059 0 0 1-20.05 33.7c-.74.64-1.48 1.26-2.25 1.87q-2.805.255-5.57.52c-1.53.14-3.04.29-4.54.43l-.27.03-.19-1.64-.76-6.64a37.623 37.623 0 0 1-3.3-32.44c2.64-7.12 7.42-13.41 12.12-19.65 6.49-8.62 12.8-17.14 13.03-27.65a60.544 60.544 0 0 1 7.9 13.33 16.432 16.432 0 0 0-5.12 3.77c-.41.45-.82 1.08-.54 1.62.24.46.84.57 1.36.63l3.76.39c1 .11 2 .21 3 .32a63.99 63.99 0 0 1 2.45 12.18 61.189 61.189 0 0 1-1.03 19.23Z"
          />
          <path
            className="fill-primary"
            d="M478.569 477.93c-5.9 4.29-9.35 10.46-12.03 17.26a16.628 16.628 0 0 0-7.17 4.58c-.41.45-.82 1.08-.54 1.62.24.46.84.57 1.36.63l3.76.39c-2.68 8.04-5.14 16.36-9.88 23.15a36.99 36.99 0 0 1-12.03 10.91 38.492 38.492 0 0 1-4.02 1.99q-7.62.585-14.95 1.25-2.805.255-5.57.52c-1.53.14-3.04.29-4.54.43q-.015-.825 0-1.65a63.304 63.304 0 0 1 15.25-39.86c.45-.52.91-1.03 1.38-1.54a61.792 61.792 0 0 1 16.81-12.7 62.654 62.654 0 0 1 32.17-6.98Z"
          />
          <path
            className="fill-primary"
            d="m419.229 535.1-1.15 3.4-.58 1.73c-1.53.14-3.04.29-4.54.43l-.27.03-4.96.51c-.43-.5-.86-1.01-1.28-1.53a62.03 62.03 0 0 1 8.07-87.11c-1.32 6.91.22 13.53 2.75 20.1-.27.11-.53.22-.78.34a16.432 16.432 0 0 0-5.12 3.77c-.41.45-.82 1.08-.54 1.62.24.46.84.57 1.36.63l3.76.39c1 .11 2 .21 3 .32l1.41.15c.07.15.13.29.2.44 2.85 6.18 5.92 12.39 7.65 18.83a43.666 43.666 0 0 1 1.02 4.91 37.604 37.604 0 0 1-10 31.04Z"
          />
          <path
            fill="#3f3d56"
            d="M519.887 390.06c-8.609-16.792-21.946-30.92-37.632-41.303a114.237 114.237 0 0 0-52.563-18.38q-3.69-.335-7.399-.393c-2.921-.043-46.866 12.632-61.587 22.982a114.295 114.295 0 0 0-35.333 39.527 102.5 102.5 0 0 0-12.126 51.634 113.564 113.564 0 0 0 14.703 51.476 110.475 110.475 0 0 0 36.444 38.745c15.338 9.787 30.745 35.736 48.855 36.652 18.246.923 39.054-23.555 55.695-30.987a104.425 104.425 0 0 0 41.725-34.005 110.25 110.25 0 0 0 19.6-48.948c2.573-18.083 1.374-36.733-4.802-54.016a111.86 111.86 0 0 0-5.58-12.983c-1.78-3.506-6.996-4.796-10.261-2.691a7.68 7.68 0 0 0-2.691 10.261q1.568 3.088 2.915 6.278l-.756-1.792a101.15 101.15 0 0 1 6.877 25.539l-.268-1.994a109.229 109.229 0 0 1-.066 28.682l.267-1.994a109.734 109.734 0 0 1-7.554 27.675l.756-1.792a104.212 104.212 0 0 1-6.672 13.098q-1.923 3.186-4.08 6.222c-.632.888-1.283 1.761-1.94 2.631-.855 1.136 1.168-1.483.283-.37-.15.19-.3.38-.452.57q-.681.852-1.382 1.688a93.613 93.613 0 0 1-10.176 10.383q-1.366 1.193-2.778 2.331c-.469.379-.932.773-1.42 1.125.018-.013 1.579-1.2.655-.51-.29.216-.579.435-.87.651q-2.91 2.156-5.974 4.092a103.485 103.485 0 0 1-14.756 7.713l1.792-.756a109.215 109.215 0 0 1-27.597 7.552l1.994-.268a108.154 108.154 0 0 1-28.589.05l1.994.268a99.835 99.835 0 0 1-25.096-6.784l1.792.756a93.643 93.643 0 0 1-13.416-6.991q-3.174-2-6.184-4.248c-.286-.213-.57-.43-.855-.645-.915-.691.658.51.67.518a19.169 19.169 0 0 1-1.534-1.225q-1.454-1.184-2.862-2.422a101.99 101.99 0 0 1-10.493-10.71q-1.213-1.433-2.374-2.91c-.335-.426-.946-1.29.404.53-.177-.24-.362-.475-.541-.713q-.647-.858-1.276-1.728-2.203-3.048-4.188-6.246a109.29 109.29 0 0 1-7.805-15.108l.756 1.791a106.588 106.588 0 0 1-7.34-26.837l.267 1.994a97.866 97.866 0 0 1-.048-25.636l-.268 1.994a94.673 94.673 0 0 1 6.595-23.959l-.757 1.792a101.557 101.557 0 0 1 7.196-13.857q2.065-3.323 4.377-6.484.526-.719 1.063-1.428c.324-.428 1.215-1.494-.306.388.15-.184.293-.374.44-.56q1.269-1.608 2.6-3.165a107.402 107.402 0 0 1 10.883-11.02q1.474-1.293 2.994-2.53.691-.562 1.391-1.113c.187-.147.376-.29.562-.438-1.998 1.59-.555.432-.102.092q3.134-2.348 6.436-4.46a103.644 103.644 0 0 1 15.386-8.109l-1.791.756c7.76-3.258 42.14-10.949 48.394-10.11l-1.994-.267a106.225 106.225 0 0 1 26.72 7.382l-1.792-.756a110.313 110.313 0 0 1 12.6 6.33q3.044 1.783 5.968 3.762 1.383.936 2.738 1.915.677.489 1.346.989c.248.185.494.372.741.558 1.04.779-1.431-1.129-.342-.267a110.843 110.843 0 0 1 10.368 9.253q2.401 2.445 4.637 5.045 1.147 1.335 2.246 2.708c.365.455 1.605 2.1.085.084.372.493.747.983 1.114 1.48a97.977 97.977 0 0 1 8.392 13.537c1.793 3.498 6.987 4.802 10.261 2.691a7.677 7.677 0 0 0 2.69-10.261Z"
          />
          <path
            fill="#3f3d56"
            d="M432.497 512.456a3.78 3.78 0 0 1-2.74-6.552l.26-1.03-.103-.247c-3.48-8.297-25.685 14.834-26.645 22.632a30.029 30.029 0 0 0 .527 10.328 120.392 120.392 0 0 1-10.952-50.003 116.202 116.202 0 0 1 .72-12.963q.598-5.293 1.658-10.51a121.787 121.787 0 0 1 24.151-51.617c6.874.383 12.898-.664 13.48-13.986.103-2.37 1.86-4.421 2.248-6.756a30.72 30.72 0 0 1-1.98.183l-.623.032-.077.004a3.745 3.745 0 0 1-3.076-6.101l.85-1.046c.43-.538.872-1.065 1.302-1.603a1.865 1.865 0 0 0 .14-.161c.495-.613.99-1.216 1.485-1.829a10.83 10.83 0 0 0-3.55-3.432c-4.96-2.904-11.802-.893-15.384 3.593-3.593 4.486-4.271 10.78-3.023 16.385a43.398 43.398 0 0 0 6.003 13.383c-.27.344-.549.677-.818 1.022a122.574 122.574 0 0 0-12.793 20.268c1.016-7.939-11.412-36.608-16.218-42.68-5.773-7.295-17.611-4.112-18.628 5.135l-.03.268q1.072.604 2.097 1.283a5.127 5.127 0 0 1-2.067 9.33l-.104.016c-9.556 13.644 21.077 49.155 28.745 41.182a125.11 125.11 0 0 0-6.735 31.692 118.664 118.664 0 0 0 .086 19.16l-.032-.226c-1.704-13.882-30.931-34.522-39.466-32.803-4.917.99-9.76.765-9.013 5.725l.036.237a34.442 34.442 0 0 1 3.862 1.861q1.07.605 2.096 1.283a5.127 5.127 0 0 1-2.067 9.33l-.104.016-.215.033c-4.35 14.966 27.907 39.12 47.517 31.434h.011a125.075 125.075 0 0 0 8.402 24.528h30.015c.107-.333.204-.678.301-1.011a34.102 34.102 0 0 1-8.305-.495c2.227-2.732 4.454-5.486 6.68-8.219a1.861 1.861 0 0 0 .14-.161c1.13-1.399 2.27-2.787 3.4-4.185v-.002a49.952 49.952 0 0 0-1.463-12.725Zm-34.37-67.613.015-.022-.016.043Zm-6.65 59.932-.257-.58c.01-.42.01-.84 0-1.27 0-.119-.022-.237-.022-.355.097.742.183 1.484.29 2.227Z"
          />
          <circle cx={95.249} cy={439} r={11} fill="#3f3d56" />
          <circle cx={227.249} cy={559} r={11} fill="#3f3d56" />
          <circle cx={728.249} cy={559} r={11} fill="#3f3d56" />
          <circle cx={755.249} cy={419} r={11} fill="#3f3d56" />
          <circle cx={723.249} cy={317} r={11} fill="#3f3d56" />
          <path
            fill="#3f3d56"
            d="M264.249 419a10.949 10.949 0 1 1-.21-2.16 10.992 10.992 0 0 1 .21 2.16Z"
          />
          <circle cx={484.249} cy={349} r={11} fill="#3f3d56" />
          <path
            fill="#3f3d56"
            d="M375.249 349a10.949 10.949 0 1 1-.21-2.16 10.992 10.992 0 0 1 .21 2.16ZM233.249 317a10.949 10.949 0 1 1-.21-2.16 10.992 10.992 0 0 1 .21 2.16Z"
          />
          <circle cx={599.249} cy={443} r={11} fill="#3f3d56" />
          <circle cx={426.249} cy={338} r={16} fill="#3f3d56" />
          <path
            fill="#cacaca"
            d="m858.94 570.84-857.75.308a1.19 1.19 0 1 1 0-2.381l857.75-.308a1.19 1.19 0 0 1 0 2.382Z"
          />
        </svg>
      </div>
      <p className="text-lg md:text-xl font-semibold">
        This page doesn&apos;t exist 😅
      </p>

      <div className="flex flex-wrap gap-4 justify-center">
        <Link href="/" className="btn btn-sm">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            className="w-5 h-5"
          >
            <path
              fillRule="evenodd"
              d="M9.293 2.293a1 1 0 011.414 0l7 7A1 1 0 0117 11h-1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-3a1 1 0 00-1-1H9a1 1 0 00-1 1v3a1 1 0 01-1 1H5a1 1 0 01-1-1v-6H3a1 1 0 01-.707-1.707l7-7z"
              clipRule="evenodd"
            />
          </svg>
          Home
        </Link>

        <ButtonSupport />
      </div>
    </section>
  );
}

================
File: app/page.js
================
import Link from "next/link";
// import ButtonSignin from "@/components/ButtonSignin";
import { HeroSection } from "@/components/ui/hero-section-dark";
import FeaturesAccordion from "@/components/FeaturesAccordion";
import Footer from "@/components/Footer";
// import BetterIcon from "@/components/BetterIcon";
// import ButtonAccount from "@/components/ButtonAccount";
// import ButtonCheckout from "@/components/ButtonCheckout";
// import ButtonGradient from "@/components/ButtonGradient";
// import ButtonLead from "@/components/ButtonLead";
// import ButtonSupport from "@/components/ButtonSupport";
import FAQ from "@/components/FAQ";
// import FeaturesListicle from "@/components/FeaturesListicle";
import Header from "@/components/Header";
// import Modal from "@/components/Modal";
import Pricing from "@/components/Pricing";
import Problem from "@/components/Problem";
import Testimonial from "@/components/Testimonials1";
//import Testimonials11 from "@/components/Testimonials11";
// import Testimonial1Small from "@/components/Testimonial1Small";
import Testimonials3 from "@/components/Testimonials3";
import WithWithout from "@/components/WithWithout";
import Hero from "@/components/Hero";
import CTA from "@/components/CTA";
import ButtonLead from "@/components/ButtonLead";
import { Suspense } from "react";
import SectionBiography from "@/components/SectionBiography";
import ContactSection from "@/components/ContactSection";
import TrackdeskScriptWrapper from "@/components/TrackdeskScriptWrapper";

export default function Page() {
  return (
    <>
      <TrackdeskScriptWrapper />
      <Suspense fallback={<div className="w-full h-16"></div>}>
        <Header />
      </Suspense>
      <Hero />
      <main>
        <Problem />
        <Testimonials3 />

        {/* <ButtonAccount /> */}
        <FeaturesAccordion />
        {/* <BetterIcon /> */}
        {/* <ButtonCheckout /> */}
        {/* <ButtonGradient /> */}

        {/* <ButtonSupport /> */}
        {/* <CTA /> */}
        {/* <FeaturesListicle /> */}
        {/* <Problem /> */}
        <Testimonial />
        <Pricing />
        <SectionBiography />
        {/* <Testimonials11 /> */}
        {/* <Testimonial /> */}

        {/* <Testimonial1Small /> */}
        {/* <TestimonialsAvatars /> */}

        <FAQ />
        <ContactSection />
        <CTA />
        <Footer />
      </main>
    </>
  );
}

================
File: components/contexts/AnalyticsContext.js
================
"use client";

import { createContext, useContext, useState, useEffect } from "react";
import { createClient } from "@/utils/supabase/client";

// Create the Analytics context
const AnalyticsContext = createContext();

export function AnalyticsProvider({ children }) {
  const [analyticsData, setAnalyticsData] = useState({
    isLoading: true,
    data: null,
    error: null,
    lastFetched: null,
  });
  const supabase = createClient();

  // Fetch analytics data when user is authenticated and page is loaded
  useEffect(() => {
    const fetchAnalyticsData = async () => {
      try {
        // Get current user to ensure we're authenticated
        const { data: { session } } = await supabase.auth.getSession();
        
        if (session?.user) {
          // Only make the initial API call once per page refresh
          const cachedData = sessionStorage.getItem('analyticsData');
          
          if (cachedData) {
            // Use cached data if available
            setAnalyticsData(JSON.parse(cachedData));
          } else {
            // Make API call if no cached data
            setAnalyticsData(prev => ({ ...prev, isLoading: true }));
            
            const response = await fetch('/api/linkedin/analytics');
            if (response.ok) {
              const data = await response.json();
              const newAnalyticsData = {
                isLoading: false,
                data: data,
                error: null,
                lastFetched: new Date().toISOString(),
              };
              
              // Update state and cache
              setAnalyticsData(newAnalyticsData);
              sessionStorage.setItem('analyticsData', JSON.stringify(newAnalyticsData));
            } else {
              throw new Error('Failed to fetch analytics data');
            }
          }
        }
      } catch (error) {
        console.error("Failed to fetch analytics data:", error);
        setAnalyticsData({
          isLoading: false,
          data: null,
          error: error.message || 'An error occurred while fetching analytics data',
          lastFetched: new Date().toISOString(),
        });
      }
    };

    // Fetch data on auth state change
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event) => {
      if (event === 'SIGNED_IN') {
        fetchAnalyticsData();
      } else if (event === 'SIGNED_OUT') {
        // Clear analytics data on sign out
        setAnalyticsData({
          isLoading: true,
          data: null,
          error: null,
          lastFetched: null,
        });
        sessionStorage.removeItem('analyticsData');
      }
    });

    // Initial fetch
    fetchAnalyticsData();

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  // Function to refresh analytics data on demand
  const refreshAnalyticsData = async () => {
    try {
      setAnalyticsData(prevState => ({ ...prevState, isLoading: true }));
      
      const response = await fetch('/api/linkedin/analytics');
      if (response.ok) {
        const data = await response.json();
        const newAnalyticsData = {
          isLoading: false,
          data: data,
          error: null,
          lastFetched: new Date().toISOString(),
        };
        
        // Update state and cache
        setAnalyticsData(newAnalyticsData);
        sessionStorage.setItem('analyticsData', JSON.stringify(newAnalyticsData));
        return newAnalyticsData;
      } else {
        throw new Error('Failed to fetch analytics data');
      }
    } catch (error) {
      console.error("Failed to refresh analytics data:", error);
      const errorState = {
        isLoading: false,
        data: analyticsData.data, // Keep old data if available
        error: error.message || 'An error occurred while refreshing analytics data',
        lastFetched: analyticsData.lastFetched,
      };
      setAnalyticsData(errorState);
      return errorState;
    }
  };

  return (
    <AnalyticsContext.Provider value={{ 
      analyticsData, 
      refreshAnalyticsData 
    }}>
      {children}
    </AnalyticsContext.Provider>
  );
}

// Custom hook to use the Analytics context
export function useAnalytics() {
  const context = useContext(AnalyticsContext);
  if (context === undefined) {
    throw new Error("useAnalytics must be used within an AnalyticsProvider");
  }
  return context;
}

================
File: components/contexts/LinkedInContext.js
================
"use client";

import { createContext, useContext, useState, useEffect } from "react";
import { createClient } from "@/utils/supabase/client";

// Create the LinkedIn context
const LinkedInContext = createContext();

export function LinkedInProvider({ children }) {
  const [linkedInStatus, setLinkedInStatus] = useState({
    checked: false,
    connected: false,
    lastConnected: null,
    lastChecked: null,
  });
  const supabase = createClient();

  // Check LinkedIn status when user is authenticated
  useEffect(() => {
    const checkInitialStatus = async () => {
      try {
        // Get current user to ensure we're authenticated
        const { data: { session } } = await supabase.auth.getSession();
        
        if (session?.user) {
          // Only make the initial API call once per session
          const cachedStatus = sessionStorage.getItem('linkedInStatus');
          
          if (cachedStatus) {
            // Use cached data if available
            setLinkedInStatus(JSON.parse(cachedStatus));
          } else {
            // Make API call if no cached data
            const response = await fetch('/api/auths/linkedin/status');
            if (response.ok) {
              const data = await response.json();
              const newStatus = {
                checked: true,
                connected: data.connected,
                lastConnected: data.last_connected,
                lastChecked: new Date().toISOString(),
              };
              
              // Update state and cache
              setLinkedInStatus(newStatus);
              sessionStorage.setItem('linkedInStatus', JSON.stringify(newStatus));
            }
          }
        }
      } catch (error) {
        console.error("Failed to check LinkedIn status:", error);
      }
    };

    // Check status on auth state change
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event) => {
      if (event === 'SIGNED_IN') {
        checkInitialStatus();
      } else if (event === 'SIGNED_OUT') {
        // Clear status on sign out
        setLinkedInStatus({
          checked: false,
          connected: false,
          lastConnected: null,
          lastChecked: null,
        });
        sessionStorage.removeItem('linkedInStatus');
      }
    });

    // Initial check
    checkInitialStatus();

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  // Function to refresh LinkedIn status on demand
  const refreshLinkedInStatus = async () => {
    try {
      setLinkedInStatus(prevState => ({ ...prevState, checked: false }));
      
      const response = await fetch('/api/auths/linkedin/status');
      if (response.ok) {
        const data = await response.json();
        const newStatus = {
          checked: true,
          connected: data.connected,
          lastConnected: data.last_connected,
          lastChecked: new Date().toISOString(),
        };
        
        // Update state and cache
        setLinkedInStatus(newStatus);
        sessionStorage.setItem('linkedInStatus', JSON.stringify(newStatus));
        return newStatus;
      }
    } catch (error) {
      console.error("Failed to refresh LinkedIn status:", error);
      setLinkedInStatus(prevState => ({ ...prevState, checked: true }));
      throw error;
    }
  };

  return (
    <LinkedInContext.Provider value={{ 
      linkedInStatus, 
      refreshLinkedInStatus 
    }}>
      {children}
    </LinkedInContext.Provider>
  );
}

// Custom hook to use the LinkedIn context
export function useLinkedIn() {
  const context = useContext(LinkedInContext);
  if (context === undefined) {
    throw new Error("useLinkedIn must be used within a LinkedInProvider");
  }
  return context;
}

================
File: components/dashboard/DashboardShell.js
================
"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import {
  LayoutDashboard,
  Users,
  BarChart2,
  Settings,
  Menu,
  X,
  Zap,
} from "lucide-react";
import ButtonLinkedin from "@/components/ButtonLinkedin";
import { useLinkedIn } from "@/components/contexts/LinkedInContext";
import { AnalyticsProvider } from "@/components/contexts/AnalyticsContext";
import ButtonCheckout from "@/components/ButtonCheckout";
import config from "@/config";

const navigationLinks = [
  {
    href: "/dashboard",
    label: "Dashboard",
    icon: LayoutDashboard,
  },
  {
    href: "/dashboard/campaigns",
    label: "Campaigns",
    icon: Users,
  },
  {
    href: "/dashboard/analytics",
    label: "Analytics",
    icon: BarChart2,
  },
  {
    href: "/dashboard/settings",
    label: "Settings",
    icon: Settings,
  },
];

export default function DashboardShell({ children }) {
  const pathname = usePathname();
  const { linkedInStatus } = useLinkedIn();
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [subscriptionTier, setSubscriptionTier] = useState(null);

  // Get the pro plan
  const proPlan = config.stripe.plans[0];

  // Close sidebar when pathname changes (navigation occurs)
  useEffect(() => {
    setIsSidebarOpen(false);
  }, [pathname]);

  // Check if user is subscribed
  useEffect(() => {
    const checkSubscription = async () => {
      try {
        const res = await fetch("/api/users");
        if (!res.ok) return;
        const data = await res.json();
        setIsSubscribed(data.user?.isSubscribed || false);
        setSubscriptionTier(data.user?.subscriptionTier || null);
      } catch (error) {
        console.error("Error checking subscription:", error);
      }
    };
    checkSubscription();
  }, []);

  // Get navigation links based on subscription status
  const getNavigationLinks = () => {
    return navigationLinks;
  };

  const getPageTitle = () => {
    if (pathname === "/dashboard") return "Dashboard";
    if (pathname === "/dashboard/campaigns") return "Campaigns";
    if (pathname === "/dashboard/analytics") return "Analytics";
    if (pathname === "/dashboard/settings") return "Settings";
    return "";
  };

  return (
    <div
      className="flex min-h-screen bg-black text-white"
      suppressHydrationWarning
    >
      {/* Mobile Header */}
      <div className="md:hidden fixed top-0 left-0 right-0 h-16 z-30 bg-[#0F0F0F] border-b border-[#1A1A1A] flex items-center justify-between px-4">
        <Link href="/dashboard" className="flex items-center">
          <span className="text-white text-lg font-medium tracking-tight">
            Prospectr
          </span>
        </Link>
        <button
          onClick={() => setIsSidebarOpen(!isSidebarOpen)}
          className="p-2 rounded-md text-white hover:bg-[#1A1A1A] transition-colors"
          aria-label={isSidebarOpen ? "Close sidebar" : "Open sidebar"}
        >
          {isSidebarOpen ? (
            <X className="w-5 h-5" />
          ) : (
            <Menu className="w-5 h-5" />
          )}
        </button>
      </div>

      {/* Sidebar overlay for mobile */}
      {isSidebarOpen && (
        <div
          className="md:hidden fixed inset-0 bg-black/50 z-20"
          onClick={() => setIsSidebarOpen(false)}
          aria-hidden="true"
        />
      )}

      {/* Sidebar */}
      <aside
        className={`fixed md:sticky top-0 h-screen w-64 flex-shrink-0 bg-[#0F0F0F] border-r border-[#1A1A1A] flex flex-col z-30 transform transition-transform duration-200 ease-in-out ${
          isSidebarOpen ? "translate-x-0" : "-translate-x-full md:translate-x-0"
        }`}
      >
        <div className="flex flex-col h-full overflow-y-auto">
          <div className="p-6 md:pt-6 pt-20">
            <Link href="/dashboard" className="flex items-center">
              <span className="text-white text-lg font-medium tracking-tight">
                Prospectr
              </span>
            </Link>
          </div>

          {/* Subscription Status */}
          {isSubscribed && (
            <div className="px-4 mb-2">
              <div className="bg-zinc-800/50 rounded-md p-2 text-center">
                <span className="text-xs text-white/70">Current Plan:</span>
                <div className="text-sm font-medium text-white">Pro</div>
              </div>
            </div>
          )}

          <nav className="flex-1 px-4 py-2 space-y-1">
            {getNavigationLinks().map((item) => {
              const isActive = pathname === item.href;
              return (
                <Link
                  key={item.href}
                  href={item.href}
                  className={`flex items-center gap-3 px-3 py-2 rounded-md text-sm transition-colors ${
                    isActive
                      ? "bg-[#1A1A1A] text-white"
                      : "text-[#A1A1AA] hover:text-white hover:bg-[#1A1A1A]"
                  }`}
                >
                  <item.icon className="w-4 h-4" />
                  {item.label}
                </Link>
              );
            })}
          </nav>
        </div>
      </aside>

      {/* Main Content */}
      <main className="flex-1 flex flex-col min-w-0">
        <header className="hidden md:flex items-center justify-between h-16 px-6 border-b border-[#1A1A1A] sticky top-0 bg-black z-10">
          <div className="flex items-center gap-4">
            <h1 className="text-lg font-medium tracking-tight">
              {getPageTitle()}
            </h1>
          </div>
          <div className="flex items-center gap-3">
            {!linkedInStatus.connected &&
              pathname !== "/dashboard/settings" && (
                <div className="flex items-center gap-2">
                  <span className="text-sm text-amber-400">
                    LinkedIn not connected
                  </span>
                  <ButtonLinkedin
                    variant="outline"
                    text="Connect"
                    className="btn-sm rounded-md"
                  />
                </div>
              )}
            {isSubscribed && (
              <div className="flex items-center gap-2">
                <span className="text-sm text-white/70">Pro Plan</span>
              </div>
            )}
          </div>
        </header>

        {/* Mobile header title and actions */}
        <div className="md:hidden flex items-center justify-between px-4 py-3 border-b border-[#1A1A1A] mt-16">
          <h1 className="text-lg font-medium tracking-tight">
            {getPageTitle()}
          </h1>
          <div className="flex items-center gap-2">
            {!linkedInStatus.connected &&
              pathname !== "/dashboard/settings" && (
                <ButtonLinkedin
                  variant="outline"
                  text="Connect"
                  className="btn-xs rounded-md"
                />
              )}
          </div>
        </div>

        <div className="flex-1 overflow-auto py-4 md:py-6">
          <AnalyticsProvider>
            <div className="container px-4 sm:px-6 md:px-8 max-w-6xl mx-auto">
              {children}
            </div>
          </AnalyticsProvider>
        </div>
      </main>
    </div>
  );
}

================
File: components/ui/button.js
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-white disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-[#1A1A1A] text-white hover:bg-[#2A2A2A] border border-[#1A1A1A]",
        destructive:
          "bg-red-600 text-white hover:bg-red-700",
        outline:
          "bg-transparent text-white hover:bg-[#1A1A1A] border border-[#1A1A1A]",
        secondary:
          "bg-[#0F0F0F] text-white hover:bg-[#1A1A1A] border border-[#1A1A1A]",
        ghost: "text-[#A1A1AA] hover:text-white hover:bg-transparent",
        link: "text-white hover:text-[#A1A1AA] underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    (<Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props} />)
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/hero-section-dark.jsx
================
'use client';

import * as React from "react"
import { cn } from "@/lib/utils"
import { ChevronRight } from "lucide-react"



const RetroGrid = ({
  angle = 65,
  cellSize = 60,
  opacity = 0.5,
  lightLineColor = "#4B5563",
  darkLineColor = "#374151",
}) => {
  const gridStyles = {
    "--grid-angle": `${angle}deg`,
    "--cell-size": `${cellSize}px`,
    "--opacity": opacity,
    "--light-line": lightLineColor,
    "--dark-line": darkLineColor
  }

  return (
    (<div
      className={cn(
        "pointer-events-none absolute size-full overflow-hidden [perspective:200px]",
        `opacity-[var(--opacity)]`
      )}
      style={gridStyles}>
      <div className="absolute inset-0 [transform:rotateX(var(--grid-angle))]">
        <div
          className="animate-grid [background-image:linear-gradient(to_right,var(--light-line)_1px,transparent_0),linear-gradient(to_bottom,var(--light-line)_1px,transparent_0)] [background-repeat:repeat] [background-size:var(--cell-size)_var(--cell-size)] [height:300vh] [inset:0%_0px] [margin-left:-200%] [transform-origin:100%_0_0] [width:600vw] dark:[background-image:linear-gradient(to_right,var(--dark-line)_1px,transparent_0),linear-gradient(to_bottom,var(--dark-line)_1px,transparent_0)]" />
      </div>
      <div
        className="absolute inset-0 bg-gradient-to-t from-white via-white/80 to-transparent to-90% dark:from-gray-950 dark:via-gray-950/80" />
    </div>)
  );
}

const HeroSection = React.forwardRef((
  {
    className,
    title = "Build products for everyone",
    subtitle = {
      regular: "Designing your projects faster with ",
      gradient: "the largest figma UI kit.",
    },
    description = "Sed ut perspiciatis unde omnis iste natus voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae.",
    ctaText = "Browse courses",
    ctaHref = "#",
    gridOptions,
    ...props
  },
  ref,
) => {
  return (
    (<div className={cn("relative bg-white dark:bg-gray-950", className)} ref={ref} {...props}>
      <div
        className="absolute top-0 z-[0] h-screen w-screen bg-purple-950/5 dark:bg-purple-950/20 bg-[radial-gradient(ellipse_20%_80%_at_50%_-20%,rgba(120,119,198,0.15),rgba(255,255,255,0))] dark:bg-[radial-gradient(ellipse_20%_80%_at_50%_-20%,rgba(120,119,198,0.4),rgba(255,255,255,0))]" />
      <section className="relative max-w-full mx-auto z-1">
        <RetroGrid {...gridOptions} />
        <div className="max-w-screen-xl z-10 mx-auto px-4 py-28 gap-12 md:px-8">
          <div
            className="space-y-5 max-w-3xl leading-0 lg:leading-5 mx-auto text-center">
            <h1
              className="text-sm text-gray-600 dark:text-gray-200 group font-geist mx-auto px-5 py-2 bg-gradient-to-tr from-zinc-300/20 via-gray-400/20 to-transparent dark:from-zinc-300/10 dark:via-gray-400/10 border-[2px] border-black/5 dark:border-white/10 rounded-3xl w-fit">
              {title}
              <ChevronRight className="inline w-4 h-4 ml-2 group-hover:translate-x-1 duration-300" />
            </h1>
            <h2
              className="text-4xl tracking-tighter font-geist bg-clip-text text-transparent mx-auto md:text-6xl bg-[linear-gradient(180deg,_#000_0%,_rgba(0,_0,_0,_0.75)_100%)] dark:bg-[linear-gradient(180deg,_#FFF_0%,_rgba(255,_255,_255,_0.95)_100%)]">
              {subtitle.regular}
              <span
                className="text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-pink-500 dark:from-purple-400 dark:to-pink-300">
                {subtitle.gradient}
              </span>
            </h2>
            <p className="max-w-2xl mx-auto text-gray-600 dark:text-gray-200">
              {description}
            </p>
            <div
              className="items-center justify-center gap-x-3 space-y-3 sm:flex sm:space-y-0">
              <span className="relative inline-block overflow-hidden rounded-full p-[1.5px]">
                <span
                  className="absolute inset-[-1000%] animate-[spin_2s_linear_infinite] bg-[conic-gradient(from_90deg_at_50%_50%,#E2CBFF_0%,#393BB2_50%,#E2CBFF_100%)]" />
                <div
                  className="inline-flex h-full w-full cursor-pointer items-center justify-center rounded-full bg-white dark:bg-gray-950 text-xs font-medium backdrop-blur-3xl">
                  <a
                    href={ctaHref}
                    className="inline-flex rounded-full text-center group items-center w-full justify-center bg-gradient-to-tr from-zinc-300/20 via-purple-400/30 to-transparent dark:from-zinc-300/10 dark:via-purple-400/30 text-gray-900 dark:text-white border-input border-[1px] hover:bg-gradient-to-tr hover:from-zinc-300/30 hover:via-purple-400/40 hover:to-transparent dark:hover:from-zinc-300/20 dark:hover:via-purple-400/40 transition-all sm:w-auto py-4 px-10">
                    {ctaText}
                  </a>
                </div>
              </span>
            </div>
          </div>
        </div>
      </section>
    </div>)
  );
})
HeroSection.displayName = "HeroSection"

export { HeroSection }

================
File: components/ui/hero-video-dialog.jsx
================
"use client";
import { useState } from "react"
import { AnimatePresence, motion } from "framer-motion"
import { Play, XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

const animationVariants = {
  "from-bottom": {
    initial: { y: "100%", opacity: 0 },
    animate: { y: 0, opacity: 1 },
    exit: { y: "100%", opacity: 0 },
  },
  "from-center": {
    initial: { scale: 0.5, opacity: 0 },
    animate: { scale: 1, opacity: 1 },
    exit: { scale: 0.5, opacity: 0 },
  },
  "from-top": {
    initial: { y: "-100%", opacity: 0 },
    animate: { y: 0, opacity: 1 },
    exit: { y: "-100%", opacity: 0 },
  },
  "from-left": {
    initial: { x: "-100%", opacity: 0 },
    animate: { x: 0, opacity: 1 },
    exit: { x: "-100%", opacity: 0 },
  },
  "from-right": {
    initial: { x: "100%", opacity: 0 },
    animate: { x: 0, opacity: 1 },
    exit: { x: "100%", opacity: 0 },
  },
  fade: {
    initial: { opacity: 0 },
    animate: { opacity: 1 },
    exit: { opacity: 0 },
  },
  "top-in-bottom-out": {
    initial: { y: "-100%", opacity: 0 },
    animate: { y: 0, opacity: 1 },
    exit: { y: "100%", opacity: 0 },
  },
  "left-in-right-out": {
    initial: { x: "-100%", opacity: 0 },
    animate: { x: 0, opacity: 1 },
    exit: { x: "100%", opacity: 0 },
  },
}

export function HeroVideoDialog({
  animationStyle = "from-center",
  videoSrc,
  thumbnailSrc,
  thumbnailAlt = "Video thumbnail",
  className
}) {
  const [isVideoOpen, setIsVideoOpen] = useState(false)
  const selectedAnimation = animationVariants[animationStyle]

  return (
    (<div className={cn("relative", className)}>
      <div
        className="relative cursor-pointer group"
        onClick={() => setIsVideoOpen(true)}>
        <img
          src={thumbnailSrc}
          alt={thumbnailAlt}
          width={1920}
          height={1080}
          className="w-full transition-all duration-200 group-hover:brightness-[0.8] ease-out rounded-md shadow-lg border" />
        <div
          className="absolute inset-0 flex items-center justify-center group-hover:scale-100 scale-[0.9] transition-all duration-200 ease-out rounded-2xl">
          <div
            className="bg-primary/10 flex items-center justify-center rounded-full backdrop-blur-md size-28">
            <div
              className={`flex items-center justify-center bg-gradient-to-b from-primary/30 to-primary shadow-md rounded-full size-20 transition-all ease-out duration-200 relative group-hover:scale-[1.2] scale-100`}>
              <Play
                className="size-8 text-white fill-white group-hover:scale-105 scale-100 transition-transform duration-200 ease-out"
                style={{
                  filter:
                    "drop-shadow(0 4px 3px rgb(0 0 0 / 0.07)) drop-shadow(0 2px 2px rgb(0 0 0 / 0.06))",
                }} />
            </div>
          </div>
        </div>
      </div>
      <AnimatePresence>
        {isVideoOpen && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            onClick={() => setIsVideoOpen(false)}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-md">
            <motion.div
              {...selectedAnimation}
              transition={{ type: "spring", damping: 30, stiffness: 300 }}
              className="relative w-full max-w-4xl aspect-video mx-4 md:mx-0">
              <motion.button
                className="absolute -top-16 right-0 text-white text-xl bg-neutral-900/50 ring-1 backdrop-blur-md rounded-full p-2 dark:bg-neutral-100/50 dark:text-black">
                <XIcon className="size-5" />
              </motion.button>
              <div
                className="size-full border-2 border-white rounded-2xl overflow-hidden isolate z-[1] relative">
                <iframe
                  src={videoSrc}
                  className="size-full rounded-2xl"
                  allowFullScreen
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"></iframe>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>)
  );
}

================
File: components/ui/input.js
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    (<input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-[#1A1A1A] bg-[#0F0F0F] px-3 py-2 text-base text-white placeholder:text-[#A1A1AA] focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-white focus-visible:border-[#2A2A2A] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Input.displayName = "Input"

export { Input }

================
File: components/ui/pricing-creative.jsx
================
"use client";
import * as React from "react"
import { Button } from "@/components/ui/button";
import { Check, Pencil, Star, Sparkles } from "lucide-react";
import { cn } from "@/lib/utils";

const tiers = [
    {
        name: "Starter",
        icon: <Pencil className="w-6 h-6" />,
        price: 29,
        description: "Perfect for getting started",
        color: "amber",
        features: [
            "5 Projects",
            "Basic Templates",
            "Community Support",
            "2GB Storage",
        ],
    },
    {
        name: "Creator",
        icon: <Star className="w-6 h-6" />,
        price: 79,
        description: "Everything you need to grow",
        color: "blue",
        features: [
            "Unlimited Projects",
            "Premium Templates",
            "Priority Support",
            "20GB Storage",
        ],
        popular: true,
    },
    {
        name: "Studio",
        icon: <Sparkles className="w-6 h-6" />,
        price: 149,
        description: "For professional creators",
        color: "purple",
        features: [
            "Custom Branding",
            "All Templates",
            "Dedicated Support",
            "Unlimited Storage",
        ],
    },
];

function PricingCreative() {
    return (
        (<div className="w-full max-w-6xl mx-auto px-4">
            <div className="text-center space-y-6 mb-16">
                <div className="font-handwritten text-xl text-blue-500 rotate-[-1deg]">
                    Simple Pricing
                </div>
                <div className="relative">
                    <h2
                        className="text-4xl md:text-5xl font-bold font-handwritten text-zinc-900 dark:text-white rotate-[-1deg]">
                        Choose your creative journey
                        <div className="absolute -right-12 top-0 text-amber-500 rotate-12">
                            ✨
                        </div>
                        <div className="absolute -left-8 bottom-0 text-blue-500 -rotate-12">
                            ⭐️
                        </div>
                    </h2>
                    <div
                        className="absolute -bottom-4 left-1/2 -translate-x-1/2 w-44 h-3 bg-blue-500/20 
                        rotate-[-1deg] rounded-full blur-sm" />
                </div>
                <p
                    className="font-handwritten text-xl text-zinc-600 dark:text-zinc-400 rotate-[-1deg]">
                    No hidden fees, just pure creativity
                </p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                {tiers.map((tier, index) => (
                    <div
                        key={tier.name}
                        className={cn(
                            "relative group",
                            "transition-all duration-300",
                            index === 0 && "rotate-[-1deg]",
                            index === 1 && "rotate-[1deg]",
                            index === 2 && "rotate-[-2deg]"
                        )}>
                        <div
                            className={cn(
                                "absolute inset-0 bg-white dark:bg-zinc-900",
                                "border-2 border-zinc-900 dark:border-white",
                                "rounded-lg shadow-[4px_4px_0px_0px] shadow-zinc-900 dark:shadow-white",
                                "transition-all duration-300",
                                "group-hover:shadow-[8px_8px_0px_0px]",
                                "group-hover:translate-x-[-4px]",
                                "group-hover:translate-y-[-4px]"
                            )} />

                        <div className="relative p-6">
                            {tier.popular && (
                                <div
                                    className="absolute -top-2 -right-2 bg-amber-400 text-zinc-900 
                                    font-handwritten px-3 py-1 rounded-full rotate-12 text-sm border-2 border-zinc-900">
                                    Popular!
                                </div>
                            )}

                            <div className="mb-6">
                                <div
                                    className={cn(
                                        "w-12 h-12 rounded-full mb-4",
                                        "flex items-center justify-center",
                                        "border-2 border-zinc-900 dark:border-white",
                                        `text-${tier.color}-500`
                                    )}>
                                    {tier.icon}
                                </div>
                                <h3 className="font-handwritten text-2xl text-zinc-900 dark:text-white">
                                    {tier.name}
                                </h3>
                                <p className="font-handwritten text-zinc-600 dark:text-zinc-400">
                                    {tier.description}
                                </p>
                            </div>

                            {/* Price */}
                            <div className="mb-6 font-handwritten">
                                <span className="text-4xl font-bold text-zinc-900 dark:text-white">
                                    ${tier.price}
                                </span>
                                <span className="text-zinc-600 dark:text-zinc-400">
                                    /month
                                </span>
                            </div>

                            <div className="space-y-3 mb-6">
                                {tier.features.map((feature) => (
                                    <div key={feature} className="flex items-center gap-3">
                                        <div
                                            className="w-5 h-5 rounded-full border-2 border-zinc-900 
                                            dark:border-white flex items-center justify-center">
                                            <Check className="w-3 h-3" />
                                        </div>
                                        <span className="font-handwritten text-lg text-zinc-900 dark:text-white">
                                            {feature}
                                        </span>
                                    </div>
                                ))}
                            </div>

                            <Button
                                className={cn(
                                    "w-full h-12 font-handwritten text-lg relative",
                                    "border-2 border-zinc-900 dark:border-white",
                                    "transition-all duration-300",
                                    "shadow-[4px_4px_0px_0px] shadow-zinc-900 dark:shadow-white",
                                    "hover:shadow-[6px_6px_0px_0px]",
                                    "hover:translate-x-[-2px] hover:translate-y-[-2px]",
                                    tier.popular
                                        ? [
                                              "bg-amber-400 text-zinc-900",
                                              "hover:bg-amber-300",
                                              "active:bg-amber-400",
                                              "dark:hover:bg-amber-300",
                                              "dark:active:bg-amber-400",
                                          ]
                                        : [
                                              "bg-zinc-50 dark:bg-zinc-800",
                                              "text-zinc-900 dark:text-white",
                                              "hover:bg-white dark:hover:bg-zinc-700",
                                              "active:bg-zinc-50 dark:active:bg-zinc-800",
                                          ]
                                )}>
                                Get Started
                            </Button>
                        </div>
                    </div>
                ))}
            </div>
            <div className="absolute -z-10 inset-0 overflow-hidden">
                <div className="absolute top-40 left-20 text-4xl rotate-12">
                    ✎
                </div>
                <div className="absolute bottom-40 right-20 text-4xl -rotate-12">
                    ✏️
                </div>
            </div>
        </div>)
    );
}

export { PricingCreative }

================
File: components/ui/rainbow-button.jsx
================
import React from "react";

import { cn } from "@/lib/utils";

export function RainbowButton({
  children,
  className,
  ...props
}) {
  return (
    (<button
      className={cn(
        "group relative inline-flex h-11 animate-rainbow cursor-pointer items-center justify-center rounded-xl border-0 bg-[length:200%] px-8 py-2 font-medium text-primary-foreground transition-colors [background-clip:padding-box,border-box,border-box] [background-origin:border-box] [border:calc(0.08*1rem)_solid_transparent] focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
        // before styles
        "before:absolute before:bottom-[-20%] before:left-1/2 before:z-0 before:h-1/5 before:w-3/5 before:-translate-x-1/2 before:animate-rainbow before:bg-[linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] before:bg-[length:200%] before:[filter:blur(calc(0.8*1rem))]",
        // light mode colors
        "bg-[linear-gradient(#121213,#121213),linear-gradient(#121213_50%,rgba(18,18,19,0.6)_80%,rgba(18,18,19,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))]",
        // dark mode colors
        "dark:bg-[linear-gradient(#fff,#fff),linear-gradient(#fff_50%,rgba(255,255,255,0.6)_80%,rgba(0,0,0,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))]",
        className
      )}
      {...props}>
      {children}
    </button>)
  );
}

================
File: components/ui/select.js
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-[#1A1A1A] bg-[#0F0F0F] px-3 py-2 text-sm text-white placeholder:text-[#A1A1AA] focus:outline-none focus:ring-1 focus:ring-white disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}>
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 text-[#A1A1AA]" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-[#1A1A1A] bg-[#0F0F0F] text-white shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}>
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn("p-1", position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]")}>
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold text-[#A1A1AA]", className)}
    {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-[#1A1A1A] focus:text-white data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4 text-white" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-[#1A1A1A]", className)}
    {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: components/ui/sidebar.jsx
================
"use client";
import { cn } from "@/lib/utils";
import Link from "next/link";
import React, { useState, createContext, useContext } from "react";
import { AnimatePresence, motion } from "framer-motion";
import { Menu, X } from "lucide-react";

const SidebarContext = createContext(undefined);

export const useSidebar = () => {
  const context = useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider");
  }
  return context;
};

export const SidebarProvider = ({
  children,
  open: openProp,
  setOpen: setOpenProp,
  animate = true
}) => {
  const [openState, setOpenState] = useState(typeof window !== 'undefined' ? false : true);

  const open = openProp !== undefined ? openProp : openState;
  const setOpen = setOpenProp !== undefined ? setOpenProp : setOpenState;

  return (
    (<SidebarContext.Provider value={{ open, setOpen, animate }}>
      {children}
    </SidebarContext.Provider>)
  );
};

export const Sidebar = ({
  children,
  open,
  setOpen,
  animate
}) => {
  return (
    (<SidebarProvider open={open} setOpen={setOpen} animate={animate}>
      {children}
    </SidebarProvider>)
  );
};

export const SidebarBody = (props) => {
  return (<>
    <DesktopSidebar {...props} />
    <MobileSidebar {...(props)} />
  </>);
};

export const DesktopSidebar = ({
  className,
  children,
  ...props
}) => {
  const { open, setOpen, animate } = useSidebar();
  return (
    (<motion.div
      suppressHydrationWarning
      className={cn(
        "h-full px-4 py-4 hidden md:flex md:flex-col bg-white dark:bg-black w-[300px] flex-shrink-0 border-r border-neutral-200 dark:border-neutral-800",
        className
      )}
      animate={{
        width: animate ? (open ? "300px" : "60px") : "300px",
      }}
      onMouseEnter={() => setOpen(true)}
      onMouseLeave={() => setOpen(false)}
      {...props}>
      {children}
    </motion.div>)
  );
};

export const MobileSidebar = ({
  className,
  children,
  ...props
}) => {
  const { open, setOpen } = useSidebar();
  return (<>
    <div
      suppressHydrationWarning
      className={cn(
        "h-10 px-4 py-4 flex flex-row md:hidden items-center justify-between bg-white dark:bg-black w-full border-b border-neutral-200 dark:border-neutral-800"
      )}
      {...props}>
      <div className="flex justify-end z-20 w-full">
        <Menu
          className="text-neutral-800 dark:text-neutral-200 cursor-pointer"
          onClick={() => setOpen(!open)} />
      </div>
      <AnimatePresence>
        {open && (
          <motion.div
            initial={{ x: "-100%", opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            exit={{ x: "-100%", opacity: 0 }}
            transition={{
              duration: 0.3,
              ease: "easeInOut",
            }}
            className={cn(
              "fixed h-full w-full inset-0 bg-white dark:bg-black p-10 z-[100] flex flex-col justify-between",
              className
            )}>
            <div
              className="absolute right-10 top-10 z-50 text-neutral-800 dark:text-neutral-200 cursor-pointer"
              onClick={() => setOpen(!open)}>
              <X />
            </div>
            {children}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  </>);
};

export const SidebarLink = ({
  link,
  className,
  ...props
}) => {
  const { open, animate } = useSidebar();
  return (
    (<Link
      suppressHydrationWarning
      href={link.href}
      className={cn("flex items-center justify-start gap-2 group/sidebar py-2", className)}
      {...props}>
      {link.icon}
      <motion.span
        animate={{
          display: animate ? (open ? "inline-block" : "none") : "inline-block",
          opacity: animate ? (open ? 1 : 0) : 1,
        }}
        className="text-neutral-700 dark:text-neutral-200 text-sm group-hover/sidebar:translate-x-1 transition duration-150 whitespace-pre inline-block !p-0 !m-0">
        {link.label}
      </motion.span>
    </Link>)
  );
};

================
File: components/ui/splite.jsx
================
'use client';
import { Suspense, lazy, useEffect, useRef } from 'react'
const Spline = lazy(() => import('@splinetool/react-spline'))

export function Splite({
  scene,
  className,
  onLoad
}) {
  // Handle when Spline is loaded
  const handleSplineLoad = () => {
    if (onLoad && typeof onLoad === 'function') {
      onLoad();
    }
  };

  return (
    <div className={`relative w-full h-full ${className}`}>
      <Suspense
        fallback={
          <div className="w-full h-full flex items-center justify-center">
            <span className="loader"></span>
          </div>
        }>
        <Spline 
          scene={scene}
          onLoad={handleSplineLoad}
        />
      </Suspense>
    </div>
  );
}

================
File: components/ui/table.jsx
================
import * as React from "react";

import { cn } from "@/lib/utils";

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props} />
  </div>
));
Table.displayName = "Table";

const TableHeader = React.forwardRef(
  ({ className, ...props }, ref) => <thead ref={ref} className={cn(className)} {...props} />
);
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props} />
));
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t border-border bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props} />
));
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b border-border transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props} />
));
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-3 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:w-px [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-0.5",
      className
    )}
    {...props} />
));
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-3 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-0.5",
      className
    )}
    {...props} />
));
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props} />
));
TableCaption.displayName = "TableCaption";

export { Table, TableBody, TableCaption, TableCell, TableFooter, TableHead, TableHeader, TableRow };

================
File: components/ui/tabs.js
================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-[#0F0F0F] p-1 text-[#A1A1AA] border border-[#1A1A1A]",
      className
    )}
    {...props}
  />
))
TabsList.displayName = "TabsList"

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-white disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-[#1A1A1A] data-[state=active]:text-white",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = "TabsTrigger"

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-white",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = "TabsContent"

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components/BetterIcon.js
================
import React from "react";

// A better way to illustrate with icons
// Pass any SVG icon as children (recommended width/height : w-6 h-6)
// By default, it's using your primary color for styling
const BetterIcon = ({ children }) => {
  return (
    <div className="w-12 h-12 inline-flex items-center justify-center rounded-full bg-primary/20 text-primary">
      {children}
    </div>
  );
};

export default BetterIcon;

================
File: components/ButtonAccount.js
================
/* eslint-disable @next/next/no-img-element */
"use client";

import { useState, useEffect } from "react";
import { Popover, Transition } from "@headlessui/react";
import { createClient } from "@/utils/supabase/client";
import apiClient from "@/libs/api";

// A button to show user some account actions
//  1. Billing: open a Stripe Customer Portal to manage their billing (cancel subscription, update payment method, etc.).
//     You have to manually activate the Customer Portal in your Stripe Dashboard (https://dashboard.stripe.com/test/settings/billing/portal)
//     This is only available if the customer has a customerId (they made a purchase previously)
//  2. Logout: sign out and go back to homepage
// See more at https://shipfa.st/docs/components/buttonAccount
const ButtonAccount = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [user, setUser] = useState(null);

  useEffect(() => {
    const getUser = async () => {
      const supabase = createClient();
      const { data } = await supabase.auth.getUser();

      setUser(data.user);
    };

    getUser();
  }, []);

  const handleSignOut = async () => {
    const supabase = createClient();
    await supabase.auth.signOut();
    window.location.href = "/";
  };

  const handleBilling = async () => {
    setIsLoading(true);

    try {
      const { url } = await apiClient.post("/stripe/create-portal", {
        returnUrl: window.location.href,
      });

      window.location.href = url;
    } catch (e) {
      console.error(e);
    }

    setIsLoading(false);
  };

  return (
    <Popover className="relative z-10">
      {({ open }) => (
        <>
          <Popover.Button className="btn">
            {user?.user_metadata?.avatar_url ? (
              <img
                src={user?.user_metadata?.avatar_url}
                alt={"Profile picture"}
                className="w-6 h-6 rounded-full shrink-0"
                referrerPolicy="no-referrer"
                width={24}
                height={24}
              />
            ) : (
              <span className="w-8 h-8 bg-base-100 flex justify-center items-center rounded-full shrink-0 capitalize">
                {user?.email?.charAt(0)}
              </span>
            )}

            {user?.user_metadata?.name ||
              user?.email?.split("@")[0] ||
              "Account"}

            {isLoading ? (
              <span className="loading loading-spinner loading-xs"></span>
            ) : (
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                className={`w-5 h-5 duration-200 opacity-50 ${
                  open ? "transform rotate-180 " : ""
                }`}
              >
                <path
                  fillRule="evenodd"
                  d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
                  clipRule="evenodd"
                />
              </svg>
            )}
          </Popover.Button>
          <Transition
            enter="transition duration-100 ease-out"
            enterFrom="transform scale-95 opacity-0"
            enterTo="transform scale-100 opacity-100"
            leave="transition duration-75 ease-out"
            leaveFrom="transform scale-100 opacity-100"
            leaveTo="transform scale-95 opacity-0"
          >
            <Popover.Panel className="absolute left-0 z-10 mt-3 w-screen max-w-[16rem] transform">
              <div className="overflow-hidden rounded-xl shadow-xl ring-1 ring-base-content ring-opacity-5 bg-base-100 p-1">
                <div className="space-y-0.5 text-sm">
                  <button
                    className="flex items-center gap-2 hover:bg-base-300 duration-200 py-1.5 px-4 w-full rounded-lg font-medium"
                    onClick={handleBilling}
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      className="w-5 h-5"
                    >
                      <path
                        fillRule="evenodd"
                        d="M2.5 4A1.5 1.5 0 001 5.5V6h18v-.5A1.5 1.5 0 0017.5 4h-15zM19 8.5H1v6A1.5 1.5 0 002.5 16h15a1.5 1.5 0 001.5-1.5v-6zM3 13.25a.75.75 0 01.75-.75h1.5a.75.75 0 010 1.5h-1.5a.75.75 0 01-.75-.75zm4.75-.75a.75.75 0 000 1.5h3.5a.75.75 0 000-1.5h-3.5z"
                        clipRule="evenodd"
                      />
                    </svg>
                    Billing
                  </button>
                  <button
                    className="flex items-center gap-2 hover:bg-error/20 hover:text-error duration-200 py-1.5 px-4 w-full rounded-lg font-medium"
                    onClick={handleSignOut}
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      className="w-5 h-5"
                    >
                      <path
                        fillRule="evenodd"
                        d="M3 4.25A2.25 2.25 0 015.25 2h5.5A2.25 2.25 0 0113 4.25v2a.75.75 0 01-1.5 0v-2a.75.75 0 00-.75-.75h-5.5a.75.75 0 00-.75.75v11.5c0 .414.336.75.75.75h5.5a.75.75 0 00.75-.75v-2a.75.75 0 011.5 0v2A2.25 2.25 0 0110.75 18h-5.5A2.25 2.25 0 013 15.75V4.25z"
                        clipRule="evenodd"
                      />
                      <path
                        fillRule="evenodd"
                        d="M6 10a.75.75 0 01.75-.75h9.546l-1.048-.943a.75.75 0 111.004-1.114l2.5 2.25a.75.75 0 010 1.114l-2.5 2.25a.75.75 0 11-1.004-1.114l1.048-.943H6.75A.75.75 0 016 10z"
                        clipRule="evenodd"
                      />
                    </svg>
                    Logout
                  </button>
                </div>
              </div>
            </Popover.Panel>
          </Transition>
        </>
      )}
    </Popover>
  );
};

export default ButtonAccount;

================
File: components/ButtonCheckout.js
================
"use client";

import { useEffect, useState } from "react";
import { createCheckoutSession } from "@/utils/stripe-client";
import config from "@/config";
import Link from "next/link";
import { useRouter } from "next/navigation";

// This component is used to create Stripe Checkout Sessions
// If user is not logged in, it redirects to signup page first
// It calls the /api/stripe/create-checkout route with the priceId, successUrl and cancelUrl
// By default, it doesn't force users to be authenticated. But if they are, it will prefill the Checkout data with their email and/or credit card. You can change that in the API route
// You can also change the mode to "subscription" if you want to create a subscription instead of a one-time payment
const ButtonCheckout = ({
  priceId,
  productLink,
  mode = "payment",
  children,
  className,
  disabled,
  theme = "blue", // blue, red, or default
  showIcon = false, // Changed default to false to remove the lightning bolt
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [user, setUser] = useState(null);
  const [isHovered, setIsHovered] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const getUser = async () => {
      try {
        const res = await fetch("/api/users");
        if (!res.ok) return;
        const data = await res.json();
        setUser(data.user);
      } catch (error) {
        console.error("Error fetching user:", error);
      }
    };
    getUser();
  }, []);

  const handlePayment = async () => {
    try {
      setIsLoading(true);

      // If there's a direct product link, use it
      if (productLink) {
        window.location.href = productLink;
        return;
      }

      // If user is not logged in, save plan info and redirect to signup
      if (!user) {
        // Save selected plan to localStorage
        localStorage.setItem("selectedPlanId", priceId);

        // Determine the current URL to return to after signup
        const returnUrl = window.location.pathname + window.location.search;
        localStorage.setItem("checkoutReturnUrl", returnUrl);

        // Redirect to signup page
        router.push("/signup?checkout=pending");
        return;
      }

      // Otherwise create a checkout session
      const result = await createCheckoutSession({
        priceId,
        successUrl: `${window.location.origin}/dashboard?checkout=success`,
        cancelUrl: `${window.location.origin}${window.location.pathname}?checkout=cancel`,
      });

      // Check if we need to redirect to signup
      if (result.redirectToSignup) {
        router.push(result.url);
        return;
      }

      // Otherwise redirect to Stripe checkout
      window.location.href = result.url;
    } catch (error) {
      console.error("Error creating checkout session:", error);
    } finally {
      setIsLoading(false);
    }
  };

  // Define color classes based on theme
  const getIconColorClass = () => {
    switch (theme) {
      case "blue":
        return "fill-blue-500 group-hover:fill-blue-400";
      case "red":
        return "fill-red-500 group-hover:fill-red-400";
      default:
        return "fill-primary-content";
    }
  };

  return (
    <button
      className={`${
        className || "btn btn-primary btn-block"
      } group transition-all duration-200 flex items-center justify-center relative overflow-hidden`}
      onClick={handlePayment}
      disabled={isLoading || disabled}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {isLoading ? (
        <span className="loading loading-spinner loading-sm"></span>
      ) : (
        <div className="flex items-center justify-center gap-2">
          {showIcon && (
            <svg
              className={`w-5 h-5 ${getIconColorClass()} transform ${
                isHovered ? "scale-110 -rotate-3" : "scale-100"
              } transition-all duration-300`}
              viewBox="0 0 375 509"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M249.685 14.125C249.685 11.5046 248.913 8.94218 247.465 6.75675C246.017 4.57133 243.957 2.85951 241.542 1.83453C239.126 0.809546 236.463 0.516683 233.882 0.992419C231.301 1.46815 228.917 2.69147 227.028 4.50999L179.466 50.1812C108.664 118.158 48.8369 196.677 2.11373 282.944C0.964078 284.975 0.367442 287.272 0.38324 289.605C0.399039 291.938 1.02672 294.226 2.20377 296.241C3.38082 298.257 5.06616 299.929 7.09195 301.092C9.11775 302.255 11.4133 302.867 13.75 302.869H129.042V494.875C129.039 497.466 129.791 500.001 131.205 502.173C132.62 504.345 134.637 506.059 137.01 507.106C139.383 508.153 142.01 508.489 144.571 508.072C147.131 507.655 149.516 506.503 151.432 504.757L172.698 485.394C247.19 417.643 310.406 338.487 359.975 250.894L373.136 227.658C374.292 225.626 374.894 223.327 374.882 220.99C374.87 218.653 374.243 216.361 373.065 214.341C371.887 212.322 370.199 210.646 368.17 209.482C366.141 208.318 363.841 207.706 361.5 207.707H249.685V14.125Z" />
            </svg>
          )}
          <span
            className={`font-medium ${
              isHovered ? "tracking-wide" : "tracking-normal"
            } transition-all duration-300`}
          >
            {children || "Get Started"}
          </span>
        </div>
      )}

      {/* Background animation on hover */}
      {!disabled && !isLoading && (
        <span
          className={`absolute bottom-0 left-0 w-full h-0.5 ${
            theme === "red" ? "bg-red-500" : "bg-blue-500"
          } transform scale-x-0 ${
            isHovered ? "scale-x-100" : ""
          } transition-transform origin-center duration-300`}
        ></span>
      )}
    </button>
  );
};

export default ButtonCheckout;

================
File: components/ButtonGradient.js
================
"use client";

const ButtonGradient = ({ title = "Gradient Button", onClick = () => {} }) => {
  return (
    <button className="btn btn-gradient animate-shimmer" onClick={onClick}>
      {title}
    </button>
  );
};

export default ButtonGradient;

================
File: components/ButtonLead.js
================
"use client";

import { useState, useRef } from "react";
import { toast } from "react-hot-toast";
import apiClient from "@/libs/api";

// This component is used to collect the emails from the landing page
// You'd use this if your product isn't ready yet or you want to collect leads
// For instance: A popup to send a freebie, joining a waitlist, etc.
// It calls the /api/lead/route.js route and store a Lead document in the database
const ButtonLead = ({ extraStyle }) => {
  const inputRef = useRef(null);
  const [email, setEmail] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isDisabled, setIsDisabled] = useState(false);

  const handleSubmit = async (e) => {
    e?.preventDefault();

    setIsLoading(true);
    try {
      await apiClient.post("/lead", { email });

      toast.success("Thanks for joining the waitlist!");

      // just remove the focus on the input
      inputRef.current.blur();
      setEmail("");
      setIsDisabled(true);
    } catch (error) {
      console.log(error);
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <form
      className={`w-full max-w-xs space-y-3 ${extraStyle ? extraStyle : ""}`}
      onSubmit={handleSubmit}
    >
      <input
        required
        type="email"
        value={email}
        ref={inputRef}
        autoComplete="email"
        placeholder="tom@cruise.com"
        className="input input-bordered w-full placeholder:opacity-60"
        onChange={(e) => setEmail(e.target.value)}
      />

      <button
        className="btn btn-primary btn-block"
        type="submit"
        disabled={isDisabled}
      >
        Join waitlist
        {isLoading ? (
          <span className="loading loading-spinner loading-xs"></span>
        ) : (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            className="w-5 h-5"
          >
            <path
              fillRule="evenodd"
              d="M5 10a.75.75 0 01.75-.75h6.638L10.23 7.29a.75.75 0 111.04-1.08l3.5 3.25a.75.75 0 010 1.08l-3.5 3.25a.75.75 0 11-1.04-1.08l2.158-1.96H5.75A.75.75 0 015 10z"
              clipRule="evenodd"
            />
          </svg>
        )}
      </button>
    </form>
  );
};

export default ButtonLead;

================
File: components/ButtonLinkedin.js
================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useLinkedIn } from "@/components/contexts/LinkedInContext";
import { useQuery } from "@tanstack/react-query";

const ButtonLinkedin = ({
  className = "",
  variant = "default",
  text = "Connect LinkedIn",
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();
  const { linkedInStatus, refreshLinkedInStatus } = useLinkedIn();

  // Fetch user's LinkedIn account information
  const { data: linkedInAccount, isLoading: isLoadingAccount } = useQuery({
    queryKey: ["linkedInAccount"],
    queryFn: async () => {
      const response = await fetch("/api/auths/linkedin/account");
      if (!response.ok) {
        throw new Error("Failed to fetch LinkedIn account");
      }
      return response.json();
    },
    // Only fetch if we know the user is connected according to context
    enabled: !!linkedInStatus.connected,
  });

  const handleConnectLinkedin = async () => {
    try {
      setIsLoading(true);

      // If user already has a LinkedIn account connected, use reconnect API
      if (linkedInStatus.connected && linkedInAccount?.unipileAccountId) {
        const response = await fetch(
          `/api/auths/linkedin/reconnect?account_id=${linkedInAccount.unipileAccountId}`
        );

        if (response.ok) {
          // Show success message or notification
          alert("Reconnection email sent! Please check your inbox.");
        } else {
          const errorData = await response.json();
          // Handle subscription required error
          if (response.status === 402 && errorData.checkoutUrl) {
            window.location.href = errorData.checkoutUrl;
            return;
          }
          throw new Error(
            errorData.error || "Failed to reconnect LinkedIn account"
          );
        }
      } else {
        // For new connections, first check if subscription is required
        const checkResponse = await fetch(
          "/api/auths/linkedin/check-subscription"
        );
        const checkData = await checkResponse.json();

        if (checkResponse.status === 402 && checkData.checkoutUrl) {
          window.location.href = checkData.checkoutUrl;
          return;
        }

        // If subscription check passes, redirect to LinkedIn connect API
        window.location.href = "/api/auths/linkedin/connect";
      }
    } catch (error) {
      console.error("LinkedIn connection error:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleRefreshStatus = async (e) => {
    // If the user is already connected, they might want to refresh the status
    // rather than reconnect, so we'll prevent the default action
    if (linkedInStatus.connected) {
      e.preventDefault();
      e.stopPropagation();

      try {
        setIsLoading(true);
        await refreshLinkedInStatus();
      } catch (error) {
        console.error("Failed to refresh LinkedIn status:", error);
      } finally {
        setIsLoading(false);
      }
    }
  };

  // Determine button class based on variant
  let buttonStyle = "btn";
  if (className) buttonStyle += ` ${className}`;

  if (variant === "outline") {
    buttonStyle +=
      " btn-outline bg-[#1A1A1A] hover:bg-[#2A2A2A] text-[#C9E5FF] border-[#2A2A2A]";
  } else if (variant === "ghost") {
    buttonStyle += " btn-ghost";
  } else if (variant === "link") {
    buttonStyle += " btn-link";
  } else {
    buttonStyle += " btn-primary";
  }

  // Determine button text based on connection status
  const buttonText = linkedInStatus.connected ? "Reconnect LinkedIn" : text;

  return (
    <button
      className={buttonStyle}
      onClick={handleConnectLinkedin}
      onDoubleClick={handleRefreshStatus}
      disabled={isLoading || isLoadingAccount}
      data-tooltip-id="tooltip"
      data-tooltip-content={
        linkedInStatus.connected
          ? `LinkedIn account connected${
              linkedInStatus.lastChecked
                ? ` (Last checked: ${new Date(
                    linkedInStatus.lastChecked
                  ).toLocaleString()})`
                : ""
            }`
          : "Connect your LinkedIn account"
      }
    >
      {isLoading || isLoadingAccount ? (
        <span className="loading loading-spinner loading-xs"></span>
      ) : (
        <>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            className="w-5 h-5 mr-1"
          >
            <path d="M20.5 2h-17A1.5 1.5 0 002 3.5v17A1.5 1.5 0 003.5 22h17a1.5 1.5 0 001.5-1.5v-17A1.5 1.5 0 0020.5 2zM8 19H5v-9h3zM6.5 8.25A1.75 1.75 0 118.3 6.5a1.78 1.78 0 01-1.8 1.75zM19 19h-3v-4.74c0-1.42-.6-1.93-1.38-1.93A1.74 1.74 0 0013 14.19a.66.66 0 000 .14V19h-3v-9h2.9v1.3a3.11 3.11 0 012.7-1.4c1.55 0 3.36.86 3.36 3.66z"></path>
          </svg>
          {buttonText}
        </>
      )}
    </button>
  );
};

export default ButtonLinkedin;

================
File: components/ButtonPopover.js
================
"use client";

import { Popover, Transition } from "@headlessui/react";

const ButtonPopover = () => {
  return (
    <Popover className="relative z-10">
      {({ open }) => (
        <>
          <Popover.Button className="btn">
            Popover Button
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className={`w-5 h-5 duration-200 ${
                open ? "transform rotate-180 " : ""
              }`}
            >
              <path
                fillRule="evenodd"
                d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
                clipRule="evenodd"
              />
            </svg>
          </Popover.Button>
          <Transition
            enter="transition duration-100 ease-out"
            enterFrom="transform scale-95 opacity-0"
            enterTo="transform scale-100 opacity-100"
            leave="transition duration-75 ease-out"
            leaveFrom="transform scale-100 opacity-100"
            leaveTo="transform scale-95 opacity-0"
          >
            <Popover.Panel className="absolute left-0 z-10 mt-3 w-screen max-w-full sm:max-w-sm lg:max-w-2xl transform">
              <div className="overflow-hidden rounded-lg shadow-lg ring-1 ring-base-content ring-opacity-5">
                <div className="relative grid gap-4 bg-base-100 p-4 lg:grid-cols-2">
                  <div className="text-sm flex items-center gap-3 p-2 cursor-pointer hover:bg-base-200 rounded-lg duration-200">
                    <span className="flex items-center justify-center w-12 h-12 shrink-0 rounded-lg bg-orange-500/20">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        strokeWidth={1.5}
                        stroke="currentColor"
                        className="w-6 h-6 stroke-orange-600"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M15.362 5.214A8.252 8.252 0 0112 21 8.25 8.25 0 016.038 7.048 8.287 8.287 0 009 9.6a8.983 8.983 0 013.361-6.867 8.21 8.21 0 003 2.48z"
                        />
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M12 18a3.75 3.75 0 00.495-7.467 5.99 5.99 0 00-1.925 3.546 5.974 5.974 0 01-2.133-1A3.75 3.75 0 0012 18z"
                        />
                      </svg>
                    </span>
                    <div className="">
                      <p className="font-bold">Get Started</p>
                      <p className="opacity-70">
                        Loreum ipseum de la madre de papa
                      </p>
                    </div>
                  </div>
                  <div className="text-sm flex items-center gap-3 p-2 cursor-pointer hover:bg-base-200 rounded-lg duration-200">
                    <span className="flex items-center justify-center w-12 h-12 shrink-0 rounded-lg bg-yellow-500/20">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        strokeWidth={1.5}
                        stroke="currentColor"
                        className="w-6 h-6 stroke-yellow-600"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M21 11.25v8.25a1.5 1.5 0 01-1.5 1.5H5.25a1.5 1.5 0 01-1.5-1.5v-8.25M12 4.875A2.625 2.625 0 109.375 7.5H12m0-2.625V7.5m0-2.625A2.625 2.625 0 1114.625 7.5H12m0 0V21m-8.625-9.75h18c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125h-18c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z"
                        />
                      </svg>
                    </span>
                    <div className="">
                      <p className="font-bold">Rewards</p>
                      <p className="opacity-70">
                        Loreum ipseum de el papi de la mama
                      </p>
                    </div>
                  </div>
                  <div className="text-sm flex items-center gap-3 p-2 cursor-pointer hover:bg-base-200 rounded-lg duration-200">
                    <span className="flex items-center justify-center w-12 h-12 shrink-0 rounded-lg bg-green-500/20">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        strokeWidth={1.5}
                        stroke="currentColor"
                        className="w-6 h-6 stroke-green-600"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M4.26 10.147a60.436 60.436 0 00-.491 6.347A48.627 48.627 0 0112 20.904a48.627 48.627 0 018.232-4.41 60.46 60.46 0 00-.491-6.347m-15.482 0a50.57 50.57 0 00-2.658-.813A59.905 59.905 0 0112 3.493a59.902 59.902 0 0110.399 5.84c-.896.248-1.783.52-2.658.814m-15.482 0A50.697 50.697 0 0112 13.489a50.702 50.702 0 017.74-3.342M6.75 15a.75.75 0 100-1.5.75.75 0 000 1.5zm0 0v-3.675A55.378 55.378 0 0112 8.443m-7.007 11.55A5.981 5.981 0 006.75 15.75v-1.5"
                        />
                      </svg>
                    </span>
                    <div className="">
                      <p className="font-bold">Academics</p>
                      <p className="opacity-70">
                        Loreum ipseum de la madre de papa
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </Popover.Panel>
          </Transition>
        </>
      )}
    </Popover>
  );
};

export default ButtonPopover;

================
File: components/ButtonSignin.js
================
/* eslint-disable @next/next/no-img-element */
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { createClient } from "@/utils/supabase/client";
import config from "@/config";

// A simple button to sign in with our providers (Google & Magic Links).
// It automatically redirects user to callbackUrl (config.auth.callbackUrl) after login, which is normally a private page for users to manage their accounts.
// If the user is already logged in, it will show their profile picture & redirect them to callbackUrl immediately.
const ButtonSignin = ({ text = "Log in ", extraStyle }) => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const getUser = async () => {
      const supabase = createClient();
      const { data } = await supabase.auth.getUser();

      setUser(data.user);
    };

    getUser();
  }, []);

  if (user) {
    return (
      <Link
        href={config.auth.callbackUrl}
        className={`bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-full ${extraStyle} no-underline flex items-center gap-2 transition-colors`}
      >
        {user?.user_metadata?.avatar_url ? (
          <img
            src={user?.user_metadata?.avatar_url}
            alt={user?.user_metadata?.name || "Account"}
            className="w-6 h-6 rounded-full shrink-0"
            referrerPolicy="no-referrer"
            width={24}
            height={24}
          />
        ) : (
          <span className="w-6 h-6 bg-zinc-800 flex justify-center items-center rounded-full shrink-0 text-white">
            {user?.user_metadata?.name?.charAt(0) || user?.email?.charAt(0)}
          </span>
        )}
        {user?.user_metadata?.name || user?.email || "Account"}
      </Link>
    );
  }

  return (
    <Link
      className={`bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-full flex items-center gap-2 transition-colors ${extraStyle}`}
      href={config.auth.loginUrl}
    >
      {text}
    </Link>
  );
};

export default ButtonSignin;

================
File: components/ButtonSupport.js
================
"use client";

import { Crisp } from "crisp-sdk-web";
import config from "../config";

// Use this button if chat is hidden on some routes. config.js has onlyShowOnRoutes set to ["/"] so it will be hidden on all routes except the home page.
// If Crisp is not enable, it will open the support email in the default email client.
const ButtonSupport = () => {
  const handleClick = () => {
    if (config.crisp?.id) {
      Crisp.chat.show();
      Crisp.chat.open();
    } else if (config.mailgun?.supportEmail) {
      // open default email client in new window with "need help with ${config.appName}" as subject
      window.open(
        `mailto:${config.mailgun.supportEmail}?subject=Need help with ${config.appName}`,
        "_blank"
      );
    }
  };

  return (
    <button
      className="btn btn-sm"
      onClick={handleClick}
      data-tooltip-id="tooltip"
      data-tooltip-content="Talk to support"
      title="Chat with support"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        fill="currentColor"
        className="w-5 h-5"
      >
        <path
          fillRule="evenodd"
          d="M10 2c-2.236 0-4.43.18-6.57.524C1.993 2.755 1 4.014 1 5.426v5.148c0 1.413.993 2.67 2.43 2.902.848.137 1.705.248 2.57.331v3.443a.75.75 0 001.28.53l3.58-3.579a.78.78 0 01.527-.224 41.202 41.202 0 005.183-.5c1.437-.232 2.43-1.49 2.43-2.903V5.426c0-1.413-.993-2.67-2.43-2.902A41.289 41.289 0 0010 2zm0 7a1 1 0 100-2 1 1 0 000 2zM8 8a1 1 0 11-2 0 1 1 0 012 0zm5 1a1 1 0 100-2 1 1 0 000 2z"
          clipRule="evenodd"
        />
      </svg>
      Support
    </button>
  );
};

export default ButtonSupport;

================
File: components/CompanyLogo.js
================
import Image from "next/image";

/**
 * A flexible company logo component that can display:
 * 1. Local images from public/logos/companies directory
 * 2. Remote images from configured domains
 * 3. Text fallback when images are not available
 */
const CompanyLogo = ({
  name,
  logoSrc,
  width = 100,
  height = 40,
  className = "",
}) => {
  // Format company name for text display
  const formattedName = name || "Company";
  
  // If logo source is provided, render image
  if (logoSrc) {
    return (
      <div className={`flex items-center justify-center ${className}`}>
        <Image
          src={logoSrc}
          alt={`${formattedName} logo`}
          width={width}
          height={height}
          className="object-contain"
        />
      </div>
    );
  }
  
  // Otherwise, render text-based logo
  return (
    <div className={`flex items-center justify-center bg-primary/10 rounded-md px-3 py-2 ${className}`}>
      <span className="font-bold text-primary text-sm">{formattedName}</span>
    </div>
  );
};

export default CompanyLogo;

================
File: components/ContactSection.js
================
"use client";

import Link from "next/link";

const ContactCard = ({ icon, title, linkText, href, onClick }) => {
  return (
    <div className="bg-zinc-900/50 backdrop-blur-sm border border-zinc-800/50 rounded-xl p-6 flex flex-col items-center transition-all duration-300 hover:bg-zinc-900/70 hover:shadow-lg hover:shadow-red-500/10 hover:-translate-y-1">
      <div className="bg-red-500/10 rounded-full p-4 mb-4">
        {icon}
      </div>
      <h3 className="text-white text-xl font-semibold mb-2">{title}</h3>
      <Link 
        href={href} 
        target={href.startsWith("http") ? "_blank" : "_self"} 
        rel={href.startsWith("http") ? "noopener noreferrer" : ""}
        className="text-red-500 hover:text-red-400 transition-colors"
        onClick={onClick}
      >
        {linkText}
      </Link>
    </div>
  );
};

const ContactSection = () => {
  return (
    <section className="relative py-24 bg-gradient-to-b from-black via-gray-900 to-base-100" id="contact">
      {/* Gradient effects */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-0 right-0 w-1/2 h-1/2 bg-red-500/10 rounded-full blur-3xl transform -translate-x-1/4 -translate-y-1/4 opacity-30"></div>
        <div className="absolute bottom-0 left-0 w-1/2 h-1/2 bg-red-500/5 rounded-full blur-3xl transform translate-x-1/4 translate-y-1/4 opacity-30"></div>
        <div className="opacity-30 absolute inset-0 bg-[linear-gradient(to_right,#080808_1px,transparent_1px),linear-gradient(to_bottom,#080808_1px,transparent_1px)] bg-[size:38px_38px]"></div>
      </div>
      
      <div className="max-w-7xl mx-auto px-8">
        <div className="text-center mb-16">
          <span className="inline-flex items-center gap-2 px-4 py-2 text-sm rounded-full bg-red-500/10 text-red-500 font-medium mb-6">
            Get In Touch
          </span>
          <h2 className="sm:text-5xl text-4xl font-extrabold text-white mb-8">
            We'd love to <span className="text-transparent bg-clip-text bg-gradient-to-r from-red-500 to-red-700">hear from you</span>
          </h2>
          <p className="text-zinc-400 max-w-2xl mx-auto text-lg">
            We&apos;d love to hear your feedbacks and suggestions, we answer to everyone and make some suggestions into features :)
          </p>
        </div>
        
        <div className="grid md:grid-cols-3 gap-8 max-w-4xl mx-auto">
          <ContactCard 
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-red-500" fill="currentColor" viewBox="0 0 24 24">
                <path d="M1.75 3h20.5c.966 0 1.75.784 1.75 1.75v14a1.75 1.75 0 0 1-1.75 1.75H1.75A1.75 1.75 0 0 1 0 18.75v-14C0 3.784.784 3 1.75 3ZM1.5 7.412V18.75c0 .138.112.25.25.25h20.5a.25.25 0 0 0 .25-.25V7.412l-9.52 6.433c-.592.4-1.368.4-1.96 0Zm0-2.662v.852l10.36 7a.25.25 0 0 0 .28 0l10.36-7V4.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Z"/>
              </svg>
            } 
            title="Email" 
            linkText="dattasumit2019@gmail.com" 
            href="mailto:dattasumit2019@gmail.com" 
          />
          
          <ContactCard 
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-red-500" fill="currentColor" viewBox="0 0 24 24">
                <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
              </svg>
            } 
            title="Twitter" 
            linkText="@InfernalSumit" 
            href="https://x.com/InfernalSumit" 
          />
          
          <ContactCard 
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-red-500" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2C6.477 2 2 6.477 2 12c0 5.523 4.477 10 10 10s10-4.477 10-10c0-5.523-4.477-10-10-10zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>
                <path d="M12 1.5C6.201 1.5 1.5 6.201 1.5 12S6.201 22.5 12 22.5 22.5 17.799 22.5 12 17.799 1.5 12 1.5zM12 5.75c.69 0 1.25.56 1.25 1.25s-.56 1.25-1.25 1.25S10.75 7.69 10.75 7s.56-1.25 1.25-1.25zM14 18h-4v-1h1v-5.5h-1v-1h3v6.5h1v1z" fillRule="evenodd" clipRule="evenodd"/>
              </svg>
            } 
            title="Live Chat" 
            linkText="Chat with us now" 
            href="#"
            onClick={(e) => {
              e.preventDefault();
              // This would trigger Crisp chat if implemented
              if (typeof window !== 'undefined' && window.$crisp) {
                window.$crisp.push(['do', 'chat:open']);
              } else {
                alert("Live chat is currently offline. Please email us instead.");
              }
            }}
          />
        </div>
        
        <div className="text-center mt-16">
          <p className="text-zinc-400">
            Our support team is available Monday-Friday, 9am-5pm PST.
            <br />
            For urgent inquiries outside of business hours, please use the live chat.
          </p>
        </div>
      </div>
    </section>
  );
};

export default ContactSection;

================
File: components/CTA.js
================
"use client";

import Image from "next/image";
import config from "@/config";
import { useRouter } from "next/navigation";
import { ArrowRight, Check } from "lucide-react";
import ButtonCheckout from "./ButtonCheckout";
import TrackdeskScriptWrapper from "./TrackdeskScriptWrapper";

const CTA = () => {
  const router = useRouter();

  const benefits = [
    "AI-powered lead generation",
    "Automated connection requests",
    "Personalized messaging at scale",
    "Sales pipeline acceleration",
  ];

  // Get the plans from config
  const plans = config.stripe.plans;
  // Get the pro plan
  const proPlan = plans[0];

  return (
    <section className="relative hero overflow-hidden min-h-screen">
      <Image
        src="https://images.unsplash.com/photo-1571171637578-41bc2dd41cd2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3540&q=80"
        alt="Background"
        className="object-cover w-full"
        fill
      />
      <div className="relative hero-overlay bg-black bg-opacity-90"></div>
      <div className="relative hero-content text-white p-8 w-full max-w-7xl mx-auto">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
          <div className="flex flex-col space-y-8">
            <div className="inline-flex items-center gap-2 px-4 py-2 text-sm rounded-full bg-red-500/20 text-red-500 font-medium self-start">
              <span className="relative flex h-2 w-2">
                <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-500 opacity-75"></span>
                <span className="relative inline-flex rounded-full h-2 w-2 bg-red-500"></span>
              </span>
              Special Offer: $15/month
            </div>

            <h2 className="font-bold text-4xl md:text-5xl lg:text-6xl tracking-tight">
              Ready to{" "}
              <span className="text-transparent bg-clip-text bg-gradient-to-r from-red-500 to-red-700">
                transform
              </span>{" "}
              your LinkedIn outreach?
            </h2>

            <p className="text-lg text-gray-300 max-w-xl">
              Join the founders who are consistently generating high-quality
              leads and growing their SaaS businesses with Prospectr&apos;s
              AI-powered automation.
            </p>

            <ul className="space-y-3">
              {benefits.map((benefit, index) => (
                <li key={index} className="flex items-center gap-3">
                  <div className="flex-shrink-0 w-5 h-5 rounded-full bg-red-500 flex items-center justify-center">
                    <Check className="w-3 h-3 text-white" />
                  </div>
                  <span className="text-gray-200">{benefit}</span>
                </li>
              ))}
            </ul>
          </div>

          <div className="bg-zinc-900/80 p-8 rounded-2xl border border-zinc-800 backdrop-blur-sm shadow-xl">
            <div className="text-center mb-8">
              <h3 className="font-bold text-2xl mb-2">Pro Plan</h3>
              <p className="text-gray-400">
                Everything you need for powerful LinkedIn automation
              </p>
            </div>

            <div className="flex flex-col space-y-6">
              <div className="flex flex-col rounded-lg bg-red-500/10 p-6 border border-red-500/30 relative">
                <div className="absolute -top-3 right-3 bg-red-500 text-xs font-bold px-2 py-1 rounded text-white">
                  BEST VALUE
                </div>
                <div className="flex items-center justify-between mb-4">
                  <p className="font-medium text-xl">{proPlan?.name}</p>
                  <span className="text-2xl font-bold text-red-500">
                    ${proPlan?.price}
                    <span className="text-sm font-normal">/month</span>
                  </span>
                </div>
                <p className="text-gray-300 mb-4">{proPlan?.description}</p>
                <ul className="space-y-3 mb-6">
                  {proPlan?.features.map((feature, i) => (
                    <li
                      key={i}
                      className="flex items-center gap-3 text-gray-300"
                    >
                      <div className="flex-shrink-0 w-5 h-5 rounded-full bg-red-500/20 flex items-center justify-center">
                        <Check className="w-3 h-3 text-red-500" />
                      </div>
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>
                <ButtonCheckout
                  priceId={proPlan?.priceId}
                  productLink={proPlan?.link}
                  className="mt-auto bg-gradient-to-r from-red-500 to-red-700 hover:from-red-600 hover:to-red-800 text-white border-0 btn"
                  theme="red"
                >
                  Get Started
                </ButtonCheckout>
                <p className="text-center text-sm text-gray-400 mt-4">
                  $0.00 due today, cancel anytime
                </p>
              </div>

              <p className="text-center text-sm text-gray-400">
                By signing up, you agree to our{" "}
                <a href="/tos" className="underline hover:text-white">
                  Terms of Service
                </a>{" "}
                and{" "}
                <a
                  href="/privacy-policy"
                  className="underline hover:text-white"
                >
                  Privacy Policy
                </a>
              </p>
            </div>
          </div>
        </div>
      </div>
      {/* TrackdeskScriptWrapper will handle the client reference ID functionality */}
      <TrackdeskScriptWrapper />
    </section>
  );
};

export default CTA;

================
File: components/FAQ.js
================
"use client";

import { useRef, useState, useEffect } from "react";
import { motion } from "framer-motion";

// <FAQ> component is a list of <Item> component
// Just import the FAQ & add your FAQ content to the const faqList

// FAQ categories with icons
const categories = [
  { name: "All", icon: "🔍" },
  { name: "Features", icon: "⚙️" },
  { name: "Compliance", icon: "✓" },
  { name: "Support", icon: "🛟" },
];

const faqList = [
  {
    question: "How does Prospectr work with LinkedIn's connection limits?",
    answer: (
      <p>
        Prospectr respects LinkedIn&apos;s daily connection limit of 50 requests per day. Our smart campaign scheduling ensures you stay within these limits while maximizing your outreach effectiveness.
      </p>
    ),
    category: "Features",
    icon: "📊",
  },
  {
    question: "Is this compliant with LinkedIn's terms of service?",
    answer: (
      <p>
        Yes! Prospectr uses LinkedIn&apos;s official API and follows all their guidelines. We maintain strict compliance to ensure your account&apos;s safety and good standing.
      </p>
    ),
    category: "Compliance",
    icon: "🔒",
  },
  {
    question: "Can I export my leads to other tools?",
    answer: (
      <p>
        Absolutely! You can export your leads to CSV format or directly integrate with popular CRM systems. This makes it easy to manage your leads across your entire sales stack.
      </p>
    ),
    category: "Features",
    icon: "📤",
  },
  {
    question: "How does the AI-powered search work?",
    answer: (
      <div className="space-y-2 leading-relaxed">
        Our AI analyzes your ideal customer profile and searches LinkedIn for matching prospects based on multiple factors including:
        <ul className="list-disc list-inside mt-2">
          <li>Job titles and roles</li>
          <li>Industry and company size</li>
          <li>Location and language</li>
          <li>Activity patterns and engagement</li>
        </ul>
      </div>
    ),
    category: "Features",
    icon: "🤖",
  },
  {
    question: "What kind of support do you offer?",
    answer: (
      <p>
        We provide email support 7 days a week. For our premium users, we also offer priority support and personalized campaign optimization consultations.
      </p>
    ),
    category: "Support",
    icon: "📧",
  }
];

const Item = ({ item, isLast, isOpen, toggleOpen }) => {
  const contentRef = useRef(null);

  return (
    <li className={`rounded-lg transition-all duration-200 ${isOpen ? "bg-zinc-900/50 shadow-lg" : ""}`}>
      <button
        className={`relative flex gap-4 items-start w-full p-6 text-base font-medium text-left ${
          !isLast ? "border-b border-zinc-800" : ""
        } ${isOpen ? "rounded-t-lg" : "rounded-lg"} hover:bg-zinc-900/30 transition-colors duration-200`}
        onClick={toggleOpen}
        aria-expanded={isOpen}
      >
        <span
          className={`mt-0.5 h-10 w-10 flex flex-none justify-center items-center rounded-full text-xl ${
            isOpen ? "bg-red-500 text-white" : "bg-zinc-800 text-white"
          } transition-colors duration-200`}
        >
          {item.icon}
        </span>
        <div className="flex flex-col">
          <span className="text-white text-lg font-semibold">{item?.question}</span>
          <span className="text-zinc-400 text-sm font-normal mt-1">Category: {item.category}</span>
        </div>
        <span className="ml-auto">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className={`h-5 w-5 transition-transform duration-200 text-zinc-400 ${
              isOpen ? "rotate-180" : ""
            }`}
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
              clipRule="evenodd"
            />
          </svg>
        </span>
      </button>

      {/* Optimized animation using CSS transitions instead of Framer Motion for better performance */}
      <div 
        ref={contentRef}
        className={`overflow-hidden text-white/70 px-6 transition-all duration-200 ease-out ${
          isOpen ? "max-h-96 opacity-100 pb-6" : "max-h-0 opacity-0 pb-0"
        }`}
        style={{
          transitionProperty: "max-height, opacity, padding",
        }}
      >
        <div className="border-l-2 border-red-500 pl-4 leading-relaxed">{item?.answer}</div>
      </div>
    </li>
  );
};

const FAQ = () => {
  const [activeCategory, setActiveCategory] = useState("All");
  const [searchTerm, setSearchTerm] = useState("");
  const [openItems, setOpenItems] = useState({});

  // Memoized filtering for better performance
  const filteredFAQs = faqList.filter((item) => {
    const matchesCategory = activeCategory === "All" || item.category === activeCategory;
    
    if (!matchesCategory) return false;
    
    if (searchTerm === "") return true;
    
    // More efficient search implementation
    const questionMatch = item.question.toLowerCase().includes(searchTerm.toLowerCase());
    
    // Check if answer is a string or has children that are strings
    let answerMatch = false;
    const answerContent = item.answer.props.children;
    
    if (typeof answerContent === 'string') {
      answerMatch = answerContent.toLowerCase().includes(searchTerm.toLowerCase());
    }
    
    return questionMatch || answerMatch;
  });

  // Toggle accordion item - keep only one open at a time for better performance
  const toggleItem = (index) => {
    setOpenItems(prev => {
      const isCurrentlyOpen = prev[index];
      // Close all items, then open the clicked one if it was closed
      return {
        ...Object.keys(prev).reduce((acc, key) => ({ ...acc, [key]: false }), {}),
        [index]: !isCurrentlyOpen
      };
    });
  };

  return (
    <section className="bg-black relative pb-24" id="faq">
      {/* Simplified gradient effects */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -bottom-1/2 -right-1/2 w-full h-full bg-gradient-to-tl from-red-500/10 to-transparent rounded-full blur-3xl transform -rotate-12 opacity-30"></div>
      </div>
      
      <div className="py-24 px-8 max-w-7xl mx-auto">
        <div className="text-center mb-16">
          <p className="inline-block font-semibold text-red-500 mb-4 text-lg">FAQ</p>
          <h2 className="sm:text-5xl text-4xl font-extrabold text-white mb-8">
            Frequently Asked Questions
          </h2>
          <p className="text-zinc-400 max-w-2xl mx-auto">
            Find answers to the most common questions about Prospectr and how it can help you scale your LinkedIn outreach efforts.
          </p>
        </div>

        {/* Search and Category Filters */}
        <div className="max-w-3xl mx-auto mb-12">
          <div className="relative mb-8">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-zinc-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <input
              type="text"
              className="bg-zinc-900 w-full pl-10 pr-4 py-3 rounded-lg border border-zinc-800 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent text-white"
              placeholder="Search for answers..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          <div className="flex flex-wrap justify-center gap-4">
            {categories.map((category) => (
              <button
                key={category.name}
                onClick={() => setActiveCategory(category.name)}
                className={`px-5 py-2.5 rounded-full flex items-center gap-2 transition-colors duration-200 ${
                  activeCategory === category.name
                    ? "bg-red-500 text-white"
                    : "bg-zinc-900 text-zinc-400 hover:bg-zinc-800"
                }`}
              >
                <span>{category.icon}</span>
                <span>{category.name}</span>
              </button>
            ))}
          </div>
        </div>

        {/* FAQ List */}
        <div className="max-w-3xl mx-auto">
          {filteredFAQs.length > 0 ? (
            <ul className="divide-y divide-zinc-800/50 bg-zinc-900/20 rounded-xl overflow-hidden shadow-xl">
              {filteredFAQs.map((item, i) => (
                <Item 
                  key={i} 
                  item={item} 
                  isLast={i === filteredFAQs.length - 1}
                  isOpen={openItems[i] || false}
                  toggleOpen={() => toggleItem(i)}
                />
              ))}
            </ul>
          ) : (
            <div className="text-center py-12 bg-zinc-900/20 rounded-xl">
              <p className="text-2xl mb-4">🔍</p>
              <p className="text-white font-medium">No results found</p>
              <p className="text-zinc-400 mt-2">Try a different search term or category</p>
            </div>
          )}
        </div>
        
        {/* Still have questions */}
        <div className="mt-16 text-center">
          <p className="text-zinc-400 mb-4">Still have questions?</p>
          <a 
            href="#contact" 
            className="inline-flex items-center gap-2 bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200"
            onClick={(e) => {
              e.preventDefault();
              document.getElementById('contact').scrollIntoView({ behavior: 'smooth' });
            }}
          >
            Contact Support
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </a>
        </div>
      </div>
    </section>
  );
};

export default FAQ;

================
File: components/FeaturesAccordion.js
================
"use client";

import { useState, useRef } from "react";
import Image from "next/image";

// The features array is a list of features that will be displayed in the accordion.
// - title: The title of the feature
// - description: The description of the feature (when clicked)
// - type: The type of media (video or image)
// - path: The path to the media (for better SEO, try to use a local path)
// - format: The format of the media (if type is 'video')
// - alt: The alt text of the image (if type is 'image')
const features = [
  {
    title: "Smart Lead Discovery",
    description:
      "Our AI-powered search algorithm identifies your ideal customers with precision targeting. Filter by industry, role, company size, funding stage, and more to find prospects that perfectly match your ICP.",
    svg: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="w-6 h-6"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"
        />
      </svg>
    ),
    stats: [
      { label: "Lead Quality", value: "95%" },
      { label: "Time Saved", value: "6h/day" }
    ]
  },
  {
    title: "Multi-touch Campaigns",
    description:
      "Create sophisticated outreach sequences that send personalized connection requests and follow-up messages on autopilot. Our smart sending algorithm stays within LinkedIn's limits while maximizing response rates.",
    svg: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="w-6 h-6"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5"
        />
      </svg>
    ),
    stats: [
      { label: "Avg. Response Rate", value: "43%" },
      { label: "Conversion Lift", value: "+187%" }
    ]
  },
  {
    title: "Sales Pipeline Management",
    description:
      "A complete CRM for your LinkedIn leads. Track connection status, conversation history, and lead stages. Set follow-up reminders and export qualified leads to your existing sales stack with one click.",
    svg: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="w-6 h-6"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-.952 4.125 4.125 0 00-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 018.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0111.964-3.07M12 6.375a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zm8.25 2.25a2.625 2.625 0 11-5.25 0 2.625 2.625 0 015.25 0z"
        />
      </svg>
    ),
    stats: [
      { label: "Pipeline Visibility", value: "100%" },
      { label: "Close Rate", value: "+68%" }
    ]
  },
  {
    title: "AI-Powered Analytics",
    description:
      "Get actionable insights with our advanced analytics dashboard. Track connection acceptance rates, response rates, and conversation outcomes. Optimize your messaging with A/B testing and see what resonates with your audience.",
    svg: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="w-6 h-6"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z"
        />
      </svg>
    ),
    stats: [
      { label: "Data Points", value: "60+" },
      { label: "Revenue Insights", value: "Real-time" }
    ]
  },
];

// An SEO-friendly accordion component including the title and a description (when clicked.)
const Item = ({ feature, isOpen, setFeatureSelected }) => {
  const accordion = useRef(null);
  const { title, description, svg, stats } = feature;

  return (
    <li className="group border-b border-zinc-800 last:border-0">
      <button
        className="relative flex gap-2 items-center w-full py-5 text-base font-medium text-left md:text-lg transition-all duration-300"
        onClick={(e) => {
          e.preventDefault();
          setFeatureSelected();
        }}
        aria-expanded={isOpen}
      >
        <span className={`duration-300 transform p-2 rounded-lg ${isOpen ? "text-white bg-red-500" : "text-white/80 bg-zinc-800 group-hover:text-white group-hover:bg-red-500/30"}`}>
          {svg}
        </span>
        <span
          className={`flex-1 transition-all duration-300 ml-2 ${
            isOpen ? "text-red-500 font-bold translate-x-2" : "text-white/90 group-hover:text-red-400"
          }`}
        >
          <h3 className="inline text-lg md:text-xl">{title}</h3>
        </span>
        <svg
          className={`w-6 h-6 transform transition-transform duration-300 ${
            isOpen ? "rotate-45 text-red-500" : "text-white/60"
          }`}
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
      </button>

      <div
        ref={accordion}
        className={`transition-all duration-500 ease-in-out text-white/70 overflow-hidden`}
        style={
          isOpen
            ? { maxHeight: accordion?.current?.scrollHeight, opacity: 1 }
            : { maxHeight: 0, opacity: 0 }
        }
      >
        <div className="pb-6 pl-12 pr-4 space-y-4">
          <p className="leading-relaxed">{description}</p>
          
          <div className="grid grid-cols-2 gap-4 pt-4">
            {stats.map((stat, index) => (
              <div 
                key={stat.label} 
                className="bg-zinc-800/50 rounded-lg p-4 backdrop-blur-sm border border-zinc-700/30 hover:border-red-500/30 transition-colors group/stat"
              >
                <div className="text-2xl font-bold text-red-500 group-hover/stat:scale-110 transition-transform">{stat.value}</div>
                <div className="text-sm text-white/60">{stat.label}</div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </li>
  );
};

// A component to display the media (video or image) of the feature. If the type is not specified, it will display an empty div.
// Video are set to autoplay for best UX.
const Media = ({ feature }) => {
  const { type, path, format, alt } = feature;
  const style = "rounded-2xl aspect-square w-full sm:w-[26rem]";
  const size = {
    width: 500,
    height: 500,
  };

  if (type === "video") {
    return (
      <video
        className={style}
        autoPlay
        muted
        loop
        playsInline
        controls
        width={size.width}
        height={size.height}
      >
        <source src={path} type={format} />
      </video>
    );
  } else if (type === "image") {
    return (
      <Image
        src={path}
        alt={alt}
        className={`${style} object-cover object-center`}
        width={size.width}
        height={size.height}
      />
    );
  } else {
    return (
      <div className={`${style} bg-zinc-900 border border-zinc-800 rounded-2xl p-6 flex items-center justify-center`}>
        <div className="text-center space-y-4">
          <div className="inline-flex items-center justify-center p-4 bg-red-500/10 rounded-full">
            {feature.svg && <span className="text-red-500 w-12 h-12">{feature.svg}</span>}
          </div>
          <h3 className="text-xl font-semibold text-white">{feature.title}</h3>
          <p className="text-white/60 text-sm">{feature.stats?.[0]?.value} {feature.stats?.[0]?.label}</p>
        </div>
      </div>
    );
  }
};

// A component to display 2 to 5 features in an accordion.
// By default, the first feature is selected. When a feature is clicked, the others are closed.
const FeaturesAccordion = () => {
  const [featureSelected, setFeatureSelected] = useState(0);

  return (
    <section
      className="py-24 md:py-32 space-y-24 md:space-y-32 max-w-7xl mx-auto bg-black relative overflow-hidden"
      id="features"
    >
      {/* Background gradient effects */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-1/2 -left-1/2 w-full h-full bg-gradient-to-r from-red-500/20 to-transparent rounded-full blur-3xl transform rotate-12 opacity-30"></div>
        <div className="absolute -bottom-1/2 -right-1/2 w-full h-full bg-gradient-to-l from-red-500/20 to-transparent rounded-full blur-3xl transform -rotate-12 opacity-30"></div>
      </div>

      <div className="px-8 relative">
        <div className="flex flex-col items-center text-center mb-16">
          <span className="inline-flex items-center gap-2 px-4 py-2 text-sm rounded-full bg-red-500/10 text-red-500 font-medium mb-6">
            Powerful Features
          </span>
          
          <h2 className="font-extrabold text-4xl lg:text-6xl tracking-tight mb-8 text-white">
            We have everything you need to
            <div className="relative inline-block">
              <span className="relative z-10 bg-gradient-to-r from-red-500 to-red-700 text-transparent bg-clip-text px-2 md:px-4 ml-1 md:ml-1.5 leading-relaxed whitespace-nowrap">
                dominate LinkedIn
              </span>
              <div className="absolute inset-0 bg-zinc-800 transform -skew-x-12"></div>
            </div>
          </h2>
          <p className="text-white/60 max-w-2xl text-lg">
            Our AI-powered platform automates your entire LinkedIn outreach workflow, from lead discovery to conversion tracking
          </p>
        </div>

        <div className="flex flex-col md:flex-row gap-12 md:gap-24">
          <div className="grid grid-cols-1 items-stretch gap-8 sm:gap-12 lg:grid-cols-2 lg:gap-16">
            <div className="rounded-2xl bg-zinc-900/50 backdrop-blur-sm border border-zinc-800/50 p-6">
              <ul className="w-full divide-y divide-zinc-800">
                {features.map((feature, i) => (
                  <Item
                    key={feature.title}
                    index={i}
                    feature={feature}
                    isOpen={featureSelected === i}
                    setFeatureSelected={() => setFeatureSelected(i)}
                  />
                ))}
              </ul>
            </div>

            <div className="hidden lg:block">
              <Media feature={features[featureSelected]} key={featureSelected} />
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default FeaturesAccordion;

================
File: components/FeaturesListicle.js
================
"use client";

import React, { useState, useEffect, useRef } from "react";
import { HeroVideoDialog } from "./ui/hero-video-dialog";
import { motion } from "framer-motion";

// Rainbow colors array for consistent styling across component
const rainbowColors = [
  "from-purple-600 to-blue-500",
  "from-blue-500 to-teal-400",
  "from-teal-400 to-green-500",
  "from-green-500 to-yellow-500",
  "from-yellow-500 to-orange-500",
  "from-orange-500 to-red-500",
];

// List of features to display:
// - name: name of the feature
// - description: description of the feature (can be any JSX)
// - svg: icon of the feature
// - video: video content for the feature
const features = [
  {
    name: "Emails",
    description: (
      <>
        <ul className="space-y-1">
          {[
            "Send transactional emails",
            "DNS setup to avoid spam folder (DKIM, DMARC, SPF in subdomain)",
            "Webhook to receive & forward emails",
          ].map((item) => (
            <li key={item} className="flex items-center gap-3">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                className="w-[18px] h-[18px] inline shrink-0 opacity-80"
              >
                <path
                  fillRule="evenodd"
                  d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                  clipRule="evenodd"
                />
              </svg>
              {item}
            </li>
          ))}
          <li className="flex items-center gap-3">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className="w-[18px] h-[18px] inline shrink-0"
            >
              <path
                fillRule="evenodd"
                d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                clipRule="evenodd"
              />
            </svg>
            <span className="bg-gradient-to-r from-purple-600 to-blue-500 bg-clip-text text-transparent font-bold">
              Time saved: 2 hours
            </span>
          </li>
        </ul>
      </>
    ),
    svg: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="w-8 h-8"
      >
        <path
          strokeLinecap="round"
          d="M16.5 12a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0zm0 0c0 1.657 1.007 3 2.25 3S21 13.657 21 12a9 9 0 10-2.636 6.364M16.5 12V8.25"
        />
      </svg>
    ),
    video: {
      thumbnailSrc: "/features/email-feature.webp",
      videoSrc: "https://www.youtube.com/embed/your-email-video-id",
    },
  },
  {
    name: "Payments",
    description: (
      <>
        <ul className="space-y-2">
          {[
            "Create checkout sessions",
            "Handle webhooks to update user's account",
            "Tips to setup your account & reduce chargebacks",
          ].map((item) => (
            <li key={item} className="flex items-center gap-3">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                className="w-[18px] h-[18px] inline shrink-0 opacity-80"
              >
                <path
                  fillRule="evenodd"
                  d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                  clipRule="evenodd"
                />
              </svg>
              {item}
            </li>
          ))}
          <li className="flex items-center gap-3">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className="w-[18px] h-[18px] inline shrink-0"
            >
              <path
                fillRule="evenodd"
                d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                clipRule="evenodd"
              />
            </svg>
            <span className="bg-gradient-to-r from-blue-500 to-teal-400 bg-clip-text text-transparent font-bold">
              Time saved: 2 hours
            </span>
          </li>
        </ul>
      </>
    ),
    svg: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="w-8 h-8"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M2.25 8.25h19.5M2.25 9h19.5m-16.5 5.25h6m-6 2.25h3m-3.75 3h15a2.25 2.25 0 002.25-2.25V6.75A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25v10.5A2.25 2.25 0 004.5 19.5z"
        />
      </svg>
    ),
    video: {
      thumbnailSrc: "/features/payments-feature.webp",
      videoSrc: "https://www.youtube.com/embed/your-payments-video-id",
    },
  },
  {
    name: "Login",
    description: (
      <>
        <ul className="space-y-2">
          {[
            "Magic links setup",
            "Login with Google walkthrough",
            "Save user data in MongoDB",
            "Private/protected pages & API calls",
          ].map((item) => (
            <li key={item} className="flex items-center gap-3">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                className="w-[18px] h-[18px] inline shrink-0 opacity-80"
              >
                <path
                  fillRule="evenodd"
                  d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                  clipRule="evenodd"
                />
              </svg>
              {item}
            </li>
          ))}
          <li className="flex items-center gap-3">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className="w-[18px] h-[18px] inline shrink-0"
            >
              <path
                fillRule="evenodd"
                d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                clipRule="evenodd"
              />
            </svg>
            <span className="bg-gradient-to-r from-teal-400 to-green-500 bg-clip-text text-transparent font-bold">
              Time saved: 3 hours
            </span>
          </li>
        </ul>
      </>
    ),
    svg: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="w-8 h-8"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M17.982 18.725A7.488 7.488 0 0012 15.75a7.488 7.488 0 00-5.982 2.975m11.963 0a9 9 0 10-11.963 0m11.963 0A8.966 8.966 0 0112 21a8.966 8.966 0 01-5.982-2.275M15 9.75a3 3 0 11-6 0 3 3 0 016 0z"
        />
      </svg>
    ),
    video: {
      thumbnailSrc: "/features/login-feature.webp",
      videoSrc: "https://www.youtube.com/embed/your-login-video-id",
    },
  },
  {
    name: "Database",
    description: (
      <>
        <ul className="space-y-2">
          {["Mongoose schema", "Mongoose plugins to make your life easier"].map(
            (item) => (
              <li key={item} className="flex items-center gap-3">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  className="w-[18px] h-[18px] inline shrink-0 opacity-80"
                >
                  <path
                    fillRule="evenodd"
                    d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                    clipRule="evenodd"
                  />
                </svg>
                {item}
              </li>
            )
          )}
          <li className="flex items-center gap-3">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className="w-[18px] h-[18px] inline shrink-0"
            >
              <path
                fillRule="evenodd"
                d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                clipRule="evenodd"
              />
            </svg>
            <span className="bg-gradient-to-r from-green-500 to-yellow-500 bg-clip-text text-transparent font-bold">
              Time saved: 2 hours
            </span>
          </li>
        </ul>
      </>
    ),
    svg: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="w-8 h-8"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M20.25 6.375c0 2.278-3.694 4.125-8.25 4.125S3.75 8.653 3.75 6.375m16.5 0c0-2.278-3.694-4.125-8.25-4.125S3.75 4.097 3.75 6.375m16.5 0v11.25c0 2.278-3.694 4.125-8.25 4.125s-8.25-1.847-8.25-4.125V6.375m16.5 0v3.75m-16.5-3.75v3.75m16.5 0v3.75C20.25 16.153 16.556 18 12 18s-8.25-1.847-8.25-4.125v-3.75m16.5 0c0 2.278-3.694 4.125-8.25 4.125s-8.25-1.847-8.25-4.125"
        />
      </svg>
    ),
    video: {
      thumbnailSrc: "/features/database-feature.webp",
      videoSrc: "https://www.youtube.com/embed/your-database-video-id",
    },
  },
  {
    name: "SEO",
    description: (
      <>
        <ul className="space-y-2">
          {[
            "All meta tags to rank on Google",
            "OpenGraph tags to share on social media",
            "Automated sitemap generation to fasten Google indexing",
            "Structured data markup for Rich Snippets",
            "SEO-optimized UI components",
          ].map((item) => (
            <li key={item} className="flex items-center gap-3">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                className="w-[18px] h-[18px] inline shrink-0 opacity-80"
              >
                <path
                  fillRule="evenodd"
                  d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                  clipRule="evenodd"
                />
              </svg>
              {item}
            </li>
          ))}
          <li className="flex items-center gap-3">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className="w-[18px] h-[18px] inline shrink-0"
            >
              <path
                fillRule="evenodd"
                d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                clipRule="evenodd"
              />
            </svg>
            <span className="bg-gradient-to-r from-yellow-500 to-orange-500 bg-clip-text text-transparent font-bold">
              Time saved: 6 hours
            </span>
          </li>
        </ul>
      </>
    ),
    svg: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="w-8 h-8"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m5.231 13.481L15 17.25m-4.5-15H5.625c-.621 0-1.125.504-1.125 1.125v16.5c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9zm3.75 11.625a2.625 2.625 0 11-5.25 0 2.625 2.625 0 015.25 0z"
        />
      </svg>
    ),
    video: {
      thumbnailSrc: "/features/seo-feature.webp",
      videoSrc: "https://www.youtube.com/embed/your-seo-video-id",
    },
  },
  {
    name: "Style",
    description: (
      <>
        <ul className="space-y-2">
          {[
            "Components, animations & sections (like the pricing page below)",
            "20+ themes with daisyUI",
            "Automatic dark mode",
          ].map((item) => (
            <li key={item} className="flex items-center gap-3">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                className="w-[18px] h-[18px] inline shrink-0 opacity-80"
              >
                <path
                  fillRule="evenodd"
                  d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                  clipRule="evenodd"
                />
              </svg>
              {item}
            </li>
          ))}
          <li className="flex items-center gap-3">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className="w-[18px] h-[18px] inline shrink-0"
            >
              <path
                fillRule="evenodd"
                d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                clipRule="evenodd"
              />
            </svg>
            <span className="bg-gradient-to-r from-orange-500 to-red-500 bg-clip-text text-transparent font-bold">
              Time saved: 5 hours
            </span>
          </li>
        </ul>
      </>
    ),
    svg: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="w-8 h-8"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M9.53 16.122a3 3 0 00-5.78 1.128 2.25 2.25 0 01-2.4 2.245 4.5 4.5 0 008.4-2.245c0-.399-.078-.78-.22-1.128zm0 0a15.998 15.998 0 003.388-1.62m-5.043-.025a15.994 15.994 0 011.622-3.395m3.42 3.42a15.995 15.995 0 004.764-4.648l3.876-5.814a1.151 1.151 0 00-1.597-1.597L14.146 6.32a15.996 15.996 0 00-4.649 4.763m3.42 3.42a6.776 6.776 0 00-3.42-3.42"
        />
      </svg>
    ),
    video: {
      thumbnailSrc: "/features/style-feature.webp",
      videoSrc: "https://www.youtube.com/embed/your-style-video-id",
    },
  },
];

// A list of features with a vertical layout and video content
const FeaturesListicle = () => {
  const [featureSelected, setFeatureSelected] = useState(features[0].name);
  const [hasClicked, setHasClicked] = useState(false);

  return (
    <section className="py-24 bg-base-200" id="features">
      <div className="max-w-6xl mx-auto px-4">
        <div className="text-center mb-20">
          <p className="text-accent font-medium text-sm font-mono mb-3">
            const launch_time = &quot;Today&quot;;
          </p>
          {/* Rainbow gradient title */}
          <h2 className="font-extrabold text-3xl lg:text-5xl tracking-tight mb-8 bg-clip-text text-transparent bg-gradient-to-r from-purple-600 via-pink-500 to-blue-600">
            Supercharge your app instantly, launch faster, make $
          </h2>
          <div className="text-base-content/80 leading-relaxed mb-8 lg:text-lg max-w-3xl mx-auto">
            Login users, process payments and send emails at lightspeed. Spend
            your time building your startup, not integrating APIs. ShipFast
            provides you with the boilerplate code you need to launch, FAST.
          </div>
        </div>

        <div className="space-y-20">
          {features.map((feature, index) => (
            <motion.div
              key={feature.name}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              viewport={{ once: true }}
              className="flex flex-col gap-10 items-center"
            >
              {/* Feature Title and Description with rainbow styling */}
              <motion.div 
                className={`w-full max-w-3xl mx-auto bg-base-100 p-8 rounded-xl shadow-lg relative overflow-hidden`}
                whileHover={{ 
                  y: -5,
                  boxShadow: "0 25px 50px -12px rgba(0, 0, 0, 0.25)"
                }}
                transition={{ duration: 0.2 }}
              >
                {/* Gradient border effect */}
                <div className={`absolute inset-0 bg-gradient-to-r ${rainbowColors[index % rainbowColors.length]} opacity-20 rounded-xl`}></div>
                
                {/* Small rainbow indicator bar at top */}
                <div className={`absolute top-0 left-0 right-0 h-1 bg-gradient-to-r ${rainbowColors[index % rainbowColors.length]}`}></div>
                
                <div className="relative z-10">
                  <div className="flex items-center gap-4 mb-6">
                    {/* Colorful icon */}
                    <span className={`bg-gradient-to-r ${rainbowColors[index % rainbowColors.length]} bg-clip-text text-transparent`}>
                      {feature.svg}
                    </span>
                    {/* Colorful feature name */}
                    <h3 className={`text-2xl font-bold bg-gradient-to-r ${rainbowColors[index % rainbowColors.length]} bg-clip-text text-transparent`}>
                      {feature.name}
                    </h3>
                  </div>
                  <div className="text-base-content/80">
                    {feature.description}
                  </div>
                </div>
              </motion.div>
              
              {/* Video section removed as requested - can be added back later */}
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default FeaturesListicle;

================
File: components/Footer.js
================
import Link from "next/link";
import Image from "next/image";
import config from "@/config";
import logo from "@/app/icon.png";

// Add the Footer to the bottom of your landing page and more.
// The support link is connected to the config.js file. If there's no config.mailgun.supportEmail, the link won't be displayed.

const Footer = () => {
  return (
    <footer className="bg-black border-t border-zinc-800">
      <div className="max-w-7xl mx-auto px-8 py-24">
        <div className=" flex lg:items-start md:flex-row md:flex-nowrap flex-wrap flex-col">
          <div className="w-64 flex-shrink-0 md:mx-0 mx-auto text-center md:text-left">
            <Link
              href="/#"
              aria-current="page"
              className="flex gap-2 justify-center md:justify-start items-center"
            >
              <Image
                src={logo}
                alt={`${config.appName} logo`}
                priority={true}
                className="w-6 h-6"
                width={24}
                height={24}
              />
              <strong className="font-extrabold tracking-tight text-base md:text-lg text-white">
                {config.appName}
              </strong>
            </Link>

            <p className="mt-3 text-sm text-white/80">
              {config.appDescription}
            </p>
            <p className="mt-3 text-sm text-white/60">
              Copyright © {new Date().getFullYear()} - All rights reserved
            </p>
          </div>
          <div className="flex-grow flex flex-wrap justify-center -mb-10 md:mt-0 mt-10 text-center">
            <div className="lg:w-1/3 md:w-1/2 w-full px-4">
              <div className="font-semibold text-white tracking-widest text-sm md:text-left mb-3">
                LINKS
              </div>

              <div className="flex flex-col justify-center items-center md:items-start gap-2 mb-10 text-sm">
                {config.mailgun.supportEmail && (
                  <a
                    href={`mailto:${config.mailgun.supportEmail}`}
                    target="_blank"
                    className="text-white/70 hover:text-white transition-colors"
                    aria-label="Contact Support"
                  >
                    Support
                  </a>
                )}
                <Link href="/#pricing" className="text-white/70 hover:text-white transition-colors">
                  Pricing
                </Link>
                <Link href="/blog" className="text-white/70 hover:text-white transition-colors">
                  Blog
                </Link>
                <a href="/#" target="_blank" className="text-white/70 hover:text-white transition-colors">
                  Affiliates
                </a>
              </div>
            </div>

            <div className="lg:w-1/3 md:w-1/2 w-full px-4">
              <div className="font-semibold text-white tracking-widest text-sm md:text-left mb-3">
                LEGAL
              </div>

              <div className="flex flex-col justify-center items-center md:items-start gap-2 mb-10 text-sm">
                <Link href="/tos" className="text-white/70 hover:text-white transition-colors">
                  Terms of services
                </Link>
                <Link href="/privacy-policy" className="text-white/70 hover:text-white transition-colors">
                  Privacy policy
                </Link>
              </div>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

================
File: components/Header.js
================
"use client";

import { useState, useEffect } from "react";
import { useSearchParams } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import ButtonSignin from "./ButtonSignin";
import logo from "@/app/icon.png";
import config from "@/config";

const links = [
  {
    href: "/#pricing",
    label: "Pricing",
  },
  {
    href: "/#features",
    label: "Features",
  },
  {
    href: "/#faq",
    label: "FAQ",
  },
];

const cta = <ButtonSignin extraStyle="btn-primary" />;

// A header with a logo on the left, links in the center (like Pricing, etc...), and a CTA (like Get Started or Login) on the right.
// The header is responsive, and on mobile, the links are hidden behind a burger button.
const Header = () => {
  const searchParams = useSearchParams();
  const [isOpen, setIsOpen] = useState(false);

  // setIsOpen(false) when the route changes (i.e: when the user clicks on a link on mobile)
  useEffect(() => {
    setIsOpen(false);
  }, [searchParams]);

  return (
    <header className="absolute w-full z-50">
      <nav
        className="container flex items-center justify-between px-4 sm:px-8 py-4 sm:py-6 mx-auto bg-transparent"
        aria-label="Global"
      >
        {/* Your logo/name on large screens */}
        <div className="flex lg:flex-1">
          <Link
            className="flex items-center gap-2 shrink-0"
            href="/"
            title={`${config.appName} hompage`}
          >
            <Image
              src={logo}
              alt={`${config.appName} logo`}
              className="w-7 sm:w-8"
              placeholder="blur"
              priority={true}
              width={32}
              height={32}
            />
            <span className="font-extrabold text-base sm:text-lg">{config.appName}</span>
          </Link>
        </div>
        {/* Burger button to open menu on mobile */}
        <div className="flex lg:hidden">
          <button
            type="button"
            className="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5"
            onClick={() => setIsOpen(true)}
          >
            <span className="sr-only">Open main menu</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={1.5}
              stroke="currentColor"
              className="w-6 h-6 text-white"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
              />
            </svg>
          </button>
        </div>

        {/* Your links on large screens */}
        <div className="hidden lg:flex lg:justify-center lg:gap-12 lg:items-center">
          {links.map((link) => (
            <Link
              href={link.href}
              key={link.href}
              className="text-white hover text-base font-medium:text-white/80 transition-colors font-medium"
              title={link.label}
            >
              {link.label}
            </Link>
          ))}
        </div>

        {/* CTA on large screens */}
        <div className="hidden lg:flex lg:justify-end lg:flex-1">{cta}</div>
      </nav>

      {/* Mobile menu, show/hide based on menu state. */}
      <div className={`relative z-50 ${isOpen ? "" : "hidden"}`}>
        <div
          className="fixed inset-0 bg-black/50 transition-opacity"
          onClick={() => setIsOpen(false)}
          aria-hidden="true"
        ></div>
        <div
          className={`fixed inset-y-0 right-0 z-10 w-full px-6 py-4 overflow-y-auto bg-black sm:max-w-sm transform transition-transform duration-300 ease-in-out ${
            isOpen ? "translate-x-0" : "translate-x-full"
          }`}
        >
          {/* Your logo/name on small screens */}
          <div className="flex items-center justify-between">
            <Link
              className="flex items-center gap-2 shrink-0"
              title={`${config.appName} hompage`}
              href="/"
            >
              <Image
                src={logo}
                alt={`${config.appName} logo`}
                className="w-7 sm:w-8"
                placeholder="blur"
                priority={true}
                width={32}
                height={32}
              />
              <span className="font-extrabold text-base sm:text-lg text-white">{config.appName}</span>
            </Link>
            <button
              type="button"
              className="-m-2.5 rounded-md p-2.5 inline-flex items-center justify-center"
              onClick={() => setIsOpen(false)}
            >
              <span className="sr-only">Close menu</span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="w-6 h-6 text-white"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>

          {/* Your links on small screens */}
          <div className="flow-root mt-6">
            <div className="py-4">
              <div className="flex flex-col gap-y-6 items-start">
                {links.map((link) => (
                  <Link
                    href={link.href}
                    key={link.href}
                    className="text-white text-lg hover:text-white/80 transition-colors"
                    title={link.label}
                  >
                    {link.label}
                  </Link>
                ))}
              </div>
            </div>
            <div className="border-t border-zinc-800 my-6"></div>
            {/* Your CTA on small screens */}
            <div className="flex flex-col">{cta}</div>
          </div>
        </div>
      </div>
    </header>
  );
};

export default Header;

================
File: components/Hero.js
================
'use client'

import Image from "next/image";
import { RainbowButton } from "./ui/rainbow-button";
import { Splite } from "./ui/splite";
import { Play } from "lucide-react";
import { TypeAnimation } from 'react-type-animation';
import TestimonialsAvatars from "./TestimonialsAvatars";
import { useRouter } from 'next/navigation';

const Hero = () => {
  const router = useRouter();

  const handleStartFinding = () => {
    router.push('/dashboard');
  };

  return (
    <section className="relative w-full min-h-[90vh] flex items-center justify-center overflow-hidden bg-gradient-to-b from-black via-black to-base-100 pt-16 md:pt-20 lg:pt-0">
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-0 right-0 w-1/2 h-1/2 bg-red-500/10 rounded-full blur-3xl transform -translate-x-1/4 -translate-y-1/4"></div>
        <div className="absolute bottom-0 left-0 w-1/2 h-1/2 bg-red-500/5 rounded-full blur-3xl transform translate-x-1/4 translate-y-1/4"></div>
      </div>
      
      <div className="max-w-[1300px] mx-auto px-4 sm:px-6 w-full relative z-10">
        <div className="flex flex-col lg:flex-row items-center justify-between gap-8">
          {/* Left content */}
          <div className="w-full lg:w-1/2 flex flex-col gap-5 sm:gap-7 lg:gap-8 pb-8 sm:pb-10 lg:pb-0">
            <div className="inline-flex items-center gap-2 px-4 py-2 text-sm rounded-full bg-red-500/10 text-red-500 font-medium self-start animate-pulse">
              <span className="relative flex h-2 w-2">
                <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-500 opacity-75"></span>
                <span className="relative inline-flex rounded-full h-2 w-2 bg-red-500"></span>
              </span>
              B2B SaaS Founders: Stop Wasting Time
            </div>
            
            <h1 className="font-extrabold text-4xl sm:text-5xl md:text-6xl lg:text-7xl tracking-tight">
              <span className="text-white">10x Your LinkedIn</span>{' '}
              <span className="inline-block min-w-[180px] sm:min-w-[220px] md:min-w-[280px] lg:min-w-[320px]">
                <TypeAnimation
                  sequence={[
                    'Outreach',
                    2000,
                    'Connections',
                    2000,
                    'Sales Leads', 
                    2000, 
                    'Revenue',
                    2000,
                  ]}
                  wrapper="span"
                  speed={40}
                  repeat={Infinity}
                  className="inline-block text-transparent bg-clip-text bg-gradient bg-[length:300%_auto] animate-rainbow"
                  style={{ 
                    display: 'inline-block',
                    whiteSpace: 'nowrap',
                  }}
                />
              </span>
            </h1>
            <p className="text-base sm:text-lg lg:text-xl text-gray-300 leading-relaxed max-w-2xl">
              <span className="font-semibold text-white">Prospectr</span> is your AI-powered LinkedIn assistant that finds targeted leads, 
              sends personalized messages, and converts connections into customers—without the 
              <span className="line-through px-1">hours of manual work</span>.
            </p>

            <div className="flex flex-col sm:flex-row gap-4 items-center">
              <RainbowButton 
                onClick={handleStartFinding}
                className="text-base sm:text-lg font-semibold px-8 sm:px-10 py-4 sm:py-5 w-full sm:w-auto hover:scale-105 transition-transform ease-in-out shadow-lg shadow-red-500/20"
              >
                Start Finding Leads
              </RainbowButton>
              
              <a 
                href="#features" 
                className="text-base sm:text-lg font-medium text-white/80 hover:text-white flex items-center gap-2 transition-colors"
              >
                <Play className="w-4 h-4" />
                See how it works
              </a>
            </div>

            <div className="mt-4 sm:mt-6">
              <div className="flex items-center gap-3">
                <div className="flex -space-x-2">
                  {[...Array(3)].map((_, i) => (
                    <div key={i} className="w-8 h-8 rounded-full bg-gradient-to-br from-red-500 to-red-700 border-2 border-black"></div>
                  ))}
                </div>
                <p className="text-sm text-white/70">
                  <span className="font-semibold text-white">120+</span> founders growing their businesses with Prospectr
                </p>
              </div>
            </div>
          </div>

          {/* Right content */}
          <div className="w-full lg:w-1/2 h-[350px] sm:h-[450px] md:h-[500px] lg:h-[650px] relative mt-2 sm:mt-4 lg:mt-8">
            <div className="absolute inset-0 rounded-xl bg-gradient-to-br from-red-500/5 to-transparent"></div>
            <Splite scene="https://prod.spline.design/kZDDjO5HuC9GJUM2/scene.splinecode" className="w-full h-full scale-110 sm:scale-125 lg:scale-140" />
          </div>
        </div>
      </div>
    </section>
  );
};

export default Hero;

================
File: components/LayoutClient.js
================
"use client";

import { useEffect, useState } from "react";
import { usePathname } from "next/navigation";
import { Crisp } from "crisp-sdk-web";
import NextTopLoader from "nextjs-toploader";
import { Toaster } from "react-hot-toast";
import { Tooltip } from "react-tooltip";
import config from "@/config";
import { LinkedInProvider } from "@/components/contexts/LinkedInContext";
import { AnalyticsProvider } from "@/components/contexts/AnalyticsContext";
import { createClient } from "@/utils/supabase/client";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

// Crisp customer chat support:
// This component is separated from ClientLayout because it needs to be wrapped with <SessionProvider> to use useSession() hook
const CrispChat = () => {
  const pathname = usePathname();

  const supabase = createClient();
  const [data, setData] = useState(null);

  // This is used to get the user data from Supabase Auth (if logged in) => user ID is used to identify users in Crisp
  useEffect(() => {
    const getUser = async () => {
      const {
        data: { session },
      } = await supabase.auth.getSession();

      if (session) {
        setData(session.user);
      }
    };
    getUser();
  }, []);

  useEffect(() => {
    if (config?.crisp?.id) {
      // Set up Crisp
      Crisp.configure(config.crisp.id);

      // (Optional) If onlyShowOnRoutes array is not empty in config.js file, Crisp will be hidden on the routes in the array.
      // Use <AppButtonSupport> instead to show it (user clicks on the button to show Crisp—it cleans the UI)
      if (
        config.crisp.onlyShowOnRoutes &&
        !config.crisp.onlyShowOnRoutes?.includes(pathname)
      ) {
        Crisp.chat.hide();
        Crisp.chat.onChatClosed(() => {
          Crisp.chat.hide();
        });
      }
    }
  }, [pathname]);

  // Add User Unique ID to Crisp to easily identify users when reaching support (optional)
  useEffect(() => {
    if (data?.user && config?.crisp?.id) {
      Crisp.session.setData({ userId: data.user?.id });
    }
  }, [data]);

  return null;
};

// All the client wrappers are here (they can't be in server components)
// 1. NextTopLoader: Show a progress bar at the top when navigating between pages
// 2. Toaster: Show Success/Error messages anywhere from the app with toast()
// 3. Tooltip: Show tooltips if any JSX elements has these 2 attributes: data-tooltip-id="tooltip" data-tooltip-content=""
// 4. CrispChat: Set Crisp customer chat support (see above)
// 5. LinkedInProvider: Manage LinkedIn connection status throughout the app
// 6. AnalyticsProvider: Manage analytics data fetching and caching
const ClientLayout = ({ children }) => {
  const queryClient = new QueryClient();

  return (
    <>
      <QueryClientProvider client={queryClient}>
        {/* Show a progress bar at the top when navigating between pages */}
        <NextTopLoader color={config.colors.main} showSpinner={false} />

        {/* LinkedIn context provider for managing connection status */}
        <LinkedInProvider>
          {/* Analytics context provider for managing analytics data */}
          <AnalyticsProvider>
            {/* Content inside app/page.js files  */}
            {children}
          </AnalyticsProvider>
        </LinkedInProvider>

        {/* Show Success/Error messages anywhere from the app with toast() */}
        <Toaster
          toastOptions={{
            duration: 3000,
          }}
        />

        {/* Show tooltips if any JSX elements has these 2 attributes: data-tooltip-id="tooltip" data-tooltip-content="" */}
        <Tooltip
          id="tooltip"
          className="z-[60] !opacity-100 max-w-sm shadow-lg"
        />

        {/* Set Crisp customer chat support */}
        <CrispChat />
      </QueryClientProvider>
    </>
  );
};

export default ClientLayout;

================
File: components/Modal.js
================
"use client";

import { Dialog, Transition } from "@headlessui/react";
import { Fragment } from "react";

// A simple modal component which can be shown/hidden with a boolean and a function
// Because of the setIsModalOpen function, you can't use it in a server component.
const Modal = ({ isModalOpen, setIsModalOpen }) => {
  return (
    <Transition appear show={isModalOpen} as={Fragment}>
      <Dialog
        as="div"
        className="relative z-50"
        onClose={() => setIsModalOpen(false)}
      >
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-neutral-focus bg-opacity-50" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full overflow-hidden items-start md:items-center justify-center p-2">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="relative w-full max-w-3xl h-full overflow-visible transform text-left align-middle shadow-xl transition-all rounded-xl bg-base-100 p-6 md:p-8">
                <div className="flex justify-between items-center mb-4">
                  <Dialog.Title as="h2" className="font-semibold">
                    I&apos;m a modal
                  </Dialog.Title>
                  <button
                    className="btn btn-square btn-ghost btn-sm"
                    onClick={() => setIsModalOpen(false)}
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      className="w-5 h-5"
                    >
                      <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
                    </svg>
                  </button>
                </div>

                <section>And here is my content</section>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  );
};

export default Modal;

================
File: components/OtherTools.js
================
'use client'

import { Clock, DollarSign, Package2, Brain } from "lucide-react"

const OtherTools = () => {
  return (
    <section className="w-full bg-black py-12">
      <div className="max-w-[1200px] mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-bold mb-4 text-white">Finding leads shouldn&apos;t be this <span className="text-red-500">hard</span></h2>
          <p className="text-xl text-white/70">Other LinkedIn automation tools...</p>
        </div>

        <div className="grid md:grid-cols-2 gap-6">
          {/* Manual Posting */}
          <div className="rounded-lg bg-zinc-900 hover:shadow-xl transition-shadow p-6">
            <div className="flex flex-col">
              <div className="flex items-center gap-3 mb-3">
                <Clock className="w-6 h-6 text-red-500" />
                <h3 className="text-xl font-semibold text-white">Manual prospecting</h3>
              </div>
              <p className="text-white/70">
                Hours wasted searching LinkedIn profiles one by one, sending connection requests manually, and tracking responses in spreadsheets
              </p>
            </div>
          </div>

          {/* Unfairly expensive */}
          <div className="rounded-lg bg-zinc-900 hover:shadow-xl transition-shadow p-6">
            <div className="flex flex-col">
              <div className="flex items-center gap-3 mb-3">
                <DollarSign className="w-6 h-6 text-red-500" />
                <h3 className="text-xl font-semibold text-white">Enterprise pricing</h3>
              </div>
              <p className="text-white/70">
                Most LinkedIn automation tools charge hundreds per month - pricing out freelancers, startups, and small businesses
              </p>
            </div>
          </div>

          {/* Features you don't need */}
          <div className="rounded-lg bg-zinc-900 hover:shadow-xl transition-shadow p-6">
            <div className="flex flex-col">
              <div className="flex items-center gap-3 mb-3">
                <Package2 className="w-6 h-6 text-red-500" />
                <h3 className="text-xl font-semibold text-white">Bloated features</h3>
              </div>
              <p className="text-white/70">
                Paying for complex CRM features, analytics dashboards, and team collaboration when you just need simple lead generation
              </p>
            </div>
          </div>

          {/* Complex tools */}
          <div className="rounded-lg bg-zinc-900 hover:shadow-xl transition-shadow p-6">
            <div className="flex flex-col">
              <div className="flex items-center gap-3 mb-3">
                <Brain className="w-6 h-6 text-red-500" />
                <h3 className="text-xl font-semibold text-white">Risk of automation</h3>
              </div>
              <p className="text-white/70">
                Most tools violate LinkedIn&apos;s terms of service, putting your account at risk with aggressive automation and scraping
              </p>
            </div>
          </div>
        </div>

        <div className="text-center mt-12">
          <p className="text-xl text-white/70">
            Why choose between wasting time or risking your account? There&apos;s a better way...
          </p>
        </div>
      </div>
    </section>
  )
}

export default OtherTools

================
File: components/Pricing.js
================
import config from "@/config";
import ButtonCheckout from "./ButtonCheckout";
import TrackdeskScriptWrapper from "./TrackdeskScriptWrapper";

// <Pricing/> displays the pricing plans for your app
// It's your Stripe config in config.js.stripe.plans[] that will be used to display the plans
// <ButtonCheckout /> renders a button that will redirect the user to Stripe checkout called the /api/stripe/create-checkout API endpoint with the correct priceId

const Pricing = () => {
  return (
    <section className="bg-black overflow-hidden" id="pricing">
      <div className="py-24 px-8 max-w-5xl mx-auto">
        <div className="flex flex-col text-center w-full mb-20">
          <p className="font-medium text-red-500 mb-8">Pricing</p>
          <h2 className="font-bold text-3xl lg:text-5xl tracking-tight text-white">
            Start automating LinkedIn marketing today
          </h2>
        </div>

        <div className="relative flex justify-center flex-col lg:flex-row items-center lg:items-stretch">
          {config.stripe.plans.map((plan, index) => (
            <div
              key={`plan-${plan.name}-${index}`}
              className="relative w-full max-w-lg mx-auto"
            >
              <div className="relative flex flex-col h-full gap-5 lg:gap-8 z-10 bg-zinc-900 p-8 rounded-lg border border-red-500">
                <div className="flex justify-between items-center gap-4">
                  <div>
                    <p className="text-lg lg:text-xl font-bold text-white">
                      {plan.name}
                    </p>
                    {plan.description && (
                      <p className="text-white/80 mt-2">{plan.description}</p>
                    )}
                  </div>
                </div>
                <div className="flex gap-2 items-end">
                  {plan.priceAnchor && (
                    <div className="flex flex-col justify-end mb-[4px] text-lg">
                      <p className="relative">
                        <span className="absolute bg-white h-[1.5px] inset-x-0 top-[53%]"></span>
                        <span className="text-white/80">
                          ${plan.priceAnchor}
                        </span>
                      </p>
                    </div>
                  )}
                  <p className="text-5xl tracking-tight font-extrabold text-white">
                    ${plan.price}
                  </p>
                  <div className="flex flex-col justify-end mb-[4px]">
                    <p className="text-sm text-white/60 uppercase font-semibold">
                      {plan.priceDetails || "USD/month"}
                    </p>
                  </div>
                </div>
                {plan.features && (
                  <ul className="space-y-2.5 leading-relaxed text-base flex-1 text-white">
                    {plan.features.map((feature, i) => (
                      <li key={i} className="flex items-center gap-2">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          viewBox="0 0 20 20"
                          fill="currentColor"
                          className="w-[18px] h-[18px] opacity-80 shrink-0 text-white"
                        >
                          <path
                            fillRule="evenodd"
                            d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                            clipRule="evenodd"
                          />
                        </svg>

                        <span>
                          {typeof feature === "string" ? feature : feature.name}
                        </span>
                      </li>
                    ))}
                  </ul>
                )}
                <div className="space-y-2">
                  <ButtonCheckout
                    priceId={plan.priceId}
                    productLink={plan.link}
                    theme="red"
                  >
                    Get Started
                  </ButtonCheckout>

                  <p className="flex items-center justify-center gap-2 text-sm text-center text-white/80 font-medium relative">
                    $0.00 due today, cancel anytime
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      {/* TrackdeskScriptWrapper will handle the client reference ID functionality */}
      <TrackdeskScriptWrapper />
    </section>
  );
};

export default Pricing;

================
File: components/Problem.js
================
const Arrow = ({ extraStyle }) => {
  return (
    <svg
      className={`shrink-0 w-12 fill-blue-500/70 ${extraStyle}`}
      viewBox="0 0 138 138"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g>
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M72.9644 5.31431C98.8774 43.8211 83.3812 88.048 54.9567 120.735C54.4696 121.298 54.5274 122.151 55.0896 122.639C55.6518 123.126 56.5051 123.068 56.9922 122.506C86.2147 88.9044 101.84 43.3918 75.2003 3.80657C74.7866 3.18904 73.9486 3.02602 73.3287 3.44222C72.7113 3.85613 72.5484 4.69426 72.9644 5.31431Z"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M56.5084 121.007C56.9835 118.685 57.6119 115.777 57.6736 115.445C59.3456 106.446 59.5323 97.67 58.4433 88.5628C58.3558 87.8236 57.6824 87.2948 56.9433 87.3824C56.2042 87.4699 55.6756 88.1435 55.7631 88.8828C56.8219 97.7138 56.6432 106.225 55.0203 114.954C54.926 115.463 53.5093 121.999 53.3221 123.342C53.2427 123.893 53.3688 124.229 53.4061 124.305C53.5887 124.719 53.8782 124.911 54.1287 125.015C54.4123 125.13 54.9267 125.205 55.5376 124.926C56.1758 124.631 57.3434 123.699 57.6571 123.487C62.3995 120.309 67.4155 116.348 72.791 113.634C77.9171 111.045 83.3769 109.588 89.255 111.269C89.9704 111.475 90.7181 111.057 90.9235 110.342C91.1288 109.626 90.7117 108.878 89.9963 108.673C83.424 106.794 77.3049 108.33 71.5763 111.223C66.2328 113.922 61.2322 117.814 56.5084 121.007Z"
        />
      </g>
    </svg>
  );
};

const Step = ({ emoji, text, stats, color }) => {
  const colorClasses = {
    red: {
      bg: "bg-red-500/5",
      hoverBg: "hover:bg-red-500/10",
      border: "border-red-500/20",
      textColor: "text-red-400",
      boxBg: "bg-red-500/20",
    },
    blue: {
      bg: "bg-blue-500/5",
      hoverBg: "hover:bg-blue-500/10",
      border: "border-blue-500/20",
      textColor: "text-blue-400",
      boxBg: "bg-blue-500/20",
    },
    purple: {
      bg: "bg-purple-500/5",
      hoverBg: "hover:bg-purple-500/10",
      border: "border-purple-500/20",
      textColor: "text-purple-400",
      boxBg: "bg-purple-500/20",
    }
  };

  const colors = colorClasses[color] || colorClasses.red;

  return (
    <div className={`w-full md:w-48 flex flex-col gap-6 items-center justify-center p-6 ${colors.bg} ${colors.hoverBg} rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg border border-opacity-30 ${colors.border}`}>
      <div className="relative">
        <span className="text-7xl mb-3 relative z-10">{emoji}</span>
        <div className={`absolute -inset-3 rounded-full blur-md opacity-30 ${colors.boxBg}`}></div>
      </div>
      <div className={`${colors.boxBg} px-6 py-4 rounded-full w-full text-center shadow-inner`}>
        <h3 className={`font-bold ${colors.textColor} text-xl tracking-tight`}>{text}</h3>
      </div>
      {stats && (
        <p className={`text-base text-white/90 font-medium border-t ${colors.border} pt-5 w-full text-center leading-relaxed`}>
          {stats}
        </p>
      )}
    </div>
  );
};

// Problem Agitation: A crucial, yet overlooked, component for a landing page that sells.
// It goes under your Hero section, and above your Features section.
// Your Hero section makes a promise to the customer: "Our product will help you achieve XYZ".
// Your Problem section explains what happens to the customer if its problem isn't solved.
// The copy should NEVER mention your product. Instead, it should dig the emotional outcome of not fixing a problem.
// For instance:
// - Hero: "ShipFast helps developers launch startups fast"
// - Problem Agitation: "Developers spend too much time adding features, get overwhelmed, and quit." (not about ShipFast at all)
// - Features: "ShipFast has user auth, Stripe, emails all set up for you"
const Problem = () => {
  return (
    <section className="relative bg-gradient-to-b from-black via-gray-900 to-base-100 py-12">
      {/* Background Pattern */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-1/2 left-1/4 w-1/2 h-1/2 bg-red-500/5 rounded-full blur-3xl"></div>
        <div className="absolute bottom-1/3 right-1/4 w-1/3 h-1/3 bg-blue-500/5 rounded-full blur-3xl"></div>
        <div className="absolute top-1/3 right-1/4 w-1/4 h-1/4 bg-purple-500/5 rounded-full blur-3xl"></div>
        <div className="opacity-30 absolute inset-0 bg-[linear-gradient(to_right,#080808_1px,transparent_1px),linear-gradient(to_bottom,#080808_1px,transparent_1px)] bg-[size:38px_38px]"></div>
      </div>
      
      <div className="max-w-6xl mx-auto px-8 py-24 md:py-40 text-center relative z-10">
        {/* Section Badge */}
        <div className="inline-flex items-center gap-2 px-8 py-4 text-base rounded-full bg-gradient-to-r from-red-500/20 to-purple-500/20 text-red-400 font-medium mb-16 shadow-lg border border-red-500/10">
          <span className="relative flex h-3 w-3 mr-2">
            <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-500 opacity-75"></span>
            <span className="relative inline-flex rounded-full h-3 w-3 bg-red-500"></span>
          </span>
          <span className="text-lg font-bold tracking-wider uppercase">The SaaS Growth Bottleneck</span>
        </div>

        {/* Main Heading with BG Highlight */}
        <div className="relative mb-20 md:mb-28">
          <h2 className="max-w-4xl mx-auto font-extrabold text-5xl md:text-7xl tracking-tight text-white leading-tight">
            SaaS founders are <span className="text-transparent bg-clip-text bg-gradient-to-r from-red-400 via-pink-500 to-purple-500 px-3">wasting $10K+ monthly</span> on lead generation that never converts
          </h2>
          <div className="absolute -bottom-8 left-1/2 transform -translate-x-1/2 w-64 h-1 bg-gradient-to-r from-red-500 via-pink-500 to-purple-500 rounded-full"></div>
        </div>
        
        {/* Main Content with Better Visual Hierarchy */}
        <div className="max-w-3xl mx-auto mb-32">
          <h3 className="text-2xl font-bold text-white mb-10 opacity-80">The Hidden Cost of Traditional Marketing</h3>
          
          <div className="space-y-10">
            <p className="text-2xl text-gray-300 leading-relaxed">
              While your competitors connect directly with enterprise decision-makers, you&apos;re watching your limited runway 
              disappear into generic marketing channels.
            </p>
            
            {/* Key Stats Card */}
            <div className="bg-gradient-to-br from-red-900/20 to-purple-900/20 rounded-xl p-10 my-16 border border-red-500/20 shadow-xl transform hover:scale-[1.02] transition-transform duration-300">
              <div className="flex items-center justify-center gap-4 mb-6">
                <svg className="w-8 h-8 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
                <h4 className="text-2xl font-bold text-red-300 tracking-wide uppercase">The Hard Numbers</h4>
              </div>
              <p className="text-3xl text-white font-bold leading-relaxed">
                Every day without targeted B2B leads costs you 
                <span className="text-transparent bg-clip-text bg-gradient-to-r from-red-400 to-purple-400"> $330 in wasted spend </span>
                and delays your path to $1M ARR by weeks.
              </p>
            </div>
            
            <p className="text-2xl text-gray-300 leading-relaxed">
              Your product deserves to be in front of the right people — 
              <span className="italic text-white font-medium"> not buried on page 6 of Google.</span>
            </p>
          </div>
        </div>

        {/* 3-Step Process with Different Colors */}
        <div className="mb-32">
          <h3 className="text-2xl font-bold text-white mb-16 opacity-80">Three Critical Problems Facing SaaS Founders</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-3 justify-center items-start gap-10 md:gap-14">
            <div className="flex flex-col items-center gap-8">
              <Step 
                emoji="💸" 
                text="SaaS Ad Failure" 
                stats="76% of B2B ads never reach decision-makers"
                color="red"
              />
              <Arrow extraStyle="hidden md:block -rotate-90 translate-y-8" />
            </div>
            
            <div className="flex flex-col items-center gap-8">
              <Step 
                emoji="⏳" 
                text="Content Marketing Lag" 
                stats="12-18 months to see ROI"
                color="blue"
              />
              <Arrow extraStyle="hidden md:block -rotate-90 -scale-x-100 translate-y-8" />
            </div>
            
            <div className="flex flex-col items-center gap-8">
              <Step 
                emoji="📉" 
                text="Runway Depletion" 
                stats="3-6 months of wasted spend before pivot"
                color="purple"
              />
            </div>
          </div>
        </div>

        {/* Call to Action with Strong Visual Hierarchy */}
        <div className="max-w-4xl mx-auto bg-gradient-to-br from-gray-900 to-black py-16 px-8 rounded-2xl shadow-2xl border border-purple-500/10 relative overflow-hidden">
          {/* Decorative Elements */}
          <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-red-500 via-pink-500 to-purple-500"></div>
          <div className="absolute -top-24 -right-24 w-48 h-48 bg-purple-500 rounded-full opacity-20 blur-3xl"></div>
          <div className="absolute -bottom-24 -left-24 w-48 h-48 bg-red-500 rounded-full opacity-20 blur-3xl"></div>
          
          <div className="flex flex-col items-center gap-10 relative z-10">
            <h3 className="text-2xl font-bold text-white opacity-80 uppercase tracking-wider">The Solution</h3>
            
            {/* CTA Icon */}
            <div className="bg-gradient-to-r from-red-500 via-pink-500 to-purple-500 p-1.5 rounded-full shadow-lg shadow-purple-900/40 transform hover:scale-110 transition-transform duration-300">
              <svg
                className="w-16 h-16 text-white p-3.5 bg-black rounded-full"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M19 14l-7 7m0 0l-7-7m7 7V3"
                />
              </svg>
            </div>
            
            {/* CTA Heading */}
            <h3 className="text-4xl md:text-5xl font-extrabold text-white leading-tight">
              Your path to <span className="text-transparent bg-clip-text bg-gradient-to-r from-red-400 via-pink-500 to-purple-400">predictable SaaS revenue</span>
            </h3>
            
            {/* CTA Description */}
            <p className="text-2xl text-gray-300 max-w-2xl leading-relaxed mb-10">
              Connect directly with enterprise buyers who have the 
              <span className="font-bold text-white"> budget, authority, and urgent need </span>
              for your solution
            </p>
            
            {/* Visual Separator */}
            <div className="flex items-center justify-center w-full gap-3 opacity-60">
              <div className="h-px bg-purple-500/30 w-20"></div>
              <div className="h-1.5 w-1.5 bg-purple-500 rounded-full"></div>
              <div className="h-px bg-purple-500/30 w-20"></div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Problem;

================
File: components/SectionBiography.tsx
================
"use client";

import { Play, X } from "lucide-react";
import Image from "next/image";
import { motion } from "framer-motion";

function SectionBiography() {
  return (
    <section className="relative w-full py-16 md:py-24 bg-gradient-to-b from-base-200/50 to-base-100">
      <div className="container max-w-4xl mx-auto px-4 md:px-6">
        <div className="flex flex-col items-center text-center space-y-12">
          {/* Profile and Badge */}
          <div className="flex flex-col items-center space-y-6">
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ duration: 0.5 }}
              className="relative w-40 h-40 rounded-full overflow-hidden border-4 border-primary/20 shadow-xl"
            ></motion.div>
            <div className="flex flex-col items-center gap-3">
              <div className="inline-flex items-center gap-2 px-4 py-2 text-sm rounded-full bg-red-500/10 text-red-500 font-medium">
                <span className="relative flex h-2 w-2">
                  <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-500 opacity-75"></span>
                  <span className="relative inline-flex rounded-full h-2 w-2 bg-red-500"></span>
                </span>
                Building in Public
              </div>
              <a
                href="https://x.com/ProspectrApp"
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center gap-2 px-4 py-2 text-sm rounded-full bg-blue-500/10 text-blue-500 hover:bg-blue-500/20 transition-colors"
              >
                <X className="w-4 h-4" />
                @ProspectrApp
              </a>
            </div>
          </div>

          {/* Biography Content */}
          <div className="space-y-8 max-w-2xl">
            <h2 className="text-4xl font-bold tracking-tighter text-white">
              hey! I&apos;m Sumit, the founder of{" "}
              <span className="text-red-500">Prospectr</span>
            </h2>
            <div className="space-y-6 text-lg text-gray-400">
              <p>
                As a{" "}
                <span className="text-white font-semibold">
                  full-stack developer and entrepreneur
                </span>
                , I was frustrated with the time-consuming process of finding
                leads on LinkedIn.
                <span className="text-red-500 font-semibold">
                  {" "}
                  I was spending 2+ hours daily
                </span>{" "}
                just searching for potential clients.
              </p>
              <p>
                The existing tools were either{" "}
                <span className="text-white font-semibold">too expensive</span>{" "}
                ($200-$500/month) or{" "}
                <span className="text-white font-semibold">too complex</span>.
                For someone bootstrapping a business, these costs were just not
                justifiable.
              </p>
              <p>
                That&apos;s when I decided to build{" "}
                <span className="text-red-500 font-semibold">Prospectr</span> -
                a simple yet powerful LinkedIn automation tool.
              </p>
            </div>
          </div>

          {/* Video Section */}
          <div className="w-full space-y-6">
            <p className="text-lg font-medium text-center text-gray-300">
              See how Prospectr can transform your LinkedIn outreach 👇
            </p>
            <motion.div
              initial={{ y: 20, opacity: 0 }}
              whileInView={{ y: 0, opacity: 1 }}
              transition={{ duration: 0.5 }}
              className="relative aspect-video rounded-xl overflow-hidden bg-base-300 shadow-2xl"
            >
              <div className="absolute inset-0 flex items-center justify-center">
                <button
                  className="relative z-10 inline-flex items-center justify-center w-20 h-20 rounded-full bg-red-500 text-white hover:bg-red-600 transition-colors shadow-lg"
                  onClick={() => {
                    // Add video play logic here
                  }}
                >
                  <Play className="w-10 h-10" />
                </button>
              </div>
              <Image
                src="/images/prospectr-3d-static.webp"
                alt="Prospectr Demo"
                className="object-cover"
                fill
                sizes="(max-width: 768px) 100vw, 50vw"
                priority
              />
            </motion.div>
          </div>
        </div>
      </div>
    </section>
  );
}

export default SectionBiography;

================
File: components/Testimonial1Small.js
================
import Image from "next/image";

// A one or two sentences testimonial from a customer.
// Highlight the outcome for your customer (how did your product changed her/his life?) or the pain it's removing — Use <span className="bg-warning/25 px-1.5"> to highlight a part of the sentence
const Testimonial1Small = () => {
  return (
    <section className="bg-base-100">
      <div className="space-y-6 md:space-y-8 max-w-lg mx-auto px-8 py-16 md:py-32 ">
        <div className="rating !flex justify-center">
          {[...Array(5)].map((_, i) => (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className="w-5 h-5 text-warning"
              key={i}
            >
              <path
                fillRule="evenodd"
                d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z"
                clipRule="evenodd"
              />
            </svg>
          ))}
        </div>
        <div className="text-base leading-relaxed space-y-2 max-w-md mx-auto text-center">
          <p>
            <span className="bg-warning/25 px-1.5">
              I don&apos;t want to pay Stripe $2 for every invoice.
            </span>{" "}
            I don&apos;t want to spend 10 minutes manually crafting every
            invoice either.
          </p>
          <p>
            Zenvoice solved this problem once and for all. The app is simple,
            but it nails the job perfectly.
          </p>
        </div>
        <div className="flex justify-center items-center gap-3 md:gap-4">
          <Image
            className="w-10 h-10 md:w-12 md:h-12 rounded-full object-cover"
            src="https://images.unsplash.com/photo-1438761681033-6461ffad8d80?q=80&w=4140&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
            alt={`XYZ feedback for ZenVoice`}
            width={48}
            height={48}
          />
          <div>
            <p className="font-semibold">Someone Nice</p>
            <p className="text-base-content/80 text-sm">23.1K followers on 𝕏</p>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Testimonial1Small;

================
File: components/TestimonialRating.js
================
const TestimonialRating = () => {
  return (
    <div className="flex -gap-1 items-center mt-auto">
      <svg
        viewBox="0 0 773 1262"
        className="w-8 fill-base-content/40 rotate-12"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path d="M390 5.7334C310.667 41.7334 272.533 76.6667 257.867 126.8C255.6 134.8 254.933 141.333 254.4 161.6C253.733 185.2 253.867 186.8 256.533 191.067C258 193.467 260.8 196.267 262.667 197.067C275.2 202.8 307.333 193.6 329.333 178C339.467 170.8 355.733 153.867 363.067 142.667C370 132.133 380.4 110.933 385.333 97.3334C391.867 78.8001 398.267 52.0001 398.667 40.8001C398.933 34.8001 400.4 23.7334 401.867 16.0001C405.067 0.133402 405.067 6.88146e-05 403.733 6.88146e-05C403.067 6.88146e-05 396.933 2.66674 390 5.7334Z" />
        <path d="M183.6 52.2666C162.267 92.1333 150.133 124.533 145.2 154.667C142.267 172.267 143.467 213.333 147.333 228.933C152.267 249.733 163.333 270.667 174.667 281.2C179.6 285.733 181.467 286.667 186.133 286.667C197.333 286.667 210.4 273.867 220.8 252.667C228 238 234.533 215.067 233.467 208.667C232.8 205.6 232.933 205.067 234.133 206.667C235.2 208.267 235.467 208 234.8 205.333C234.533 203.467 234.667 196.267 235.2 189.333C237.2 166.4 233.733 141.867 224.533 114.667C219.067 98.1333 207.067 70.9333 197.733 53.5999L190.4 39.7333L183.6 52.2666Z" />
        <path d="M353.333 177.867C324.8 187.467 313.333 192.133 296.933 200.667C251.067 224.933 223.067 255.733 212.667 293.333C209.467 305.333 206.4 333.067 208 336.8C209.333 340 209.6 340.8 209.867 343.333C210.133 347.6 217.2 353.333 223.333 354.4C230.133 355.6 251.867 354 256.4 352C258 351.333 259.333 350.933 259.333 351.2C259.333 351.467 252.533 356.8 244.4 363.067C197.733 398.4 172.667 430.8 162.533 468.667C160.667 475.867 160 482.8 160 498.667C160 510 160.533 521.067 161.067 523.333C161.733 526.267 161.733 526.8 160.667 525.333C159.733 523.867 159.6 525.6 160.133 531.333C163.067 558.667 177.6 561.6 212.667 541.733C225.733 534.4 237.067 525.2 245.067 515.333C252.267 506.4 264 484.267 269.067 470C273.733 456.933 279.733 429.6 278.667 425.6C278.133 423.333 278.4 422.667 279.467 423.467C280.667 424.133 280.8 423.467 280.267 421.067C279.733 419.333 280.267 411.2 281.333 403.2C282.4 395.2 283.6 379.067 284 367.333C284.933 343.6 285.6 337.2 287.2 337.733C289.467 338.267 306 324.933 315.733 314.667C332 297.467 344.133 277.333 356.667 246.667C366.133 223.467 371.467 203.467 367.467 206C366.133 206.667 370.933 187.867 374.667 177.333C376.933 170.8 376.933 170.667 375.733 170.667C375.067 170.667 365.067 173.867 353.333 177.867Z" />
        <path d="M93.6 223.333C85.4667 250.533 83.0667 259.2 80.1333 272.667C74.1333 300.667 72.2667 319.6 73.3333 342C73.8667 352.933 74.2667 363.467 74.2667 365.333C74.4 379.867 80.4 403.467 87.6 418C95.3333 433.333 109.333 450.667 120.533 458.8C128.667 464.667 135.067 465.6 142.133 462C146.933 459.467 153.6 449.2 158.4 437.2C166.267 417.467 168 405.067 167.867 370.667C167.867 353.867 167.333 348 164.933 339.067C156.933 309.333 140.667 279.6 112.267 243.333C93.3333 219.2 94.5333 220.4 93.6 223.333Z" />
        <path d="M24.1333 436.933C24.8 447.067 25.3333 459.333 25.3333 464.267C25.3333 469.067 25.6 472.667 26 472C26.4 471.467 26.8 474.933 26.9333 479.733C27.2 491.733 33.0667 521.2 38.8 538.533C52.9333 582 77.4667 611.867 112.933 628.667C137.6 640.4 149.067 634.133 151.067 607.6C151.6 601.6 152 586.4 151.867 574C151.867 552 151.733 550.933 147.467 538.667C135.333 503.2 110 473.867 65.7333 444.267C54.2667 436.533 24.9333 418.667 23.8667 418.667C23.3333 418.667 23.6 426.933 24.1333 436.933Z" />
        <path d="M261.867 506.267C208.8 562.133 185.067 610.8 188 658C188.4 666 189.067 677.467 189.333 683.333C190.267 701.6 197.067 721.333 204.267 726C213.467 732.133 224 728.933 241.067 715.067C257.2 701.733 268.8 686.667 276.267 668.933C281.733 655.867 286.133 639.2 286.667 628.667C286.933 624.267 287.867 613.467 288.667 604.667C290.267 588.533 289.733 566 287.2 546.667C285.2 530.8 277.6 492 276.533 492C276 492 269.467 498.4 261.867 506.267Z" />
        <path d="M0.666656 607.6C0.666656 607.867 3.06666 612.933 6.13332 618.8C12.4 631.467 14.4 636.4 12.8 635.467C10.8 634.133 10.4 640.667 12 647.067C16.1333 663.2 47.3333 709.467 66.9333 728.133C83.4667 744 104.4 757.733 118 761.6C122.8 762.933 124.533 763.733 122 763.333C119.467 762.933 111.6 761.733 104.667 760.667C89.0667 758.4 57.6 756 41.0667 756H28.6667L35.7333 766.933C45.3333 781.867 45.3333 781.867 43.6 780.8C41.2 779.333 40.1333 786.267 41.8667 792C45.2 803.2 76.6667 842.133 95.7333 858.933C108.4 870 125.333 881.333 136.267 886.267C149.333 892 162.133 896 168.533 896.133L174.667 896.267L168.667 897.333C165.333 898 152.133 900.133 139.333 902.133C126.533 904.133 115.733 906 115.333 906.267C115.067 906.533 115.333 907.2 116 907.733C119.6 910.267 134.4 926.933 132.4 926.267C130 925.467 128.667 927.6 128.667 932.533C128.667 937.6 135.733 946.933 147.467 957.467C194 999.2 231.6 1017.47 272.667 1017.87C281.067 1017.87 290.133 1017.6 292.667 1016.93C295.2 1016.4 288 1019.2 276.667 1023.07C245.2 1034 235.333 1037.73 235.333 1038.67C235.333 1039.07 239.2 1042.4 244 1045.87C251.333 1051.2 257.6 1057.07 252.933 1054.13C251.2 1053.07 248.667 1057.33 248.667 1061.33C248.667 1074.53 313.467 1109.47 354 1118.13C370.667 1121.73 397.6 1121.47 413.2 1117.6C428.267 1113.87 448 1104.53 454.4 1098.27C459.6 1092.93 461.867 1086 459.467 1081.73C458.4 1079.47 458.933 1078.53 463.333 1075.2C466.267 1073.07 468.667 1070.93 468.667 1070.4C468.667 1069.87 465.2 1065.07 460.933 1059.73C439.333 1032.67 411.867 1016 379.867 1010.53C368 1008.53 330.8 1009.73 316.667 1012.53C299.2 1016 297.067 1016 308.8 1012.93C315.6 1011.2 322.4 1008.4 325.067 1006.27C330.133 1002.4 333.2 995.067 331.867 989.867C331.2 987.467 332 986.4 335.2 984.667C337.467 983.6 339.333 982.133 339.333 981.6C339.333 981.067 337.2 976.533 334.667 971.6C312.933 929.333 278.133 904.8 230.533 898.533C215.467 896.533 213.6 896 218.4 894.533C225.2 892.667 229.6 886.8 230.267 878.8C230.4 876.133 231.467 874.4 232.933 873.867C236 872.933 236 873.067 231.333 858.667C216.933 814.8 190.667 787.467 146 770.4C140.533 768.4 138.133 767.067 140.667 767.6C143.2 768.267 151.6 768.667 159.333 768.667C170.133 768.667 174.4 768.133 178.267 766.267C183.467 763.6 188 756.133 186.933 752C186.533 750.4 187.2 749.333 188.8 748.933C191.867 748.133 191.867 746.133 189.333 732.4C181.2 689.733 156.133 656.667 116.8 636.667C95.8667 626.133 64.2667 617.067 28 611.333C16.2667 609.6 5.33332 607.867 3.73332 607.467C1.99999 607.2 0.666656 607.2 0.666656 607.6Z" />
        <path d="M294.933 673.067C254.267 727.467 235.867 774 238.667 815.333C239.067 822.667 239.733 834 240 840.667C240.667 855.733 244 867.867 251.067 879.733C256.933 889.6 262.8 895.467 268.133 896.8C281.733 900.267 313.333 867.733 324.4 839.067C328.933 827.467 333.333 807.733 332.133 804.667C331.733 803.467 332 799.467 332.8 795.6C333.467 791.867 334.133 780 334.133 769.333C334.267 748.667 332.133 731.467 326.533 708.667C322.133 690.4 310.933 654.667 309.733 654.667C309.067 654.667 302.4 662.933 294.933 673.067Z" />
        <path d="M370 776.133C344.8 827.467 336.133 860.4 336.933 901.6C337.2 913.067 337.733 921.733 338.267 920.933C338.933 920 338.933 921.2 338.533 923.467C336 936.533 348.8 970.667 362.667 988.4C372.8 1001.2 381.467 1004.4 390.667 998.667C400 992.933 416.667 966.667 422.533 948.667C425.2 940.267 428.667 922.4 427.867 921.067C427.467 920.533 427.867 913.867 428.667 906.267C432.133 872 421.867 832.533 396.667 783.333C391.067 772.267 385.067 761.333 383.6 758.8L380.8 754.133L370 776.133Z" />
        <path d="M460 850.933C459.733 851.867 458.133 861.333 456.4 872C453.867 888.4 453.467 897.067 453.333 929.333C453.067 970.533 454.267 982.8 460 1003.33C468.8 1034.27 487.2 1060.67 511.733 1076.93C527.733 1087.6 536.933 1086.27 544.4 1072.4C549.2 1063.2 554.267 1045.07 554.8 1034.67C554.933 1030.67 555.467 1020.13 556 1011.33C557.2 993.333 555.867 982.933 550.533 966.133C541.733 938.4 524.133 912 493.333 880.133C473.733 859.867 460.8 848.533 460 850.933Z" />
        <path d="M574.133 973.6C581.067 990.8 583.333 997.467 582 996.667C581.2 996.133 580.667 998.267 580.667 1002.27C580.667 1012.67 596 1044 614.267 1070.8C642.933 1113.07 684.8 1138.67 725.2 1138.67C741.733 1138.67 747.333 1135.07 749.2 1123.73C749.333 1122.27 750.267 1120.67 751.2 1120.13C752.533 1119.2 752.667 1116.53 751.467 1107.07C742.667 1034.4 698 995.6 596.267 972.133C583.333 969.067 572.4 966.667 572 966.667C571.6 966.667 572.667 969.867 574.133 973.6Z" />
        <path d="M511.6 1090.8C485.867 1094.13 453.6 1107.33 422.667 1127.33C408.267 1136.53 380.8 1156.4 380.667 1157.47C380.667 1158 384.4 1159.6 389.067 1161.33C397.867 1164.53 401.333 1166.67 397.733 1166.67C396.4 1166.67 395.2 1168.27 394.667 1170.67C392.8 1179.33 400.667 1184.67 424.8 1191.2C501.067 1211.87 555.733 1203.6 594.133 1165.33C604.133 1155.47 607.6 1147.87 604.933 1142.13C603.733 1139.33 604.133 1138 608.8 1131.87C611.6 1128 614 1124.53 614 1124.13C614 1123.73 610.667 1120.93 606.667 1118C576.133 1095.73 544.133 1086.53 511.6 1090.8Z" />
        <path d="M674.667 1147.47C637.867 1153.6 596.4 1177.73 550 1219.6L542.8 1226.27L552.667 1229.33C558.133 1231.07 561.6 1232.67 560.4 1232.93C557.333 1233.73 555.867 1239.33 557.733 1243.33C559.867 1248 567.733 1251.47 582.8 1254.53C658.533 1269.87 711.867 1259.47 749.467 1222.13C758.667 1212.93 764.133 1204.8 764.667 1199.33C765.333 1193.73 764.667 1190.53 763.067 1191.47C761.467 1192.53 761.467 1192.4 768.267 1181.73C770.667 1177.87 772.667 1174.27 772.667 1173.47C772.667 1171.47 766.133 1167.33 753.067 1160.8C725.467 1146.93 701.6 1142.8 674.667 1147.47Z" />
      </svg>
      <div>
        <p className="text-base-content/80 text-sm text-center">
          1000+ happy users
        </p>
        <div className="flex flex-row justify-center gap-0 pt-1">
          {[...Array(5)].map((e, i) => (
            <span key={i}>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                className="w-4 h-4 text-yellow-500"
              >
                <path
                  fillRule="evenodd"
                  d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z"
                  clipRule="evenodd"
                />
              </svg>
            </span>
          ))}
        </div>
      </div>
      <svg
        className="w-8 fill-base-content/40 -rotate-12"
        viewBox="0 0 773 1262"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path d="M369.133 2.26663C371.667 12.1333 375.667 39.7333 374.6 39.0666C371.267 37.0666 378.067 67.8666 386.467 93.2C396.067 121.733 408.867 144.267 425.667 161.867C446.067 183.333 471.4 196.533 495.267 198.267C514.467 199.733 518.467 195.333 519.8 171.867C523.933 100.4 482.2 49.4666 384.2 5.99997C376.733 2.66663 370.2 -3.47677e-05 369.667 -3.47677e-05C369 -3.47677e-05 368.867 1.06663 369.133 2.26663Z" />
        <path d="M575.933 53.4666C558.067 86.9333 545.133 121.6 540.2 148.8C536.2 171.2 537.133 206.267 542.2 226C548.467 250.4 563.667 275.733 576.867 283.867C579.533 285.467 583.533 286.667 586.867 286.667C596.067 286.667 605.267 276.667 616.333 254.8C622.467 242.667 628.867 220 627.8 214.267C627.267 211.733 627.533 210.8 628.6 211.467C629.533 212.133 629.667 211.867 629.133 210.8C628.467 209.867 628.867 203.2 629.667 196C634.333 159.333 621.267 110.533 591.8 55.4666L583.4 39.7333L575.933 53.4666Z" />
        <path d="M397.667 171.333C397.667 172.133 402.2 188.133 406.6 203.2C407.133 204.933 406.867 205.333 405.667 204.667C404.333 203.867 404.067 205.2 404.6 210.8C406.2 226.133 426.067 272.133 440.2 293.467C443.933 299.067 451.267 308.267 456.6 314C466.733 324.933 487 341.2 487 338.533C487 337.6 487.267 337.2 487.667 337.6C488.467 338.267 491.533 396.133 491.4 406.667C491.267 411.733 491.667 413.2 492.333 411.333C493.133 409.6 493.267 410.933 492.733 414.667C491.933 422 497.533 450.4 503.133 467.2C508.333 482.8 520.067 505.467 527.933 515.333C535.933 525.2 547.267 534.4 560.333 541.733C581.667 553.733 594.467 557.067 602.867 552.667C608.6 549.733 612.867 540.4 611.933 532.933C611.533 529.867 611.667 528.267 612.2 529.2C612.867 530.133 613.267 528.133 613.4 524.4C613.4 520.933 613.533 509.867 613.667 500C614.067 476.8 610.067 459.2 600.067 439.6C588.6 416.933 561.267 387.2 530.733 364.133C513.933 351.467 507.667 346.267 515.4 351.2C519 353.6 541.667 355.733 549.667 354.4C555.8 353.333 562.867 347.6 563.133 343.333C563.533 339.6 563.667 338.933 564.733 337.867C566.333 336.267 565.8 318.4 563.667 306.533C558.6 277.067 546.733 255.467 523.533 233.333C499.4 210.267 457.533 188.4 411.133 174.667C405.8 173.067 400.467 171.467 399.533 171.067C398.467 170.667 397.667 170.8 397.667 171.333Z" />
        <path d="M671 230.933C651.8 255.733 647.4 261.6 639.267 274C614.333 312.133 603.533 345.067 604.6 380.8C604.733 389.733 605.533 396.8 606.067 396.4C606.6 396 606.733 397.333 606.2 399.2C604.2 407.333 612.867 437.067 621.267 451.067C626.867 460.267 632.2 464 639.933 464C647.4 464 658.733 455.333 670.333 441.067C680.333 428.4 686.733 416.8 691.667 402.267C698.333 382.4 699.667 368.933 699.533 329.333C699.4 305.867 698.867 299.467 695.933 284.133C692.467 266.267 680.333 221.333 679 221.467C678.6 221.467 675 225.733 671 230.933Z" />
        <path d="M734.467 427.333C664.334 469.6 630.334 508 622.2 554.667C620.067 567.333 620.2 597.2 622.467 603.333C623.134 604.933 623 605.467 622.067 604.933C619.934 603.6 623.8 621.867 626.6 626.667C632.334 636.533 643.4 636.8 662.334 627.467C692.467 612.533 714.467 588.133 728.6 553.6C737.267 532.4 746.334 494.267 744.867 485.467C744.467 482.8 744.6 481.333 745.267 482.267C745.934 483.067 746.334 481.2 746.334 477.6C746.467 474.133 747.134 462.933 748.067 452.667C749 442.4 749.934 430.533 750.334 426.267C750.734 422.133 750.467 418.667 749.934 418.667C749.4 418.667 742.467 422.533 734.467 427.333Z" />
        <path d="M495.267 498C486.733 535.2 484.067 559.733 484.6 594.267C484.867 609.733 485.267 622.267 485.667 622C486.067 621.733 486.467 624.933 486.467 629.067C486.733 638.4 492.067 658.933 497.533 670.933C507.667 693.467 528.6 716.133 548.333 726.133C560.333 732.133 569.667 728.933 575.533 716.933C582.733 702.133 585 685.6 584.867 648.667C584.867 631.2 584.333 627.067 581.267 615.733C571.933 581.733 549.267 545.733 513.8 509.067L496.733 491.467L495.267 498Z" />
        <path d="M765.667 608.133C734.734 612.933 721.134 615.467 706.334 619.333C641.8 635.6 604.867 665.467 589 714.267C585.534 724.8 581.4 746.533 582.6 748.267C582.867 748.933 584.467 749.333 586.067 749.467C587.667 749.467 588.2 749.867 587.4 750.267C585.134 751.067 585.267 755.333 587.667 759.867C591 766.4 597.667 768.667 614.334 768.667C622.467 768.667 630.867 768.133 633 767.6C635.267 766.933 631.267 768.8 624.2 771.733C606.067 779.067 590.867 788.533 578.734 799.867C561.667 815.867 549.8 834.933 542.467 858.4C538.2 871.867 538.2 873.067 542.067 874.667C543.667 875.333 544.334 875.867 543.534 875.867C542.467 876 542.334 877.467 542.867 880.4C544.867 889.2 548.334 893.067 555.4 894.667C559.534 895.6 559.534 895.6 556.334 896.267C554.467 896.667 546.734 898 539 899.2C496.067 906 465.267 926.667 443.8 963.067C440.467 968.667 436.867 975.333 435.8 977.867C433.934 982.267 433.934 982.267 438.867 985.067C441.534 986.667 443 988 442.334 988C440.334 988 440.067 993.2 441.8 998.4C443.667 1004 451.934 1010.13 459.134 1011.33C462.067 1011.87 464.334 1012.53 463.934 1012.8C463.667 1013.07 456.6 1012.4 448.2 1011.2C427.667 1008.27 395.534 1009.2 382.334 1012.93C353.534 1021.2 330.2 1037.47 309.667 1063.6L304.2 1070.53L309.534 1074.8C314.067 1078.4 314.734 1079.47 313.534 1081.6C311.267 1086 313.4 1092.93 318.6 1098.27C325 1104.53 344.734 1113.87 359.8 1117.6C375.4 1121.47 402.334 1121.73 419 1118.13C459 1109.6 524.334 1074.4 524.334 1061.47C524.334 1057.6 521.934 1053.07 520.2 1054C519.534 1054.53 519 1054.53 519 1054.27C519 1053.87 523.534 1050.4 529 1046.4C534.467 1042.53 539 1038.93 539 1038.53C539 1038.13 536.2 1036.8 532.734 1035.6C486.2 1019.6 476.467 1016.13 481 1016.93C488.867 1018.53 513.134 1018 522.334 1016.13C550.067 1010.4 580.6 995.067 607.134 973.2C639.267 946.667 649 934.133 642.467 927.6C640.734 926 641.667 924.4 649.267 916.133C654.067 910.8 657.8 906.4 657.534 906.133C657 905.867 643.267 903.467 609.667 898.133C600.334 896.533 599.4 896.267 604.467 896.133C610.867 896 623.667 892 636.6 886.267C655.134 878 679 859.333 696.734 839.333C710.6 823.733 726.734 802.133 729.934 794.933C732.734 788.667 732.734 781.733 729.934 782.4C727.8 782.8 728.6 781.2 737.667 766.933L744.334 756.667L734.734 756.267C722.6 755.733 686.467 758.133 669.667 760.667C645.8 764.133 645.8 764.133 654.2 761.867C666.6 758.4 686.734 745.867 702.867 731.2C728.6 708 765.134 650.533 761.934 638.4C761.667 637.067 760.867 636.4 760.2 636.8C758.6 637.733 760.6 632.8 767 620C770.067 614 772.334 608.667 772.067 608.133C771.8 607.6 769 607.6 765.667 608.133ZM641.267 766.133C640.867 766.533 639.667 766.667 638.734 766.267C637.667 765.867 638.067 765.467 639.534 765.467C641 765.333 641.8 765.733 641.267 766.133ZM469.267 1014.13C468.867 1014.53 467.667 1014.67 466.734 1014.27C465.667 1013.87 466.067 1013.47 467.534 1013.47C469 1013.33 469.8 1013.73 469.267 1014.13ZM474.6 1015.47C474.2 1015.87 473 1016 472.067 1015.6C471 1015.2 471.4 1014.8 472.867 1014.8C474.334 1014.67 475.134 1015.07 474.6 1015.47Z" />
        <path d="M457.933 670.4C451.8 689.067 445.667 712.933 442.2 731.333C439.8 743.867 438.467 800.533 440.6 799.2C441.133 798.8 441.267 800.267 440.867 802.533C439.8 807.867 443.667 826.4 448.6 839.067C458.6 865.067 488.2 897.333 501.933 897.333C509.533 897.333 518.467 888 525.533 872.667C532.6 857.733 534.467 842.8 534.2 804.667C534.067 788.667 533.533 782.533 531.133 773.6C522.333 740 503.667 704.933 474.733 667.6C469.533 660.8 464.867 654.933 464.467 654.4C463.933 653.867 461 661.067 457.933 670.4Z" />
        <path d="M387.133 764.133C370.6 793.333 356.467 826.267 350.333 849.733C345.133 869.867 344.067 880.933 344.867 906.533C345.8 938.133 350.067 954.133 363 975.467C381.133 1005.47 394.067 1008.93 410.333 988.4C422.867 972.267 433.133 946.667 434.467 928C434.733 923.2 435.533 913.2 436.2 905.733C439.667 867.333 428.733 825.733 400.733 770.133L392.733 754.133L387.133 764.133Z" />
        <path d="M291.533 868.933C253 906.8 233.533 934.533 223 966.533C218.733 979.867 215.667 1001.33 217 1010.53C217.4 1013.87 218.067 1022.67 218.333 1030C219.267 1052.4 227.133 1076.27 235.533 1081.6C245.8 1088 261.667 1080.13 281.8 1058.93C294.333 1045.87 302.6 1032.4 309.133 1014.8C314.067 1001.6 318.067 983.6 317 979.867C316.467 978.4 316.733 977.333 317.667 977.333C318.733 977.333 319 976.267 318.6 974.533C318.2 973.067 318.733 964.267 319.933 954.933C321.267 943.067 321.667 932 321.133 918C320.2 892.533 314.733 849.333 312.467 849.333C312.067 849.333 302.6 858.133 291.533 868.933Z" />
        <path d="M180.2 971.333C99 989.733 54.8667 1017.2 34.0667 1062.4C26.2 1079.33 19.4 1112.67 22.3333 1119.6C23 1120.93 23.6667 1123.47 23.9333 1125.2C25.6667 1135.2 31.8 1138.67 47.8 1138.67C89.9333 1138.67 131.133 1112.53 161.667 1066.27C176.333 1044.27 191.267 1013.6 192.067 1004.27C192.467 998.933 192.333 997.2 191.133 997.867C189.667 998.8 190.733 995.867 198.2 977.467C201.933 968.4 202.333 966.667 200.733 966.8C200.067 966.8 190.867 968.933 180.2 971.333Z" />
        <path d="M227.4 1091.2C206.733 1095.2 185.133 1104.67 167.933 1117.33L159 1124L164.333 1131.2C169.267 1137.73 169.667 1138.67 168.2 1141.87C165.4 1148 168.733 1155.33 178.867 1165.33C217.267 1203.6 271.933 1211.87 348.2 1191.2C372.2 1184.67 380.2 1179.33 378.333 1170.8C377.933 1168.67 376.467 1166.67 375.267 1166.4C374.067 1166.13 377.667 1164 383.4 1161.73L393.933 1157.73L377.133 1145.47C336.6 1115.73 303.8 1099.2 273.133 1092.8C258.067 1089.73 238.867 1089.07 227.4 1091.2Z" />
        <path d="M58.8667 1147.47C53.2667 1148.4 44.3333 1150.8 38.8667 1152.8C28.7333 1156.4 8.73332 1166.27 3.26665 1170.53L0.0666504 1172.93L5.53332 1181.73C8.46665 1186.67 10.3333 1190.67 9.66665 1190.67C7.26665 1190.67 8.19998 1201.33 11.1333 1206.8C12.6 1209.73 18.2 1216.53 23.4 1221.87C60.6 1259.47 114.333 1270 190.2 1254.53C205.267 1251.47 213.133 1248 215.267 1243.33C217.133 1239.33 215.667 1233.73 212.6 1233.07C211.4 1232.67 215 1231.07 220.733 1229.2L231.133 1226L218.733 1215.2C170.467 1173.47 135.8 1153.87 98.4667 1147.33C84.3333 1144.93 72.6 1144.93 58.8667 1147.47Z" />
      </svg>
    </div>
  );
};

export default TestimonialRating;

================
File: components/Testimonials1.js
================
import Image from "next/image";
import CompanyLogo from "./CompanyLogo";

// A beautiful single testimonial with a user name and and company logo logo
const Testimonial = () => {
  return (
    <section
      className="relative isolate overflow-hidden bg-gradient-to-b from-gray-900 to-base-100 px-8 py-24 sm:py-32"
      id="featured-testimonial"
    >
      {/* Background effects */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-1/3 right-1/4 w-1/3 h-1/3 bg-red-500/10 rounded-full blur-3xl"></div>
        <div className="absolute bottom-1/4 left-1/3 w-1/4 h-1/4 bg-purple-500/10 rounded-full blur-3xl"></div>
        <div className="opacity-30 absolute inset-0 bg-[linear-gradient(to_right,#080808_1px,transparent_1px),linear-gradient(to_bottom,#080808_1px,transparent_1px)] bg-[size:38px_38px]"></div>
      </div>
      
      <div className="mx-auto max-w-2xl lg:max-w-5xl relative z-10">
        {/* Section Badge */}
        <div className="flex justify-center mb-16">
          <div className="inline-flex items-center gap-2 px-8 py-4 text-base rounded-full bg-gradient-to-r from-red-500/20 to-purple-500/20 text-red-400 font-medium shadow-lg border border-red-500/10">
            <span className="relative flex h-3 w-3 mr-2">
              <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-500 opacity-75"></span>
              <span className="relative inline-flex rounded-full h-3 w-3 bg-red-500"></span>
            </span>
            <span className="text-lg font-bold tracking-wider uppercase">Featured Testimonial</span>
          </div>
        </div>
        
        <figure className="mt-10">
          <div className="flex flex-col lg:flex-row items-center gap-12">
            <div className="relative">
              {/* Glow effect behind image */}
              <div className="absolute -inset-1 bg-gradient-to-r from-red-500/30 via-pink-500/30 to-purple-500/30 rounded-xl blur-md"></div>
              
              <div className="relative rounded-xl border border-base-content/5 bg-base-content/5 p-1.5 sm:-rotate-1 transform hover:rotate-0 transition-transform duration-300">
                <Image
                  width={320}
                  height={320}
                  className="rounded-lg max-w-[320px] md:max-w-[280px] lg:max-w-[320px] object-center border-2 border-white/10 shadow-md"
                  // Ideally, load from a statically generated image for better SEO performance
                  src="https://images.unsplash.com/photo-1560250097-0b93528c311a?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2574&q=80"
                  alt="A testimonial from David Thompson, VP of Sales at TechGrowth"
                />
              </div>
            </div>

            <div className="bg-gradient-to-br from-red-900/10 to-purple-900/10 rounded-xl p-8 border border-red-500/10 shadow-xl">
              <blockquote className="text-xl font-medium leading-8 text-white sm:text-2xl sm:leading-10 relative">
                <span className="absolute -top-6 -left-2 text-6xl text-red-500/20">"</span>
                I was skeptical at first about automation tools for LinkedIn, but Prospectr is different. It&apos;s not just about mass messaging - it&apos;s about <span className="text-transparent bg-clip-text bg-gradient-to-r from-red-400 via-pink-500 to-purple-400 font-bold">smart targeting and personalized outreach at scale</span>. Our sales team has seen a <span className="font-bold text-white">230% increase in qualified leads</span> since implementing Prospectr. The ROI has been exceptional.
                <span className="absolute -bottom-6 -right-2 text-6xl text-purple-500/20">"</span>
              </blockquote>
              
              <div className="h-px w-full bg-gradient-to-r from-red-500/30 via-pink-500/30 to-purple-500/30 my-8"></div>
              
              <figcaption className="flex items-center justify-start gap-5">
                <div className="text-base">
                  <div className="font-semibold text-white mb-0.5">
                    David Thompson
                  </div>
                  <div className="text-gray-300">
                    VP of Sales, TechGrowth Inc.
                  </div>
                </div>

                {/* Using the CompanyLogo component */}
                <div className="bg-white/5 p-2 rounded-lg">
                  <CompanyLogo 
                    name="" 
                    width={100}
                    height={40}
                    className="w-24"
                  />
                </div>
              </figcaption>
            </div>
          </div>
        </figure>
      </div>
    </section>
  );
};

export default Testimonial;

================
File: components/Testimonials11.js
================
"use client";

import { useState, useEffect, useRef } from "react";
import Image from "next/image";
import config from "@/config";

// Use this object to add an icon to the testimonial (optional) like the Product Hunt logo for instance. Only change the values if you add more referrings sites (currently Twitter & Product Hunt)
const refTypes = {
  productHunt: {
    id: "product_hunt",
    ariaLabel: "See user review on Product Hunt",
    svg: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 26.245 26.256"
        className="w-[18px] h-[18px]"
      >
        <path
          d="M26.254 13.128c0 7.253-5.875 13.128-13.128 13.128S-.003 20.382-.003 13.128 5.872 0 13.125 0s13.128 5.875 13.128 13.128"
          fill="#da552f"
        />
        <path
          d="M14.876 13.128h-3.72V9.2h3.72c1.083 0 1.97.886 1.97 1.97s-.886 1.97-1.97 1.97m0-6.564H8.53v13.128h2.626v-3.938h3.72c2.538 0 4.595-2.057 4.595-4.595s-2.057-4.595-4.595-4.595"
          fill="#fff"
        />
      </svg>
    ),
  },
  twitter: {
    id: "twitter",
    ariaLabel: "See user post on Twitter",
    svg: (
      <svg
        className="w-5 h-5 fill-[#00aCee]"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path d="M19.633 7.997c.013.175.013.349.013.523 0 5.325-4.053 11.461-11.46 11.461-2.282 0-4.402-.661-6.186-1.809.324.037.636.05.973.05a8.07 8.07 0 0 0 5.001-1.721 4.036 4.036 0 0 1-3.767-2.793c.249.037.499.062.761.062.361 0 .724-.05 1.061-.137a4.027 4.027 0 0 1-3.23-3.953v-.05c.537.299 1.16.486 1.82.511a4.022 4.022 0 0 1-1.796-3.354c0-.748.199-1.434.548-2.032a11.457 11.457 0 0 0 8.306 4.215c-.062-.3-.1-.611-.1-.923a4.026 4.026 0 0 1 4.028-4.028c1.16 0 2.207.486 2.943 1.272a7.957 7.957 0 0 0 2.556-.973 4.02 4.02 0 0 1-1.771 2.22 8.073 8.073 0 0 0 2.319-.624 8.645 8.645 0 0 1-2.019 2.083z"></path>
      </svg>
    ),
  },
  video: {
    id: "video",
  },
  other: { id: "other" },
};

// The list of your testimonials. It needs 11 items to fill the grid. The last one (11th) is featured on large devices (span 2 columns + big font)
const list = [
  {
    // Optional, use for social media like Twitter. Does not link anywhere but cool to display
    username: "marclou",
    // REQUIRED
    name: "Marc Lou",
    // REQUIRED
    text: "Really easy to use. The tutorials are really useful and explains how everything works. Hope to ship my next project really fast!",
    // REQUIRED — use refTypes.other if you don't want to display an icon
    type: refTypes.twitter,
    // Optional, link to the person's testimonial. It's more trustable
    link: "https://twitter.com/marc_louvion",
    // Optional, a statically imported image (usually from your public folder—recommended) or a link to the person's avatar. Shows a fallback letter if not provided
    img: "https://pbs.twimg.com/profile_images/1514863683574599681/9k7PqDTA_400x400.jpg",
    // You can display video testimonials to build more trust. Just swap the type above to "video" and add at least the video source below
    // videoSrc: "/jack.mp4"
  },
  {
    username: "the_mcnaveen",
    name: "Naveen",
    text: "Setting up everything from the ground up is a really hard, and time consuming process. What you pay for will save your time for sure.",
    type: refTypes.twitter,
    link: "https://twitter.com/the_mcnaveen",
  },
  {
    username: "wahab",
    name: "Wahab Shaikh",
    text: "Easily saves 15+ hrs for me setting up trivial stuff. Now, I can directly focus on shipping features rather than hours of setting up the same technologies from scratch. Feels like a super power! :D",
    type: refTypes.productHunt,
    link: "https://www.producthunt.com/products/shipfast-2/reviews?review=667971",
  },
  {
    name: "Sean",
    text: "Just purchased and cloned and *holy shit!* I realllyyy like what I'm seeing here!",
    type: refTypes.other,
  },
  {
    username: "krishna",
    name: "Krishna Kant",
    text: "Finally a good boilerplate for Nextjs, now I dont have to cry about it comparing with laravel ecosystem.",
    type: refTypes.productHunt,
    link: "https://www.producthunt.com/posts/shipfast-2?comment=2707061",
  },
  {
    username: "imgyf",
    name: "Yifan Goh",
    text: "It's a game changer  🚀 Comes with easy to follow tutorial, and saves you a ton of time. What's not to love?",
    type: refTypes.twitter,
    link: "https://twitter.com/imgyf/status/1697549891080532236?s=20",
  },
  {
    name: "Yazdun",
    text: "Yo Marc, I got the boilerplate, it's fantastic man you just save me 10 hours on each project",
    type: refTypes.other,
  },
  {
    name: "Marc Lou",
    text: "The tool is exactly what I didn't even know I needed.",
    videoPoster: "https://d1wkquwg5s1b04.cloudfront.net/demo/marcPoster.jpg",
    videoSrc: "https://d1wkquwg5s1b04.cloudfront.net/demo/marcVideo.mp4",
    videoHeight: 250,
    videoWidth: 500,
    videoType: "video/mp4",
    type: refTypes.video,
  },
  {
    username: "zawwadx",
    name: "Zawwad Ul Sami",
    text: "It's an amazing minimalist, lightweight boilerplate with well-organized code. It has almost all the core features you would want in a SaaS boilerplate. As a new team last year it actually took us months to build a similar set of features at a stable level.",
    type: refTypes.twitter,
  },
  {
    username: "dan",
    name: "Dan Mindru",
    text: "Probably one of the most powerful things you can 'npm install' that I've seen",
    type: refTypes.productHunt,
    link: "https://www.producthunt.com/posts/shipfast-2?comment=2706763",
  },
  // The last testimonial is featured on big devices (span 2 columns + big font) 👇
  {
    username: "VicPivots",
    name: "Victor Abeledo",
    text: "Marc, I got your boilerplate and having the payments setup with Stripe + user auth is a blessing. This will save me like a week of work for each new side project I spin up. I appreciate that is well documented, as well. 100% worth it 🚀🚀🚀",
    type: refTypes.twitter,
    link: "https://twitter.com/VicPivots/status/1697352442986250413?s=20",
  },
];

// A single testimonial, to be rendered in  a list
const Testimonial = ({ i }) => {
  const testimonial = list[i];

  if (!testimonial) return null;

  if (testimonial.type === refTypes.video) {
    return <VideoTestimonial i={i} />;
  }

  return (
    <li key={i}>
      <figure className="relative h-full p-6 bg-base-100 rounded-lg">
        <blockquote className="relative">
          <p className="text-sm text-base-content/80">{testimonial.text}</p>
        </blockquote>
        <figcaption className="relative flex items-center justify-start gap-4 pt-4 mt-4 border-t border-base-content/5">
          <div className="overflow-hidden rounded-full bg-base-300 shrink-0">
            {testimonial.img ? (
              <Image
                className="w-10 h-10 rounded-full object-cover"
                src={list[i].img}
                alt={`${list[i].name}'s testimonial for ${config.appName}`}
                width={48}
                height={48}
              />
            ) : (
              <span className="w-10 h-10 rounded-full flex justify-center items-center text-lg font-medium bg-base-300">
                {testimonial.name.charAt(0)}
              </span>
            )}
          </div>
          <div className="w-full flex items-end justify-between gap-2">
            <div>
              <div className="text-sm font-medium text-base-content">
                {testimonial.name}
              </div>
              {testimonial.username && (
                <div className="mt-0.5 text-sm text-base-content/80">
                  @{testimonial.username}
                </div>
              )}
            </div>

            {testimonial.link && testimonial.type?.svg && (
              <a
                href={testimonial.link}
                target="_blank"
                className="shrink-0 "
                aria-label={testimonial.type?.ariaLabel}
              >
                {testimonial.type?.svg}
              </a>
            )}
          </div>
        </figcaption>
      </figure>
    </li>
  );
};

// A video tesionial to build trust. 2 or 3 on a wall of love is perfect.
const VideoTestimonial = ({ i }) => {
  const vidRef = useRef(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (vidRef.current?.readyState != 0) {
      setIsLoading(false);
    }
  }, [vidRef?.current?.readyState]);

  const handlePlayVideo = () => {
    if (isPlaying) {
      vidRef.current.pause();
      setIsPlaying(false);
    } else {
      vidRef.current.play();
      setIsPlaying(true);

      if (vidRef.current?.readyState === 0) setIsLoading(true);
    }
  };

  const testimonial = list[i];

  if (!testimonial) return null;

  return (
    <li
      key={i}
      className="break-inside-avoid max-md:flex justify-center bg-base-100 rounded-lg overflow-hidden flex flex-col"
    >
      <div className="relative w-full">
        {isLoading && (
          <span className="z-40 !h-24 !w-24 !bg-gray-50 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 loading loading-ring"></span>
        )}
        <video
          className="w-full"
          ref={vidRef}
          poster={testimonial.videoPoster}
          preload="metadata"
          playsInline
          width={testimonial.videoWidth}
          height={testimonial.videoHeight}
          onLoadedData={() => {
            console.log("Video is loaded!");
            setIsLoading(false);
          }}
        >
          <source
            src={testimonial.videoSrc}
            type={testimonial.videoType || "video/mp4"}
          />
          Your browser does not support the videos
        </video>

        {!isPlaying && (
          <div className="absolute bottom-0 -inset-x-4 bg-gray-900/50 blur-lg h-24 translate-y-1/4 animate-opacity"></div>
        )}

        <div className="absolute w-full bottom-0 z-20">
          <div className="flex justify-between items-end p-4">
            <button
              className="group cursor-pointer"
              type="button"
              title="Play video"
              aria-label="Play video"
              onClick={handlePlayVideo}
            >
              {isPlaying ? (
                // PAUSE
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                  className=" w-14 h-14 fill-gray-50 group-hover:scale-[1.05] duration-100 ease-in drop-shadow-lg animate-opacity"
                >
                  <path
                    fillRule="evenodd"
                    d="M6.75 5.25a.75.75 0 0 1 .75-.75H9a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H7.5a.75.75 0 0 1-.75-.75V5.25Zm7.5 0A.75.75 0 0 1 15 4.5h1.5a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H15a.75.75 0 0 1-.75-.75V5.25Z"
                    clipRule="evenodd"
                  />
                </svg>
              ) : (
                // PLAY
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                  className="w-14 h-14 fill-gray-50 group-hover:scale-[1.05] duration-100 ease-in drop-shadow-lg animate-opacity"
                >
                  <path
                    fillRule="evenodd"
                    d="M4.5 5.653c0-1.427 1.529-2.33 2.779-1.643l11.54 6.347c1.295.712 1.295 2.573 0 3.286L7.28 19.99c-1.25.687-2.779-.217-2.779-1.643V5.653Z"
                    clipRule="evenodd"
                  />
                </svg>
              )}
            </button>

            {!isPlaying && (
              <div className="animate-opacity text-right">
                <p className="text-gray-50 font-medium drop-shadow">
                  {testimonial.name}
                </p>
                <div className="rating">
                  {[...Array(5)].map((_, i) => (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      className="w-5 h-5 text-accent drop-shadow"
                      key={i}
                    >
                      <path
                        fillRule="evenodd"
                        d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z"
                        clipRule="evenodd"
                      />
                    </svg>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="relative z-20 bg-accent text-accent-content text-base leading-tight font-medium p-4 select-none">
        <p>&quot;{testimonial.text}&quot;</p>
      </div>
    </li>
  );
};

const Testimonials11 = () => {
  return (
    <section className="bg-base-200" id="testimonials">
      <div className="py-24 px-8 max-w-7xl mx-auto">
        <div className="flex flex-col text-center w-full mb-20">
          <div className="mb-8">
            <h2 className="sm:text-5xl text-4xl font-extrabold text-base-content">
              212 makers are already shipping faster!
            </h2>
          </div>
          <p className="lg:w-2/3 mx-auto leading-relaxed text-base text-base-content/80">
            Don&apos;t take our word for it. Here&apos;s what they have to say
            about {config.appName}.
          </p>
        </div>

        <ul
          role="list"
          className="grid max-w-2xl grid-cols-1 gap-6 mx-auto sm:gap-8 md:grid-cols-2 lg:max-w-none lg:grid-cols-4"
        >
          <li>
            <ul role="list" className="flex flex-col gap-y-6 sm:gap-y-8">
              {[...Array(3)].map((e, i) => (
                <Testimonial key={i} i={i} />
              ))}
            </ul>
          </li>

          <li className="hidden md:grid order-none md:order-first lg:order-none col-span-2 grid-cols-1 md:grid-cols-2 gap-6 sm:gap-8">
            {/* BIG FEATURED TESTIMONIAL — THE LAST ONE IN THE LIST (11th) */}
            <ul className="col-span-2">
              <li>
                <figure className="relative h-full p-6 bg-base-100 rounded-lg">
                  <blockquote className="relative p-4">
                    <p className="text-lg font-medium text-base-content">
                      {list[list.length - 1].text}
                    </p>
                  </blockquote>
                  <figcaption className="relative flex items-center justify-start gap-4 pt-4 mt-4 border-t border-base-content/5">
                    <div className="overflow-hidden rounded-full bg-base-300 shrink-0">
                      {list[list.length - 1].img ? (
                        <Image
                          className="w-12 h-12 rounded-full object-cover"
                          src={list[list.length - 1].img}
                          alt={`${
                            list[list.length - 1].name
                          }'s testimonial for ${config.appName}`}
                          width={48}
                          height={48}
                        />
                      ) : (
                        <span className="w-12 h-12 rounded-full flex justify-center items-center text-xl font-medium bg-base-300">
                          {list[list.length - 1].name.charAt(0)}
                        </span>
                      )}
                    </div>
                    <div>
                      <div className="text-base font-medium text-base-content">
                        {list[list.length - 1].name}
                      </div>
                      {list[list.length - 1].username && (
                        <div className="mt-1 text-base text-base-content/80">
                          @{list[list.length - 1].username}
                        </div>
                      )}
                    </div>
                  </figcaption>
                </figure>
              </li>
            </ul>
            <ul role="list" className="flex flex-col gap-y-6 sm:gap-y-8">
              {[...Array(2)].map((e, i) => (
                <Testimonial key={i} i={i + 3} />
              ))}
            </ul>
            <ul role="list" className="flex flex-col gap-y-6 sm:gap-y-8">
              {[...Array(2)].map((e, i) => (
                <Testimonial key={i} i={i + 5} />
              ))}
            </ul>
          </li>
          <li>
            <ul role="list" className="flex flex-col gap-y-6 sm:gap-y-8">
              {[...Array(3)].map((e, i) => (
                <Testimonial key={i} i={i + 7} />
              ))}
            </ul>
          </li>
        </ul>
      </div>
    </section>
  );
};

export default Testimonials11;

================
File: components/Testimonials3.js
================
import Image from "next/image";
import config from "@/config";

// The list of your testimonials. It needs 3 items to fill the row.
const list = [
  {
    // Optional, use for social media like Twitter. Does not link anywhere but cool to display
    username: "sarahsales",
    // REQUIRED
    name: "Sarah Johnson",
    // REQUIRED
    text: "Prospectr has revolutionized my LinkedIn outreach. I used to spend hours manually searching for leads, but now I can automate the entire process. My connection rate has improved by 45% in just one month!",
    // Optional, a statically imported image (usually from your public folder—recommended) or a link to the person's avatar. Shows a fallback letter if not provided
    img: "https://images.unsplash.com/photo-1534528741775-53994a69daeb?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3276&q=80",
  },
  {
    username: "michaelb2b",
    name: "Michael Chen",
    text: "As a B2B sales consultant, finding the right prospects is everything. Prospectr's smart targeting features have helped me connect with decision-makers who are actually interested in my services. It's saved me countless hours of wasted outreach.",
    img: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=774&q=80",
  },
  {
    username: "emilyceo",
    name: "Emily Rodriguez",
    text: "The personalized message templates in Prospectr are a game-changer. I'm getting 3x more responses because my outreach doesn't feel automated anymore. The analytics dashboard also helps me understand which strategies are working best.",
    img: "https://images.unsplash.com/photo-1517841905240-472988babdf9?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=774&q=80",
  },
];

// A single testimonial, to be rendered in a list
const Testimonial = ({ i }) => {
  const testimonial = list[i];

  if (!testimonial) return null;

  // Define color variations for each card
  const colorVariants = [
    "from-red-500/20 to-pink-500/20 border-red-500/20 shadow-red-500/10", // Red variant
    "from-pink-500/20 to-purple-500/20 border-purple-500/20 shadow-purple-500/10", // Purple variant
    "from-purple-500/20 to-blue-500/20 border-blue-500/20 shadow-blue-500/10", // Blue variant
  ];

  // Get the color variant for this testimonial
  const colorVariant = colorVariants[i % colorVariants.length];

  return (
    <li key={i} className="w-full">
      <figure className={`relative h-full p-6 md:p-8 bg-gradient-to-br rounded-2xl max-md:text-sm flex flex-col transform hover:scale-[1.02] transition-all duration-300 overflow-hidden group border border-opacity-30 shadow-lg ${colorVariant}`}>
        {/* Glow effect */}
        <div className={`absolute -inset-0.5 bg-gradient-to-r ${colorVariant.split(' ')[0]} ${colorVariant.split(' ')[1]} opacity-30 blur-md group-hover:opacity-50 transition-opacity duration-300`}></div>
        
        {/* Background pattern */}
        <div className="absolute inset-0 opacity-5 bg-[linear-gradient(to_right,#fff_1px,transparent_1px),linear-gradient(to_bottom,#fff_1px,transparent_1px)] bg-[size:20px_20px]"></div>
        
        <div className="relative z-10">
          {/* Quote icon */}
          <div className="absolute top-2 right-2 text-4xl opacity-10 text-white">"</div>
          
          <blockquote className="relative flex-1">
            <p className="text-white leading-relaxed">
              {testimonial.text.split(' ').map((word, idx) => {
                // Highlight key metrics with gradient text
                if (word.includes('45%') || word.includes('3x') || word.includes('countless')) {
                  return <span key={idx} className="text-transparent bg-clip-text bg-gradient-to-r from-red-400 via-pink-500 to-purple-400 font-bold"> {word} </span>;
                }
                return <span key={idx}> {word}</span>;
              })}
            </p>
          </blockquote>
          
          <div className="h-px w-full bg-white/10 my-6"></div>
          
          <figcaption className="relative flex items-center justify-start gap-4 pt-2 md:gap-6">
            <div className="w-full flex items-center justify-between gap-2">
              <div>
                <div className="font-medium text-white md:mb-0.5">
                  {testimonial.name}
                </div>
                {testimonial.username && (
                  <div className="mt-0.5 text-sm text-white/60">
                    @{testimonial.username}
                  </div>
                )}
              </div>

              <div className="overflow-hidden rounded-full shrink-0 relative">
                {/* Glow effect for avatar */}
                <div className="absolute -inset-0.5 bg-gradient-to-r from-red-500 to-purple-500 rounded-full blur-sm opacity-70"></div>
                
                <div className="relative">
                  {testimonial.img ? (
                    <Image
                      className="w-10 h-10 md:w-12 md:h-12 rounded-full object-cover border-2 border-black"
                      src={list[i].img}
                      alt={`${list[i].name}'s testimonial for ${config.appName}`}
                      width={48}
                      height={48}
                    />
                  ) : (
                    <span className="w-10 h-10 md:w-12 md:h-12 rounded-full flex justify-center items-center text-lg font-medium bg-gradient-to-br from-red-500 to-purple-500 text-white">
                      {testimonial.name.charAt(0)}
                    </span>
                  )}
                </div>
              </div>
            </div>
          </figcaption>
        </div>
      </figure>
    </li>
  );
};

const Testimonials3 = () => {
  return (
    <section id="testimonials" className="relative bg-gradient-to-b from-black via-gray-900 to-base-100 overflow-hidden">
      {/* Background effects */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-1/4 left-1/4 w-1/2 h-1/2 bg-red-500/5 rounded-full blur-3xl transform -translate-x-1/4 -translate-y-1/4"></div>
        <div className="absolute bottom-0 right-0 w-1/2 h-1/2 bg-purple-500/5 rounded-full blur-3xl transform translate-x-1/4 translate-y-1/4"></div>
        <div className="opacity-30 absolute inset-0 bg-[linear-gradient(to_right,#080808_1px,transparent_1px),linear-gradient(to_bottom,#080808_1px,transparent_1px)] bg-[size:38px_38px]"></div>
      </div>
      
      <div className="py-24 px-8 max-w-7xl mx-auto relative z-10">
        <div className="flex flex-col text-center w-full mb-20">
          {/* Section Badge */}
          <div className="flex justify-center mb-10">
            <div className="inline-flex items-center gap-2 px-8 py-4 text-base rounded-full bg-gradient-to-r from-red-500/20 to-purple-500/20 text-red-400 font-medium shadow-lg border border-red-500/10">
              <span className="relative flex h-3 w-3 mr-2">
                <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-500 opacity-75"></span>
                <span className="relative inline-flex rounded-full h-3 w-3 bg-red-500"></span>
              </span>
              <span className="text-lg font-bold tracking-wider uppercase">Success Stories</span>
            </div>
          </div>
          
          <div className="mb-8">
            <h2 className="sm:text-5xl text-4xl font-extrabold text-white">
              Trusted by sales professionals <span className="text-transparent bg-clip-text bg-gradient-to-r from-red-400 via-pink-500 to-purple-400">worldwide</span>
            </h2>
          </div>
          <p className="lg:w-2/3 mx-auto leading-relaxed text-base text-gray-300">
            Don&apos;t take our word for it. See what our customers have to say about how Prospectr has transformed their LinkedIn prospecting.
          </p>
        </div>

        <ul
          role="list"
          className="flex flex-col items-center lg:flex-row lg:items-stretch gap-6 lg:gap-8"
        >
          {[...Array(3)].map((e, i) => (
            <Testimonial key={i} i={i} />
          ))}
        </ul>
      </div>
    </section>
  );
};

export default Testimonials3;

================
File: components/TestimonialsAvatars.js
================
import Image from "next/image";

const avatars = [
  {
    alt: "User",
    // Ideally, load from a statically generated image for better SEO performance (import userImage from "@/public/userImage.png")
    src: "https://images.unsplash.com/photo-1534528741775-53994a69daeb?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3276&q=80",
  },
  {
    alt: "User",
    src: "https://images.unsplash.com/photo-1517841905240-472988babdf9?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=774&q=80",
  },
  {
    alt: "User",
    src: "https://images.unsplash.com/photo-1539571696357-5a69c17a67c6?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=774&q=80",
  },
  {
    alt: "User",
    src: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=774&q=80",
  },
  {
    alt: "User",
    src: "https://images.unsplash.com/photo-1488161628813-04466f872be2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3376&q=80",
  },
];

const TestimonialsAvatars = ({ priority = false }) => {
  return (
    <div className="flex flex-col md:flex-row justify-center items-center md:items-start gap-3">
      {/* AVATARS */}
      <div className={`-space-x-5 avatar-group justy-start`}>
        {avatars.map((image, i) => (
          <div className="avatar w-12 h-12" key={i}>
            <Image
              src={image.src}
              alt={image.alt}
              priority={priority}
              width={50}
              height={50}
            />
          </div>
        ))}
      </div>

      {/* RATING */}
      <div className="flex flex-col justify-center items-center md:items-start gap-1">
        <div className="rating">
          {[...Array(5)].map((_, i) => (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className="w-5 h-5 text-yellow-500"
              key={i}
            >
              <path
                fillRule="evenodd"
                d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z"
                clipRule="evenodd"
              />
            </svg>
          ))}
        </div>

        <div className="text-base text-base-content/80">
          <span className="font-semibold text-base-content">2,500+</span> sales professionals trust Prospectr
        </div>
      </div>
    </div>
  );
};

export default TestimonialsAvatars;

================
File: components/TrackdeskScriptWrapper.js
================
"use client";

import { useEffect } from "react";

export default function TrackdeskScriptWrapper() {
  useEffect(() => {
    // For tracking clicks
    (function(t,d,k){(t[k]=t[k]||[]).push(d);t[d]=t[d]||t[k].f||function(){(t[d].q=t[d].q||[]).push(arguments)}})(window,"trackdesk","TrackdeskObject");
    // Call trackdesk safely through window object
    window.trackdesk('leadsprospectr', 'click');
    
    // For handling client reference ID
    const handleClientReferenceId = () => {
      var cookie = document.cookie.match('(^|;)\\s*trakdesk_cid\\s*=\\s*([^;]+)');
      if (Array.isArray(cookie)) {
        try {
          var trakdeskCid = JSON.parse(cookie.pop());
          var cid = trakdeskCid['cid'];
          document.querySelectorAll('a[href^="https://buy.stripe.com/"]').forEach(function (a) {
            var url = new URL(a.href);
            url.searchParams.set('client_reference_id', cid);
            a.href = url.href;
          });
        } catch (e) {
          console.log(e);
        }
      }
    };

    // Execute immediately and also set up a MutationObserver to catch dynamically added links
    handleClientReferenceId();
    
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
          handleClientReferenceId();
        }
      });
    });
    
    observer.observe(document.body, { childList: true, subtree: true });
    
    // Clean up observer on unmount
    return () => {
      observer.disconnect();
    };
  }, []);

  return null;
}

================
File: components/WithWithout.js
================
// A useful component when your product is challenging the status quo.
// Highlight the current pain points (left) and how your product is solving them (right)
// Try to match the lines from left to right, so the user can easily compare the two columns
const WithWithout = () => {
  return (
    <section className="bg-base-100">
      <div className="max-w-5xl mx-auto px-8 py-16 md:py-32 ">
        <h2 className="text-center font-extrabold text-3xl md:text-5xl tracking-tight mb-12 md:mb-20">
          Stop wasting time on manual prospecting
        </h2>

        <div className="flex flex-col md:flex-row justify-center items-center md:items-start gap-8 md:gap-12">
          <div className="bg-error/20 text-error p-8 md:p-12 rounded-lg w-full ">
            <h3 className="font-bold text-lg mb-4">
              LinkedIn without Prospectr
            </h3>

            <ul className="list-disc list-inside space-y-1.5 ">
              {[
                "Manual profile search and filtering",
                "Limited to 50 connections per day",
                "Copy-paste messages one by one",
                "No way to track responses",
                "Hours spent on repetitive tasks",
              ].map((item, index) => (
                <li key={index} className="flex gap-2 items-center">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 16 16"
                    fill="currentColor"
                    className="w-4 h-4 shrink-0 opacity-75"
                  >
                    <path d="M5.28 4.22a.75.75 0 0 0-1.06 1.06L6.94 8l-2.72 2.72a.75.75 0 1 0 1.06 1.06L8 9.06l2.72 2.72a.75.75 0 1 0 1.06-1.06L9.06 8l2.72-2.72a.75.75 0 0 0-1.06-1.06L8 6.94 5.28 4.22Z" />
                  </svg>
                  {item}
                </li>
              ))}
            </ul>
          </div>

          <div className="bg-success/20 text-success p-8 md:p-12 rounded-lg w-full">
            <h3 className="font-bold text-lg mb-4">
              LinkedIn + Prospectr
            </h3>

            <ul className="list-disc list-inside space-y-1.5 ">
              {[
                "AI-powered lead search and filtering",
                "Smart campaign scheduling",
                "Automated personalized messages",
                "Response tracking and analytics",
                "Save 20+ hours per week",
              ].map((item, index) => (
                <li key={index} className="flex gap-2 items-center">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 16 16"
                    fill="currentColor"
                    className="w-4 h-4 shrink-0 opacity-75"
                  >
                    <path
                      fillRule="evenodd"
                      d="M12.416 3.376a.75.75 0 0 1 .208 1.04l-5 7.5a.75.75 0 0 1-1.154.114l-3-3a.75.75 0 0 1 1.06-1.06l2.353 2.353 4.493-6.74a.75.75 0 0 1 1.04-.207Z"
                      clipRule="evenodd"
                    />
                  </svg>

                  {item}
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </section>
  );
};

export default WithWithout;

================
File: docs/linkedin-integration.md
================
# LinkedIn Integration

This document explains how the LinkedIn integration works in Prospectr.

## Overview

Prospectr integrates with LinkedIn through Unipile to allow users to:
- Connect their LinkedIn accounts
- Check the connection status
- Automatically update their Supabase profile with LinkedIn connection details

## Components

The following components are involved in the LinkedIn integration:

### 1. ButtonLinkedin Component
Located at `/components/ButtonLinkedin.js`, this client component:
- Shows the LinkedIn connect/reconnect button
- Checks the connection status via the status API endpoint
- Redirects users to the connect API endpoint when clicked

### 2. API Endpoints

#### LinkedIn Connect
- Path: `/api/auths/linkedin/connect`
- Uses Unipile to generate an authentication link for LinkedIn
- Redirects the user to the LinkedIn authorization page
- Associates the user's Supabase ID with the LinkedIn account

#### LinkedIn Callback
- Path: `/api/auths/linkedin/callback`
- Receives webhook callbacks from Unipile when a user connects or disconnects their LinkedIn account
- Updates the user's profile in Supabase with the connection status and token

#### LinkedIn Status
- Path: `/api/auths/linkedin/status`
- Checks if the user's LinkedIn account is connected
- Verifies the token is still valid with Unipile

### 3. Settings Page Integration
The LinkedIn connection UI is integrated in:
- Dashboard header for quick access (when not connected)
- Settings page for managing the connection

## Database Schema

The LinkedIn connection data is stored in the `profiles` table in Supabase:

- `linkedin_status`: Boolean indicating if the LinkedIn account is connected
- `linkedin_token`: The Unipile account ID representing the LinkedIn connection
- `updated_at`: Timestamp of when the LinkedIn connection was last updated

## Authentication Flow

1. User clicks the "Connect LinkedIn" button
2. User is redirected to the LinkedIn authorization page via Unipile
3. After authorizing, Unipile sends a webhook to our callback endpoint
4. The callback updates the user's profile in Supabase
5. The UI reflects the connected state

## Configuration

The LinkedIn integration relies on these environment variables:

- `UNIPILE_API_URL`: The Unipile API URL
- `UNIPILE_API_TOKEN`: The Unipile API token
- `NEXT_PUBLIC_APP_URL`: The URL of the application for webhook callbacks

## Troubleshooting

If the LinkedIn connection is not working:

1. Check the Unipile configuration in `.env`
2. Verify the user is authenticated
3. Check the browser console for errors
4. Check server logs for webhook errors

For support, contact the development team or refer to the Unipile documentation.

================
File: lib/analytics-service.js
================
"use server";

import { createClient } from "@/utils/supabase/server";

export async function getLinkedInAnalytics(userId) {
  const supabase = await createClient();

  try {
    // Get all invitation jobs for this user
    const { data: invitationJobs, error: jobsError } = await supabase
      .from("invitation_jobs")
      .select("*")
      .eq("user_id", userId);

    if (jobsError) {
      console.error("Error fetching invitation jobs:", jobsError);
      throw new Error("Failed to fetch invitation jobs");
    }

    // Get all invitation users for this user's jobs
    const jobIds = invitationJobs.map((job) => job.job_id);

    const { data: invitationUsers, error: usersError } = await supabase
      .from("invitation_users")
      .select("*")
      .in("job_id", jobIds);
    console.log({ invitationUsers });

    if (usersError) {
      console.error("Error fetching invitation users:", usersError);
      throw new Error("Failed to fetch invitation users");
    }

    // Calculate analytics
    const totalCampaigns = invitationJobs.length;
    const activeCampaigns = invitationJobs.filter(
      (job) => job.status === "completed" || job.status === "processing"
    ).length;
    console.log({ activeCampaigns });

    const totalInvitations = invitationUsers.length;
    const acceptedConnections = invitationUsers.filter(
      (user) =>
        user.invitation_status === "accepted" ||
        user.invitation_status === "message_sent"
    ).length;
    console.log({ acceptedConnections });

    const responseRate =
      totalInvitations > 0 ? (acceptedConnections / totalInvitations) * 100 : 0;

    // Get campaign-specific analytics
    const campaignAnalytics = invitationJobs.map((job) => {
      const campaignInvitations = invitationUsers.filter(
        (user) => user.job_id === job.job_id
      );
      const campaignAccepted = campaignInvitations.filter(
        (user) =>
          user.invitation_status === "accepted" ||
          user.invitation_status === "message_sent"
      ).length;

      const campaignResponseRate =
        campaignInvitations.length > 0
          ? (campaignAccepted / campaignInvitations.length) * 100
          : 0;
      console.log({ campaignAccepted });

      return {
        job_id: job.job_id,
        name: job.name || `Campaign ${job.created_at}`,
        status: job.status,
        total_invitations: campaignInvitations.length,
        accepted_connections: campaignAccepted,
        response_rate: campaignResponseRate.toFixed(2),
        created_at: job.created_at,
        completed_at: job.completed_at,
      };
    });

    // Get monthly trend data
    const monthlyData = getMonthlyTrendData(invitationUsers);

    console.log({ monthlyData });
    return {
      summary: {
        total_campaigns: totalCampaigns,
        active_campaigns: activeCampaigns,
        total_invitations: totalInvitations,
        total_connections: acceptedConnections,
        response_rate: responseRate.toFixed(2),
      },
      campaigns: campaignAnalytics,
      monthly_trends: monthlyData,
    };
  } catch (error) {
    console.error("Error in getLinkedInAnalytics:", error);
    throw error;
  }
}

function getMonthlyTrendData(invitationUsers) {
  const monthlyData = {};

  invitationUsers.forEach((user) => {
    // Skip if no sent date
    if (!user.invitation_sent_at) return;

    const sentDate = new Date(user.invitation_sent_at);
    const monthKey = `${sentDate.getFullYear()}-${String(
      sentDate.getMonth() + 1
    ).padStart(2, "0")}`;

    if (!monthlyData[monthKey]) {
      monthlyData[monthKey] = {
        month: monthKey,
        invitations_sent: 0,
        connections_accepted: 0,
      };
    }

    monthlyData[monthKey].invitations_sent++;

    if (
      user.invitation_status === "accepted" ||
      user.invitation_status === "message_sent"
    ) {
      monthlyData[monthKey].connections_accepted++;
    }
  });

  // Convert to array and sort by month
  return Object.values(monthlyData).sort((a, b) =>
    a.month.localeCompare(b.month)
  );
}

================
File: lib/invitation-service.js
================
"use server";

import { createClient } from "@/utils/supabase/server";
import { unipileClient } from "@/utils/unipileClient";

// : {
//     accountId: string;
//     recipients: Array<{ identifier?: string; provider_id?: string }>;
//     message?: string;
//     userId: string;
//     jobId: string;
//   }
export async function processInvitations(options) {
  console.log("process invitations");
  const { accountId, recipients, message, userId, jobId, templateId } = options;
  const client = unipileClient();
  const supabase = await createClient();

  let successCount = 0;
  let failureCount = 0;

  // Update job status to "processing"
  await supabase
    .from("invitation_jobs")
    .update({
      status: "processing",
      started_at: new Date().toISOString(),
    })
    .eq("job_id", jobId);

  // Process each recipient
  for (const [index, recipient] of recipients.entries()) {
    console.log("for loop");
    try {
      let providerId = recipient.provider_id;
      let profileUrl = recipient.profile_url;
      let name = recipient.name;

      if (!providerId && recipient.identifier) {
        const profile = await client.users.getProfile({
          account_id: accountId,
          identifier: recipient.identifier,
        });

        console.log(
          { profileProvider: profile.provider_id },
          "profile get",
          profile
        );

        if (!profile) {
          console.error(
            `Profile not found for identifier: ${recipient.identifier}`
          );
          failureCount++;
          continue;
        }

        providerId = profile.provider_id;
        profileUrl =
          profile.profile_url ||
          `https://linkedin.com/in/${profile.public_identifier}`;
        name = profile.name;
      }

      if (!providerId) {
        failureCount++;
        continue;
      }

      console.log(providerId, "providerId");

      // Send invitation
      if (message) {
        const inv = await client.users.sendInvitation({
          account_id: accountId,
          provider_id: providerId,
          message: message,
        });
        console.log({ inv }, "invite with message");
      } else {
        const inv = await client.users.sendInvitation({
          account_id: accountId,
          provider_id: providerId,
        });
        console.log({ inv }, "invite with message");
      }

      // Track this invitation in the invitation_users table
      await trackInvitation(userId, jobId, providerId, profileUrl, name);

      successCount++;

      // Update progress in database
      await supabase
        .from("invitation_jobs")
        .update({
          invitations_sent: successCount,
          last_updated: new Date().toISOString(),
        })
        .eq("job_id", jobId);

      const delay = Math.floor(Math.random() * (300000 - 120000 + 1)) + 120000; // 2-5 minutes
      await new Promise((resolve) => setTimeout(resolve, delay));
    } catch (error) {
      console.error(
        `Failed to invite recipient at index ${index}:`,
        error.body || error
      );
      failureCount++;

      // Update failure count
      await supabase
        .from("invitation_jobs")
        .update({
          invitations_failed: failureCount,
          last_updated: new Date().toISOString(),
        })
        .eq("job_id", jobId);
    }
  }

  // Update job as completed
  await supabase
    .from("invitation_jobs")
    .update({
      status: "completed",
      invitations_sent: successCount,
      invitations_failed: failureCount,
      completed_at: new Date().toISOString(),
    })
    .eq("job_id", jobId);

  return { successCount, failureCount };
}

export async function trackInvitation(
  userId,
  jobId,
  linkedinUserId,
  profileUrl,
  name
) {
  const supabase = await createClient();

  // Check if this invitation is already being tracked
  const { data: existingInvitation } = await supabase
    .from("invitation_users")
    .select("*")
    .eq("job_id", jobId)
    .eq("linkedin_user_id", linkedinUserId)
    .single();

  console.log({ existingInvitation }, "exiastance invit");
  if (existingInvitation) {
    return existingInvitation;
  }

  // Create a new invitation tracking record
  const { data, error } = await supabase
    .from("invitation_users")
    .insert({
      job_id: jobId,
      linkedin_user_id: linkedinUserId,
      linkedin_profile_url: profileUrl,
      name: name,
      invitation_status: "pending",
      invitation_sent_at: new Date().toISOString(),
    })
    .select()
    .single();

  if (error) {
    console.error("Error tracking invitation:", error);
    throw new Error("Failed to track invitation");
  }

  return data;
}

export async function updateInvitationStatus(
  invitationId,
  status,
  acceptedAt = null
) {
  try {
    const supabase = await createClient();

    // First get the current invitation to preserve job_id
    const { data: currentInvitation } = await supabase
      .from("invitation_users")
      .select("*")
      .eq("id", invitationId)
      .single();

    if (!currentInvitation) {
      console.error("No invitation found with ID:", invitationId);
      return null;
    }

    // Create updates object while preserving existing data
    const updates = {
      ...currentInvitation, // Preserve all existing fields
      invitation_status: status,
      updated_at: new Date().toISOString(),
    };

    if (status === "accepted" && acceptedAt) {
      updates.invitation_accepted_at = acceptedAt;
    }

    // Use upsert to update while preserving job_id
    const { data, error } = await supabase
      .from("invitation_users")
      .upsert(
        {
          id: invitationId,
          ...updates,
        },
        {
          onConflict: "id",
        }
      )
      .select()
      .single();

    if (error) {
      console.error("Error updating invitation status:", error);
      return null;
    }

    return data;
  } catch (error) {
    console.error("Unexpected error in updateInvitationStatus:", error);
    return null;
  }
}

export async function markFollowUpSent(invitationId) {
  const supabase = await createClient();

  const { data, error } = await supabase
    .from("invitation_users")
    .update({
      invitation_status: "message_sent",
      follow_up_sent_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    })
    .eq("id", invitationId)
    .select()
    .single();

  if (error) {
    console.error("Error marking follow-up as sent:", error);
    throw new Error("Failed to mark follow-up as sent");
  }

  return data;
}

export async function getPendingFollowUps() {
  const supabase = await createClient();

  // Get invitations that have been accepted but haven't had follow-up messages sent
  const { data, error } = await supabase
    .from("invitation_users")
    .select(
      `
      *,
      invitation_jobs(
        user_id,
        template_id,
        invitation_templates(follow_up_message)
      )
    `
    )
    .eq("invitation_status", "accepted")
    .is("follow_up_sent_at", null);

  if (error) {
    console.error("Error getting pending follow-ups:", error);
    throw new Error("Failed to get pending follow-ups");
  }

  return data;
}

================
File: lib/utils.js
================
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}

================
File: libs/api.js
================
import axios from "axios";
import { toast } from "react-hot-toast";
import { redirect } from "next/navigation";
import config from "@/config";

// use this to interact with our own API (/app/api folder) from the front-end side
// See https://shipfa.st/docs/tutorials/api-call
const apiClient = axios.create({
  baseURL: "/api",
});

apiClient.interceptors.response.use(
  function (response) {
    return response.data;
  },
  function (error) {
    let message = "";

    if (error.response?.status === 401) {
      // User not auth, ask to re login
      toast.error("Please login");
      // Sends the user to the login page
      redirect(config.auth.loginUrl);
    } else if (error.response?.status === 403) {
      // User not authorized, must subscribe/purchase/pick a plan
      message = "Pick a plan to use this feature";
    } else {
      message =
        error?.response?.data?.error || error.message || error.toString();
    }

    error.message =
      typeof message === "string" ? message : JSON.stringify(message);

    console.error(error.message);

    // Automatically display errors to the user
    if (error.message) {
      toast.error(error.message);
    } else {
      toast.error("something went wrong...");
    }
    return Promise.reject(error);
  }
);

export default apiClient;

================
File: libs/gpt.js
================
import axios from "axios";

// Use this if you want to make a call to OpenAI GPT-4 for instance. userId is used to identify the user on openAI side.
export const sendOpenAi = async (messages, userId, max = 100, temp = 1) => {
  const url = "https://api.openai.com/v1/chat/completions";

  console.log("Ask GPT >>>");
  messages.map((m) =>
    console.log(" - " + m.role.toUpperCase() + ": " + m.content)
  );

  const body = JSON.stringify({
    model: "gpt-4",
    messages,
    max_tokens: max,
    temperature: temp,
    user: userId,
  });

  const options = {
    headers: {
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      "Content-Type": "application/json",
    },
  };

  try {
    const res = await axios.post(url, body, options);

    const answer = res.data.choices[0].message.content;
    const usage = res?.data?.usage;

    console.log(">>> " + answer);
    console.log(
      "TOKENS USED: " +
        usage?.total_tokens +
        " (prompt: " +
        usage?.prompt_tokens +
        " / response: " +
        usage?.completion_tokens +
        ")"
    );
    console.log("\n");

    return answer;
  } catch (e) {
    console.error("GPT Error: " + e?.response?.status, e?.response?.data);
    return null;
  }
};

================
File: libs/seo.js
================
import config from "@/config";

// These are all the SEO tags you can add to your pages.
// It prefills data with default title/description/OG, etc.. and you can cusotmize it for each page.
// It's already added in the root layout.js so you don't have to add it to every pages
// But I recommend to set the canonical URL for each page (export const metadata = getSEOTags({canonicalUrlRelative: "/"});)
// See https://shipfa.st/docs/features/seo
export const getSEOTags = ({
  title,
  description,
  keywords,
  openGraph,
  canonicalUrlRelative,
  extraTags,
} = {}) => {
  return {
    // up to 50 characters (what does your app do for the user?) > your main should be here
    title: title || config.appName,
    // up to 160 characters (how does your app help the user?)
    description: description || config.appDescription,
    // some keywords separated by commas. by default it will be your app name
    keywords: keywords || [config.appName],
    applicationName: config.appName,
    // set a base URL prefix for other fields that require a fully qualified URL (.e.g og:image: og:image: 'https://yourdomain.com/share.png' => '/share.png')
    metadataBase: new URL(
      process.env.NODE_ENV === "development"
        ? "http://localhost:3000/"
        : `https://${config.domainName}/`
    ),

    openGraph: {
      title: openGraph?.title || config.appName,
      description: openGraph?.description || config.appDescription,
      url: openGraph?.url || `https://${config.domainName}/`,
      siteName: openGraph?.title || config.appName,
      // If you add an opengraph-image.(jpg|jpeg|png|gif) image to the /app folder, you don't need the code below
      // images: [
      //   {
      //     url: `https://${config.domainName}/share.png`,
      //     width: 1200,
      //     height: 660,
      //   },
      // ],
      locale: "en_US",
      type: "website",
    },

    twitter: {
      title: openGraph?.title || config.appName,
      description: openGraph?.description || config.appDescription,
      // If you add an twitter-image.(jpg|jpeg|png|gif) image to the /app folder, you don't need the code below
      // images: [openGraph?.image || defaults.og.image],
      card: "summary_large_image",
      creator: "@marc_louvion",
    },

    // If a canonical URL is given, we add it. The metadataBase will turn the relative URL into a fully qualified URL
    ...(canonicalUrlRelative && {
      alternates: { canonical: canonicalUrlRelative },
    }),

    // If you want to add extra tags, you can pass them here
    ...extraTags,
  };
};

// Strctured Data for Rich Results on Google. Learn more: https://developers.google.com/search/docs/appearance/structured-data/intro-structured-data
// Find your type here (SoftwareApp, Book...): https://developers.google.com/search/docs/appearance/structured-data/search-gallery
// Use this tool to check data is well structure: https://search.google.com/test/rich-results
// You don't have to use this component, but it increase your chances of having a rich snippet on Google.
// I recommend this one below to your /page.js for software apps: It tells Google your AppName is a Software, and it has a rating of 4.8/5 from 12 reviews.
// Fill the fields with your own data
// See https://shipfa.st/docs/features/seo
export const renderSchemaTags = () => {
  return (
    <script
      type="application/ld+json"
      dangerouslySetInnerHTML={{
        __html: JSON.stringify({
          "@context": "http://schema.org",
          "@type": "SoftwareApplication",
          name: config.appName,
          description: config.appDescription,
          image: `https://${config.domainName}/icon.png`,
          url: `https://${config.domainName}/`,
          author: {
            "@type": "Person",
            name: "Marc Lou",
          },
          datePublished: "2023-08-01",
          applicationCategory: "EducationalApplication",
          aggregateRating: {
            "@type": "AggregateRating",
            ratingValue: "4.8",
            ratingCount: "12",
          },
          offers: [
            {
              "@type": "Offer",
              price: "9.00",
              priceCurrency: "USD",
            },
          ],
        }),
      }}
    ></script>
  );
};

================
File: libs/stripe.js
================
import Stripe from "stripe";

// This is used to create a Stripe Checkout for one-time payments. It's usually triggered with the <ButtonCheckout /> component. Webhooks are used to update the user's state in the database.
export const createCheckout = async ({
  priceId,
  mode,
  successUrl,
  cancelUrl,
  couponId,
  clientReferenceId,
  user,
}) => {
  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

  const extraParams = {};

  if (user?.customerId) {
    extraParams.customer = user.customerId;
  } else {
    if (mode === "payment") {
      extraParams.customer_creation = "always";
      // The option below costs 0.4% (up to $2) per invoice. Alternatively, you can use https://zenvoice.io/ to create unlimited invoices automatically.
      // extraParams.invoice_creation = { enabled: true };
      extraParams.payment_intent_data = { setup_future_usage: "on_session" };
    }
    if (user?.email) {
      extraParams.customer_email = user.email;
    }
    extraParams.tax_id_collection = { enabled: true };
  }

  const stripeSession = await stripe.checkout.sessions.create({
    mode,
    allow_promotion_codes: true,
    client_reference_id: clientReferenceId,
    line_items: [
      {
        price: priceId,
        quantity: 1,
      },
    ],
    discounts: couponId
      ? [
          {
            coupon: couponId,
          },
        ]
      : [],
    success_url: successUrl,
    cancel_url: cancelUrl,
    ...extraParams,
  });

  return stripeSession.url;
};

// This is used to create Customer Portal sessions, so users can manage their subscriptions (payment methods, cancel, etc..)
export const createCustomerPortal = async ({ customerId, returnUrl }) => {
  try {
    const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

    const portalSession = await stripe.billingPortal.sessions.create({
      customer: customerId,
      return_url: returnUrl,
    });

    return portalSession.url;
  } catch (e) {
    console.error(e);
    return null;
  }
};

// This is used to get the uesr checkout session and populate the data so we get the planId the user subscribed to
export const findCheckoutSession = async (sessionId) => {
  try {
    const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

    const session = await stripe.checkout.sessions.retrieve(sessionId, {
      expand: ["line_items"],
    });

    return session;
  } catch (e) {
    console.error(e);
    return null;
  }
};

================
File: libs/supabase-client.js
================
import { createBrowserClient } from "@supabase/ssr";

export const createClient = () => {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );
};

// Helper function to get the current session
export const getCurrentSession = async () => {
  const supabase = createClient();
  const {
    data: { session },
    error,
  } = await supabase.auth.getSession();

  if (error) {
    console.error("Error getting session:", error.message);
    return null;
  }

  return session;
};

// Helper function to get the current user
export const getCurrentUser = async () => {
  const session = await getCurrentSession();
  return session?.user ?? null;
};

// Helper function to sign out
export const signOut = async () => {
  const supabase = createClient();
  const { error } = await supabase.auth.signOut();

  if (error) {
    console.error("Error signing out:", error.message);
    throw error;
  }
};

================
File: models/plugins/toJSON.js
================
/* eslint-disable no-param-reassign */

/**
 * A mongoose schema plugin which applies the following in the toJSON transform call:
 *  - removes __v, createdAt, updatedAt, and any path that has private: true
 *  - replaces _id with id
 */

const deleteAtPath = (obj, path, index) => {
  if (index === path.length - 1) {
    delete obj[path[index]];
    return;
  }
  deleteAtPath(obj[path[index]], path, index + 1);
};

const toJSON = (schema) => {
  let transform;

  if (schema.options.toJSON && schema.options.toJSON.transform) {
    transform = schema.options.toJSON.transform;
  }

  schema.options.toJSON = Object.assign(schema.options.toJSON || {}, {
    transform(doc, ret, options) {
      Object.keys(schema.paths).forEach((path) => {
        if (schema.paths[path].options && schema.paths[path].options.private) {
          deleteAtPath(ret, path.split("."), 0);
        }
      });

      if (ret._id) {
        ret.id = ret._id.toString();
      }
      delete ret._id;
      delete ret.__v;

      if (transform) {
        return transform(doc, ret, options);
      }
    },
  });
};

export default toJSON;

================
File: models/Lead.js
================
import mongoose from "mongoose";
import toJSON from "./plugins/toJSON";

// LEAD SCHEMA is used to store the leads that are generated from the landing page.
// You would use this if your product isn't ready yet and you want to collect emails
// The <ButtonLead /> component & the /api/lead route are used to collect the emails
const leadSchema = mongoose.Schema(
  {
    email: {
      type: String,
      trim: true,
      lowercase: true,
      private: true,
      required: true,
    },
  },
  {
    timestamps: true,
    toJSON: { virtuals: true },
  }
);

// add plugin that converts mongoose to json
leadSchema.plugin(toJSON);

export default mongoose.models.Lead || mongoose.model("Lead", leadSchema);

================
File: models/User.js
================
import mongoose from "mongoose";
import toJSON from "./plugins/toJSON";

// USER SCHEMA
const userSchema = mongoose.Schema(
  {
    name: {
      type: String,
      trim: true,
    },
    email: {
      type: String,
      trim: true,
      lowercase: true,
      private: true,
    },
    image: {
      type: String,
    },
    // Used in the Stripe webhook to identify the user in Stripe and later create Customer Portal or prefill user credit card details
    customerId: {
      type: String,
      validate(value) {
        return value.includes("cus_");
      },
    },
    // Used in the Stripe webhook. should match a plan in config.js file.
    priceId: {
      type: String,
      validate(value) {
        return value.includes("price_");
      },
    },
    // Used to determine if the user has access to the product—it's turn on/off by the Stripe webhook
    hasAccess: {
      type: Boolean,
      default: false,
    },
  },
  {
    timestamps: true,
    toJSON: { virtuals: true },
  }
);

// add plugin that converts mongoose to json
userSchema.plugin(toJSON);

export default mongoose.models.User || mongoose.model("User", userSchema);

================
File: supabase/.gitignore
================
# Supabase
.branches
.temp

# dotenvx
.env.keys
.env.local
.env.*.local

================
File: supabase/config.toml
================
# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "Prospectr"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: "./seeds/*.sql"
sql_paths = ["./seed.sql"]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = true
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
[auth.email.smtp]
enabled = true
host = "smtp.resend.com"
port = 465
user = "resend"
pass = "re_jWRcjJEc_4BDNXvrXzGj1b2YykPTELZFC"
admin_email = "test@customersupport.leadsprospectr.com"
sender_name = "test @ prospectr"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083

# Use these configurations to customize your Edge Function.
# [functions.MY_FUNCTION_NAME]
# enabled = true
# verify_jwt = true
# import_map = "./functions/MY_FUNCTION_NAME/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
# entrypoint = "./functions/MY_FUNCTION_NAME/index.ts"
# Specifies static files to be bundled with the function. Supports glob patterns.
# For example, if you want to serve static HTML pages in your function:
# static_files = [ "./functions/MY_FUNCTION_NAME/*.html" ]

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"

================
File: types/supabase.d.ts
================
// Type declarations for Supabase Edge Functions JSR imports
declare module 'jsr:@supabase/supabase-js' {
  export const createClient: any;
  // Add other exports as needed
}

declare module 'jsr:@supabase/functions-js/edge-runtime.d.ts' {
  // This is just to make TypeScript happy
}

================
File: utils/email/reconnectionEmail.js
================
import { Resend } from "resend";
import { getUser } from "../supabase/getUser";
import { createClient } from "../supabase/server";

const resend = new Resend(process.env.RESEND_API_KEY);

export async function sendReconnectionEmail(email, accountId) {
  const supabase = await createClient();
  const { data: profile } = await supabase
    .from("profiles")
    .select("*")
    .eq("unipile_account_id", accountId)
    .single();

  const reconnectionUrl = `${process.env.NEXT_PUBLIC_APP_URL}/api/reconnect?token=${profile.reconnect_token}&account_id=${accountId}`;
  console.log(reconnectionUrl, "reconnectionUrl in reconnectionEmail");
  const { data, error } = await resend.emails.send({
    from: "prospectr@customerservice.peakvaluebusiness.com",
    to: email,
    subject: "Reconnect LinkedIn Account",
    html: `<a href="${reconnectionUrl}">Reconnect Now</a>`,
  });
  console.log(data, "dataIN asdasdasd");
}

================
File: utils/supabase/client.js
================
import { createBrowserClient } from "@supabase/ssr";

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );
}

================
File: utils/supabase/getUser.js
================
"use server";
import { createClient } from "./server";

export async function getUser() {
  const supabase = await createClient();
  const {
    data: { user },
    error,
  } = await supabase.auth.getUser();
  return user;
}

================
File: utils/supabase/middleware.js
================
import { createServerClient } from "@supabase/ssr";
import { NextResponse } from "next/server";

export async function updateSession(request) {
  let supabaseResponse = NextResponse.next({
    request,
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll();
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) =>
            request.cookies.set(name, value)
          );
          supabaseResponse = NextResponse.next({
            request,
          });
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          );
        },
      },
      cookieOptions: {
        // Set secure to true in production
        secure: process.env.NODE_ENV === "production",
        // Set longer expiration for better persistence
        maxAge: 60 * 60 * 24 * 7, // 7 days
        sameSite: "lax",
        path: "/",
      },
    }
  );

  // Do not run code between createServerClient and
  // supabase.auth.getUser(). A simple mistake could make it very hard to debug
  // issues with users being randomly logged out.

  // IMPORTANT: DO NOT REMOVE auth.getUser()

  // Get the user and session to check authentication status
  const {
    data: { user },
  } = await supabase.auth.getUser();

  const {
    data: { session },
  } = await supabase.auth.getSession();

  // Check if the URL has auth_success parameter which indicates a successful authentication
  const authSuccess = request.nextUrl.searchParams.get("auth_success");

  // Try to refresh the session if we have a session but no user
  // This can happen if the session is expired but the cookie still exists
  if (!user && session) {
    try {
      const { error: refreshError } = await supabase.auth.refreshSession();
      if (!refreshError) {
        // Session refreshed successfully, get the user again
        const {
          data: { user: refreshedUser },
        } = await supabase.auth.getUser();

        // If we now have a user, we can proceed
        if (refreshedUser) {
          // Continue with the request
          return supabaseResponse;
        }
      }
    } catch (error) {
      console.error("Error refreshing session:", error);
    }
  }

  // Protected routes check - redirect to signin if not authenticated
  if (
    !user &&
    !request.nextUrl.pathname.startsWith("/login") &&
    !request.nextUrl.pathname.startsWith("/auth") &&
    !request.nextUrl.pathname.startsWith("/signin") &&
    !request.nextUrl.pathname.startsWith("/signup") &&
    !request.nextUrl.pathname.startsWith("/reset-password") &&
    request.nextUrl.pathname !== "/"
  ) {
    // no user, potentially respond by redirecting the user to the login page
    const url = request.nextUrl.clone();
    url.pathname = "/signin";
    return NextResponse.redirect(url);
  }

  // If we have a successful auth and user, ensure cookies are properly set
  if (authSuccess && user) {
    // Create a new response with the auth_success parameter removed to clean up the URL
    const url = request.nextUrl.clone();
    url.searchParams.delete("auth_success");

    const cleanResponse = NextResponse.redirect(url);

    // Copy all cookies from the supabaseResponse to ensure session persistence
    supabaseResponse.cookies.getAll().forEach((cookie) => {
      cleanResponse.cookies.set(cookie.name, cookie.value, cookie.options);
    });

    return cleanResponse;
  }

  // IMPORTANT: You *must* return the supabaseResponse object as it is.
  // If you're creating a new response object with NextResponse.next() make sure to:
  // 1. Pass the request in it, like so:
  //    const myNewResponse = NextResponse.next({ request })
  // 2. Copy over the cookies, like so:
  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
  // 3. Change the myNewResponse object to fit your needs, but avoid changing
  //    the cookies!
  // 4. Finally:
  //    return myNewResponse
  // If this is not done, you may be causing the browser and server to go out
  // of sync and terminate the user's session prematurely!

  return supabaseResponse;
}

================
File: utils/supabase/server.js
================
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

export async function createClient() {
  const cookieStore = await cookies();

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            );
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  );
}

================
File: utils/action.js
================
"use server";

import { redirect } from "next/navigation";
import { headers } from "next/headers";
import { createClient } from "./supabase/server";
import { cookies } from "next/headers";

const signInWith = (provider) => async (formData) => {
  const supabase = await createClient();
  const headersList = await headers();
  const cookieStore = await cookies();

  // Get the host, with fallbacks for Vercel and local development
  const host =
    headersList.get("host") || process.env.VERCEL_URL || "localhost:3000";

  // Use https for production (including Vercel) and http for localhost
  const protocol = host.includes("localhost") ? "http" : "https";

  // Ensure consistent redirect path for all auth methods
  const auth_callback = `${protocol}://${host}/auth/callback`;

  // Parse form data values in a way that works on the server
  // Instead of using formData.get() which causes client reference issues
  const redirectToCheckout =
    Object.fromEntries(formData.entries())?.redirectToCheckout === "true";
  const selectedPlanId = Object.fromEntries(formData.entries())?.selectedPlanId;

  // Set cookies for checkout flow if needed
  if (redirectToCheckout) {
    // Set a cookie to indicate we should redirect to checkout after auth
    cookieStore.set("redirectToCheckoutAfterAuth", "true", {
      maxAge: 60 * 10, // 10 minutes
      path: "/",
    });

    // Store the selected plan ID if we have it
    if (selectedPlanId) {
      cookieStore.set("selectedPlanId", selectedPlanId, {
        maxAge: 60 * 10, // 10 minutes
        path: "/",
      });
    }
  }

  const { data, error } = await supabase.auth.signInWithOAuth({
    provider,
    options: {
      redirectTo: auth_callback,
      persistSession: true,
      queryParams: {
        access_type: "offline",
        prompt: "consent",
      },
      emailConfirmationRequired: true, // Explicitly require email confirmation
      data: {
        // User metadata can be added here
      },
    },
  });

  if (error) {
    console.error("Authentication error:", error);
    throw error;
  }

  redirect(data.url);
};

// For normal Google sign-in
const signInWithGoogle = signInWith("google");

export { signInWithGoogle };

================
File: utils/check-subscription.js
================
"use server";

import { createClient } from "@/utils/supabase/server";
import { redirect } from "next/navigation";
import Stripe from "stripe";
import { getUser } from "./supabase/getUser";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

export async function checkSubscription(
  userId,
  redirectToCheckout = false,
  isApiRoute = false
) {
  if (!userId) {
    if (isApiRoute) {
      return {
        hasAccess: false,
        needsCheckout: true,
        redirectUrl: `${process.env.NEXT_PUBLIC_APP_URL}/signin`,
      };
    }
    redirect("/signin");
  }

  const supabase = await createClient();
  const user = await getUser();

  const { data: profile, error } = await supabase
    .from("profiles")
    .select("has_access, subscription_status, trial_ends_at, customer_id")
    .eq("user_id", userId)
    .single();

  if (error || !profile) {
    console.error("Error checking subscription:", error);
    if (isApiRoute) {
      return {
        hasAccess: false,
        needsCheckout: true,
        redirectUrl: `${process.env.NEXT_PUBLIC_APP_URL}/#pricing`,
      };
    }
    redirect("/#pricing");
  }

  const hasActiveSubscription = profile.has_access === true;

  // Only create checkout session if explicitly requested AND user doesn't have access
  if (!hasActiveSubscription && redirectToCheckout) {
    const sessionOptions = {
      mode: "subscription",
      payment_method_types: ["card"],
      allow_promotion_codes: true,
      line_items: [
        {
          price: process.env.NEXT_PUBLIC_STRIPE_PRICE_ID,
          quantity: 1,
        },
      ],
      success_url: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`,
      cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/`,
      client_reference_id: userId,
      subscription_data: {
        trial_period_days: 7,
      },
    };

    if (profile.customer_id) {
      sessionOptions.customer = profile.customer_id;
    } else {
      sessionOptions.customer_email = user.email;
    }

    try {
      const session = await stripe.checkout.sessions.create(sessionOptions);

      if (isApiRoute) {
        return {
          hasAccess: false,
          needsCheckout: true,
          checkoutUrl: session.url,
        };
      }
      redirect(session.url);
    } catch (error) {
      console.error("Error creating checkout session:", error);
      if (isApiRoute) {
        return {
          hasAccess: false,
          needsCheckout: true,
          redirectUrl: `${process.env.NEXT_PUBLIC_APP_URL}/#pricing`,
        };
      }
      redirect("/#pricing");
    }
  }

  return {
    hasAccess: hasActiveSubscription,
    subscriptionStatus: profile.subscription_status,
    trialEndsAt: profile.trial_ends_at,
    needsCheckout: !hasActiveSubscription,
  };
}

================
File: utils/get-is-subscription.js
================
import { NextResponse } from "next/server";
import { checkSubscription } from "./check-subscription";

export const getIsSubscription = async (userId) => {
  // First check if user has access
  const subscriptionCheck = await checkSubscription(userId, true, true);

  // If user needs checkout, return the checkout URL
  if (subscriptionCheck.needsCheckout) {
    console.log({
      error: "Subscription required",
      checkoutUrl:
        subscriptionCheck.checkoutUrl || subscriptionCheck.redirectUrl,
    });
    return NextResponse.json(
      {
        error: "Subscription required",
        checkoutUrl:
          subscriptionCheck.checkoutUrl || subscriptionCheck.redirectUrl,
      },
      { status: 402 }
    );
  }
};

================
File: utils/stripe-client.js
================
export async function createCheckoutSession({
  priceId,
  successUrl,
  cancelUrl,
}) {
  const response = await fetch("/api/stripe/create-checkout", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      priceId,
      successUrl,
      cancelUrl,
    }),
  });

  const data = await response.json();

  // If the user is not authenticated, we need to redirect to signup
  if (!response.ok) {
    if (data.redirectToSignup && data.status === 401) {
      // Save the plan info to localStorage
      localStorage.setItem("selectedPlanId", priceId);
      localStorage.setItem(
        "checkoutReturnUrl",
        window.location.pathname + window.location.search
      );

      // Return object with redirect info
      return {
        redirectToSignup: true,
        url: "/signup?checkout=pending",
      };
    }

    throw new Error(data.error || "Failed to create checkout session");
  }

  return data;
}

================
File: utils/unipileClient.js
================
import { UnipileClient } from "unipile-node-sdk";

export function unipileClient() {
  const client = new UnipileClient(
    process.env.UNIPILE_API_URL,
    process.env.UNIPILE_API_TOKEN
  );
  return client;
}

================
File: .cursorrules
================
# Cursor Configuration File

# ESLint rules to ignore during development
eslint.rules.ignore = [
  "no-unused-vars",
  "react/no-unescaped-entities",
  "react-hooks/exhaustive-deps"
]

# Automatically format code and fix linting issues on save
eslint.autofix = true

# Prevent annoying or repetitive warnings
suppress.warnings = [
  "react/no-unescaped-entities", 
  "no-unused-vars"
]

# Always use &apos; for apostrophes in JSX
jsx.apostrophe.replacement = "&apos;"

# ShipFast Boilerplate Stack Guidelines
# --------------------------------------
# Tech Stack: JavaScript, Node.js, React, Next.js App Router, Tailwind CSS, Supabase

# Code Style and Structure
# -----------------------
# - Write concise, technical JavaScript code with accurate examples
# - Use functional and declarative programming patterns; avoid classes
# - Prefer iteration and modularization over code duplication
# - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
# - Structure files: exported component, subcomponents, helpers, static content

# Naming Conventions
# -----------------
# - Use kebab-case for directories
# - Use camelCase for variables and functions
# - Use PascalCase for components
# - File names for components should be in PascalCase. Rest of the files in kebab-case
# - Prefix component names with their type (e.g. ButtonAccount.jsx and ButtonSignin.jsx, 
#   CardAnalyticsMain.jsx and CardAnalyticsData.jsx, etc.)

# Syntax and Formatting
# --------------------
# - Use the "function" keyword for pure functions
# - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements
# - Use declarative JSX
# - IMPORTANT: Always escape apostrophes with &apos; to prevent build errors

# UI and Styling
# -------------
# - Use DaisyUI and Tailwind CSS for components and styling
# - Implement responsive design with Tailwind CSS; use a mobile-first approach

# Performance Optimization
# ----------------------
# - Minimize 'use client', 'useState', and 'useEffect'; favor React Server Components (RSC)
# - ALWAYS wrap components using client-side hooks (useSearchParams, usePathname, useRouter) in a Suspense boundary
# - Example: <Suspense fallback={<div>Loading...</div>}><ComponentUsingHooks /></Suspense>
# - Wrap client components in Suspense with fallback
# - Use dynamic loading for non-critical components
# - Optimize images: use Webp format, include size data, implement lazy loading

# Key Conventions
# --------------
# - Optimize Web Vitals (LCP, CLS, FID)
# - Limit 'use client':
#   - Favor server components and Next.js SSR
#   - Use only for Web API access in small components
#   - Avoid for data fetching or state management

# IMPORTANT: ALWAYS CHECK IF THERE ARE PREEXISTING .ENV.LOCAL FILES BEFORE CREATING MORE

================
File: .env.local
================
NEXT_PUBLIC_SUPABASE_URL=https://psvumtzgrpyohyjqmrbb.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzdnVtdHpncnB5b2h5anFtcmJiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzczMDUwMDYsImV4cCI6MjA1Mjg4MTAwNn0.-2xpkMWcL0c6E5iQbADV-0G9ECUC4UVD7HnvuMdDthU
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzdnVtdHpncnB5b2h5anFtcmJiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNzMwNTAwNiwiZXhwIjoyMDUyODgxMDA2fQ.Z7cJIGKYXLMttjAuhjjVZdPtyKPsHG945rAtfEJVX4Q

RESEND_API_KEY=re_Rwx3FLrx_JL7DQANtMj695fcyAQjaRv2j
STRIPE_PUBLISHABLE_KEY=pk_live_51R4Z2RE37HnR1sjlZaLbYMYdbS2m9Yh672vWkwQ8aTog16oTvZrdbpx9j0eiE7QxDdDEZGsPvEmCoLcJCYi8Fe4g00GdrJjtXo
NEXT_PUBLIC_STRIPE_PRICE_ID=price_1R6P1qE37HnR1sjlvkSplq8X
STRIPE_SECRET_KEY=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

UNIPILE_BASE_URL=https://api12.unipile.com:14231/api/v1/hosted/accounts/link
UNIPILE_LINK_URL=https://app.unipile.com/hosted/accounts/link
UNIPILE_API_URL=https://api12.unipile.com:14231
UNIPILE_API_TOKEN=e2rAM6wN.9LunkGk/Ltpq+is2gnZREpR7oJtWXVH4a3LjoCRWv7c=
UNIPILE_DSN=api12.unipile.com:14231/api/v1/accounts
UNIPILE_REDIRECT_URI=https://leadsprospectr.com/api/auth/linkedin/callback


NEXT_PUBLIC_APP_URL=https://leadsprospectr.com

CRON_SECRET=ghMN2BGnjDU4ULKtnzDnXvtys1iKblbF

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "eslint:recommended"],
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },
  "rules": {
    // Your specific rules.
    "no-unused-vars": "warn",
    "react/no-unescaped-entities": "off",
    "react-hooks/exhaustive-deps": "warn"
  }
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
# .env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# public
public/robots.txt
public/sitemap.xml
public/sitemap-0.xml

# cline_docs
cline_docs/

#supabase 
migrations/

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: config.js
================
import themes from "daisyui/src/theming/themes";

const config = {
  // REQUIRED
  appName: "Prospectr",
  // REQUIRED: a short description of your app for SEO tags (can be overwritten)
  appDescription:
    "Prospectr is an AI-powered LinkedIn prospecting tool that helps you find and connect with the right leads for your business.",
  // REQUIRED (no https://, not trialing slash at the end, just the naked domain)
  domainName: "leadsprospectr.com",
  crisp: {
    // Crisp website ID. IF YOU DON'T USE CRISP: just remove this => Then add a support email in this config file (mailgun.supportEmail) otherwise customer support won't work.
    id: "4001a365-4a61-4b7e-a71e-01af4dc2ce52",
    // Hide Crisp by default, except on route "/". Crisp is toggled with <ButtonSupport/>. If you want to show Crisp on every routes, just remove this below
    onlyShowOnRoutes: ["/"],
  },
  stripe: {
    // Create multiple plans in your Stripe dashboard, then add them here. You can add as many plans as you want, just make sure to add the priceId
    plans: [
      {
        priceId: process.env.NEXT_PUBLIC_STRIPE_PRICE_ID,
        price: 15,
        name: "Pro",
        description: "Everything you need for LinkedIn automation",
        priceDetails: "/month",
        connectionLimit: 500,
        isFeatured: true,
        features: [
          "500 connection requests/month",
          "Unlimited active campaigns",
          "Advanced Auto Reply capabilities",
          "AI message personalization",
          "Priority support",
        ],
      },
    ],
  },
  aws: {
    // If you use AWS S3/Cloudfront, put values in here
    bucket: "bucket-name",
    bucketUrl: `https://bucket-name.s3.amazonaws.com/`,
    cdn: "https://cdn-id.cloudfront.net/",
  },
  mailgun: {
    // subdomain to use when sending emails, if you don't have a subdomain, just remove it. Highly recommended to have one (i.e. mg.yourdomain.com or mail.yourdomain.com)
    subdomain: "mg",
    // REQUIRED — Email 'From' field to be used when sending magic login links
    fromNoReply: `Prospectr <noreply@mg.digitalseobull.com>`,
    // REQUIRED — Email 'From' field to be used when sending other emails, like abandoned carts, updates etc..
    fromAdmin: `Prospectr <customerservice@digitalseobull.com>`,
    // Email shown to customer if need support. Leave empty if not needed => if empty, set up Crisp above, otherwise you won't be able to offer customer support."
    supportEmail: "customerservice@digitalseobull.com",
    // When someone replies to supportEmail sent by the app, forward it to the email below (otherwise it's lost). If you set supportEmail to empty, this will be ignored.
    forwardRepliesTo: "customerservice@digitalseobull.com",
  },
  colors: {
    // The DaisyUI theme to use. Choose from: light, dark, cupcake, bumblebee, emerald, corporate, synthwave, retro, cyberpunk, valentine, halloween, garden, forest, aqua, lofi, pastel, fantasy, wireframe, black, luxury, dracula, cmyk, autumn, business, acid, lemonade, night, coffee, winter
    theme: "black",
    // Main color for browser UI elements
    main: themes["black"],
  },
  auth: {
    // REQUIRED — the path to log in users. It's use to protect private routes (like /dashboard). It's used in apiClient (/libs/api.js) upon 401 errors from our API
    loginUrl: "/signin",
    // REQUIRED — the path you want to redirect users after successfull login (i.e. /dashboard, /private). This is normally a private page for users to manage their accounts. It's used in apiClient (/libs/api.js) upon 401 errors from our API & in ButtonSignin.js
    callbackUrl: "/dashboard",
  },
};

export default config;

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "jsx": "react",
    "paths": {
      "@/*": ["./*"]
    }
  }
}

================
File: middleware.js
================
import { createServerClient } from "@supabase/ssr";
import { NextResponse } from "next/server";

export async function middleware(request) {
  let supabaseResponse = NextResponse.next({
    request,
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll();
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) =>
            request.cookies.set(name, value)
          );
          supabaseResponse = NextResponse.next({
            request,
          });
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          );
        },
      },
      cookieOptions: {
        secure: process.env.NODE_ENV === "production",
        maxAge: 60 * 60 * 24 * 7, // 7 days
        sameSite: "lax",
        path: "/",
      },
    }
  );

  try {
    // IMPORTANT: DO NOT REMOVE auth.getUser()
    const {
      data: { user },
    } = await supabase.auth.getUser();

    const {
      data: { session },
    } = await supabase.auth.getSession();

    // Check if the URL has auth_success parameter which indicates a successful authentication
    const authSuccess = request.nextUrl.searchParams.get("auth_success");

    // Try to refresh the session if we have a session but no user
    if (!user && session) {
      const { error: refreshError } = await supabase.auth.refreshSession();
      if (!refreshError) {
        // Session refreshed successfully, get the user again
        const {
          data: { user: refreshedUser },
        } = await supabase.auth.getUser();

        // If we now have a user, we can proceed
        if (refreshedUser) {
          return supabaseResponse;
        }
      }
    }

    // Protected routes check - redirect to signin if not authenticated
    if (
      !user &&
      !request.nextUrl.pathname.startsWith("/login") &&
      !request.nextUrl.pathname.startsWith("/auth") &&
      !request.nextUrl.pathname.startsWith("/signin") &&
      !request.nextUrl.pathname.startsWith("/signup") &&
      !request.nextUrl.pathname.startsWith("/reset-password") &&
      !request.nextUrl.pathname.startsWith("/api/stripe") && // Exclude Stripe API routes
      request.nextUrl.pathname !== "/"
    ) {
      const url = request.nextUrl.clone();
      url.pathname = "/signin";
      return NextResponse.redirect(url);
    }

    // If we have a successful auth and user, ensure cookies are properly set
    if (authSuccess && user) {
      const url = request.nextUrl.clone();
      url.searchParams.delete("auth_success");
      const cleanResponse = NextResponse.redirect(url);
      supabaseResponse.cookies.getAll().forEach((cookie) => {
        cleanResponse.cookies.set(cookie.name, cookie.value, cookie.options);
      });
      return cleanResponse;
    }

    return supabaseResponse;
  } catch (error) {
    console.error("Middleware error:", error);
    return supabaseResponse;
  }
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public files with extensions
     */
    "/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)",
  ],
};

================
File: next-sitemap.config.js
================
module.exports = {
  // REQUIRED: add your own domain name here (e.g. https://shipfa.st),
  siteUrl: process.env.NEXT_PUBLIC_APP_URL,
  generateRobotsTxt: true,
  // use this to exclude routes from the sitemap (i.e. a user dashboard). By default, NextJS app router metadata files are excluded (https://nextjs.org/docs/app/api-reference/file-conventions/metadata)
  exclude: ["/twitter-image.*", "/opengraph-image.*", "/icon.*"],
};

================
File: next.config.js
================
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: [
      // NextJS <Image> component needs to whitelist domains for src={}
      "lh3.googleusercontent.com",
      "pbs.twimg.com",
      "images.unsplash.com",
      "logos-world.net",
      "www.linkedin.com",
      "unsplash.com",
      "via.placeholder.com",
    ],
  },
  // Configure ESLint to not fail builds on warnings
  eslint: {
    // Warning during builds, but not failing
    ignoreDuringBuilds: true,
  },
  // Add headers for Open Graph images
  async headers() {
    return [
      {
        source: '/:all*(opengraph-image|twitter-image).png',
        headers: [
          {
            key: 'Cache-Control',
            value: 'no-store, max-age=0',
          },
        ],
      },
    ]
  },
  // Exclude Supabase Edge Functions from webpack compilation
  webpack: (config) => {
    // Add the supabase functions directory to ignored modules
    config.watchOptions = config.watchOptions || {};
    config.watchOptions.ignored = config.watchOptions.ignored || [];
    
    if (Array.isArray(config.watchOptions.ignored)) {
      config.watchOptions.ignored.push('**/supabase/functions/**');
    } else {
      config.watchOptions.ignored = ['**/supabase/functions/**'];
    }
    
    return config;
  },
  // Enable Turbopack for development
  experimental: {
    // Enable Turbopack
    turbo: {},
  },
};

module.exports = nextConfig;

================
File: package.json
================
{
  "name": "ship-fast-code",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "postbuild": "next-sitemap",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlessui/react": "^1.7.18",
    "@radix-ui/react-select": "^2.1.5",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.3",
    "@splinetool/react-spline": "^4.0.0",
    "@splinetool/runtime": "^1.9.59",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/ssr": "^0.5.2",
    "@supabase/supabase-js": "^2.49.1",
    "@tanstack/react-query": "^5.68.0",
    "@vercel/analytics": "^1.5.0",
    "@vercel/speed-insights": "^1.2.0",
    "axios": "^1.6.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "crisp-sdk-web": "^1.0.25",
    "eslint": "8.47.0",
    "eslint-config-next": "13.4.19",
    "form-data": "^4.0.0",
    "framer-motion": "^12.5.0",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.473.0",
    "mailgun.js": "^9.4.1",
    "next": "^15.2.2",
    "next-plausible": "^3.12.0",
    "next-sitemap": "^4.2.3",
    "nextjs-toploader": "^1.6.11",
    "nodemailer": "^6.9.13",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-hot-toast": "^2.4.1",
    "react-syntax-highlighter": "^15.6.1",
    "react-tooltip": "^5.26.3",
    "react-type-animation": "^3.2.0",
    "resend": "^4.1.2",
    "stripe": "^13.11.0",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "unipile-node-sdk": "^1.9.2",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@types/react": "19.0.8",
    "autoprefixer": "^10.4.19",
    "daisyui": "^4.12.23",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.3"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Prospectr

### Your personal AI powered LinkedIn assistant, allowing you to make connections and message leads on autopilot.

================
File: rest.http
================
GET http://localhost:3000/api/localhost:3000/api/callback

================
File: schema.txt
================
profiles (
  id UUID   
  user_id UUID REFERENCES auth.users NOT NULL, -- Supabase Auth user ID
  linkedin_token TEXT, -- Encrypted LinkedIn token (using pgcrypto)
  linkedin_status BOOLEAN DEFAULT FALSE, -- Is LinkedIn connected?
  message_quota INT DEFAULT 50, -- Daily message limit
  stripe_customer_id TEXT, -- Stripe customer ID
  subscription_tier TEXT DEFAULT 'free', -- free/pro/premium
  created_at TIMESTAMPTZ DEFAULT NOW()
);

linkedin_connections (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  profile_id TEXT, -- LinkedIn profile ID from Unipile
  name TEXT,
  headline TEXT,
  connected_at TIMESTAMPTZ, -- When the connection was made
  status TEXT -- pending/accepted/ignored
);

================
File: tailwind.config.js
================
module.exports = {
    darkMode: ["class"],
    content: [
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./styles/globals.css",
  ],
  theme: {
  	extend: {
  		backgroundImage: {
  			gradient: 'linear-gradient(90deg, hsl(var(--color-1)), hsl(var(--color-5)), hsl(var(--color-3)), hsl(var(--color-4)), hsl(var(--color-2)))'
  		},
  		animation: {
  			opacity: 'opacity 0.25s ease-in-out',
  			appearFromRight: 'appearFromRight 300ms ease-in-out',
  			wiggle: 'wiggle 1.5s ease-in-out infinite',
  			popup: 'popup 0.25s ease-in-out',
  			shimmer: 'shimmer 3s ease-out infinite alternate',
  			rainbow: 'rainbow 4s linear infinite',
        gradient: 'gradient 8s ease infinite'
  		},
  		keyframes: {
  			opacity: {
  				'0%': {
  					opacity: 0
  				},
  				'100%': {
  					opacity: 1
  				}
  			},
  			appearFromRight: {
  				'0%': {
  					opacity: 0.3,
  					transform: 'translate(15%, 0px);'
  				},
  				'100%': {
  					opacity: 1,
  					transform: 'translate(0);'
  				}
  			},
  			wiggle: {
  				'0%, 20%, 80%, 100%': {
  					transform: 'rotate(0deg)'
  				},
  				'30%, 60%': {
  					transform: 'rotate(-2deg)'
  				},
  				'40%, 70%': {
  					transform: 'rotate(2deg)'
  				},
  				'45%': {
  					transform: 'rotate(-4deg)'
  				},
  				'55%': {
  					transform: 'rotate(4deg)'
  				}
  			},
  			popup: {
  				'0%': {
  					transform: 'scale(0.8)',
  					opacity: 0.8
  				},
  				'50%': {
  					transform: 'scale(1.1)',
  					opacity: 1
  				},
  				'100%': {
  					transform: 'scale(1)',
  					opacity: 1
  				}
  			},
  			shimmer: {
  				'0%': {
  					backgroundPosition: '0 50%'
  				},
  				'50%': {
  					backgroundPosition: '100% 50%'
  				},
  				'100%': {
  					backgroundPosition: '0% 50%'
  				}
  			},
  			rainbow: {
  				'0%': {
  					'background-position': '0% 50%'
  				},
  				'50%': {
  					'background-position': '100% 50%'
  				},
  				'100%': {
  					'background-position': '0% 50%'
  				}
  			},
        gradient: {
          '0%': { 'background-position': '0% 50%' },
          '50%': { 'background-position': '100% 50%' },
          '100%': { 'background-position': '0% 50%' }
        }
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			'color-1': 'hsl(var(--color-1))',
  			'color-2': 'hsl(var(--color-2))',
  			'color-3': 'hsl(var(--color-3))',
  			'color-4': 'hsl(var(--color-4))',
  			'color-5': 'hsl(var(--color-5))'
  		}
  	}
  },
  plugins: [require("daisyui"), require("tailwindcss-animate")],
  daisyui: {
    themes: [
      "light",
      "dark",
      "cupcake",
      "bumblebee",
      "emerald",
      "corporate",
      "synthwave",
      "retro",
      "cyberpunk",
      "valentine",
      "halloween",
      "garden",
      "forest",
      "aqua",
      "lofi",
      "pastel",
      "fantasy",
      "wireframe",
      "black",
      "luxury",
      "dracula",
      "cmyk",
      "autumn",
      "business",
      "acid",
      "lemonade",
      "night",
      "coffee",
      "winter"
    ],
    darkTheme: "dark",
  },
};

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules", "supabase/functions"]
}

================
File: vercel.json
================
{
  "functions": {
    "app/api/webhook/stripe/route.js": {
      "includeFiles": "app/api/webhook/stripe/route.js",
      "memory": 1024,
      "maxDuration": 10
    }
  },
  "crons": [
    {
      "path": "/api/cron/check-invitations",
      "schedule": "0 */2 * * *"
    },
    {
      "path": "/api/cron/check-responses",
      "schedule": "0 */4 * * *"
    }
  ]
}



================================================================
End of Codebase
================================================================
